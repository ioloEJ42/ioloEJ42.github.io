{
  "README.md": "# Portfolio\n\nThis is the portfolio section of my website. It features:\n- A terminal-style interface\n- Project showcases\n- Blog posts\n- Interactive elements\n- Real filesystem integration\n\nThe filesystem is automatically generated using GitHub Actions.\nLast updated: Testing GitHub Action workflow.",
  "assets": {
    "script.js": "/**\n * Main script for portfolio site\n * Handles data loading, page routing, and component rendering\n * Enhanced with terminal-style interactions\n */\n\n// Preload components as early as possible\n// We define an inline component system for navigation and footer as fallback\n// This ensures something displays even before components.js loads\n(function preloadBasicComponents() {\n  // Minimal component system for immediate rendering\n  window.BasicComponents = {\n    Navbar: (activePage = &quot;&quot;) =&gt; {\n      return `\n        &lt;nav&gt;\n          &lt;div class=&quot;nav-container&quot;&gt;\n            &lt;div class=&quot;nav-title&quot;&gt;PORTFOLIO_&lt;/div&gt;\n            &lt;div class=&quot;hamburger-menu&quot;&gt;\n              &lt;div class=&quot;bar1&quot;&gt;&lt;/div&gt;\n              &lt;div class=&quot;bar2&quot;&gt;&lt;/div&gt;\n              &lt;div class=&quot;bar3&quot;&gt;&lt;/div&gt;\n            &lt;/div&gt;\n          &lt;/div&gt;\n          &lt;ul class=&quot;nav-links&quot;&gt;\n            &lt;li class=&quot;${\n              activePage === &quot;home&quot; ? &quot;active&quot; : &quot;&quot;\n            }&quot;&gt;&lt;a href=&quot;index.html&quot;&gt;$ HOME&lt;/a&gt;&lt;/li&gt;\n            &lt;li class=&quot;${\n              activePage === &quot;projects&quot; ? &quot;active&quot; : &quot;&quot;\n            }&quot;&gt;&lt;a href=&quot;projects.html&quot;&gt;$ PROJECTS&lt;/a&gt;&lt;/li&gt;\n            &lt;li class=&quot;${\n              activePage === &quot;blogs&quot; ? &quot;active&quot; : &quot;&quot;\n            }&quot;&gt;&lt;a href=&quot;blogs.html&quot;&gt;$ BLOGS&lt;/a&gt;&lt;/li&gt;\n            &lt;li class=&quot;${\n              activePage === &quot;interface&quot; ? &quot;active&quot; : &quot;&quot;\n            }&quot;&gt;&lt;a href=&quot;interface.html&quot;&gt;$ TERMINAL&lt;/a&gt;&lt;/li&gt;\n            &lt;li class=&quot;${\n              activePage === &quot;contact&quot; ? &quot;active&quot; : &quot;&quot;\n            }&quot;&gt;&lt;a href=&quot;contact.html&quot;&gt;$ CONTACT&lt;/a&gt;&lt;/li&gt;\n          &lt;/ul&gt;\n        &lt;/nav&gt;\n      `;\n    },\n\n    Footer: () =&gt; {\n      const currentYear = new Date().getFullYear();\n      return `\n        &lt;p&gt;&amp;copy; ${currentYear} Iolo Evans Jones | $ echo &quot;Built with HTML, CSS, JS, and a bit of love &lt;3&quot;&lt;/p&gt;\n      `;\n    },\n  };\n\n  // Render the basic components instantly\n  const currentPage = getCurrentPage();\n  const headerElement = document.querySelector(&quot;header&quot;);\n  const footerElement = document.querySelector(&quot;footer&quot;);\n\n  if (headerElement) {\n    headerElement.innerHTML = window.BasicComponents.Navbar(currentPage);\n  }\n\n  if (footerElement) {\n    footerElement.innerHTML = window.BasicComponents.Footer();\n  }\n\n  // Helper function for initial page detection\n  function getCurrentPage() {\n    const pathname = window.location.pathname;\n    const filename = pathname.split(&quot;/&quot;).pop();\n\n    if (\n      filename === &quot;index.html&quot; ||\n      filename === &quot;&quot; ||\n      pathname.endsWith(&quot;/portfolio/&quot;)\n    ) {\n      return &quot;home&quot;;\n    } else if (filename === &quot;projects.html&quot;) {\n      return &quot;projects&quot;;\n    } else if (filename === &quot;blogs.html&quot;) {\n      return &quot;blogs&quot;;\n    } else if (filename === &quot;interface.html&quot;) {\n      return &quot;interface&quot;;\n    } else if (filename === &quot;contact.html&quot;) {\n      return &quot;contact&quot;;\n    } else if (filename === &quot;project.html&quot;) {\n      return &quot;project&quot;;\n    } else if (filename === &quot;blog.html&quot;) {\n      return &quot;blog&quot;;\n    }\n    return &quot;home&quot;;\n  }\n})();\n\n// Initialize main functionality after DOM is loaded\ndocument.addEventListener(&quot;DOMContentLoaded&quot;, () =&gt; {\n  // Use console logging instead of visual indicators\n  console.log(&quot;$ loading components...&quot;);\n\n  // Load components script for full functionality\n  const componentsScript = document.createElement(&quot;script&quot;);\n  componentsScript.src = &quot;components.js&quot;;\n  componentsScript.onload = () =&gt; {\n    console.log(&quot;$ components loaded successfully&quot;);\n    initializePage();\n  };\n  componentsScript.onerror = handleComponentError;\n  document.body.appendChild(componentsScript);\n});\n\n// Handle component loading error\nfunction handleComponentError() {\n  console.error(&quot;$ components.js: No such file or directory&quot;);\n  document.body.insertAdjacentHTML(\n    &quot;afterbegin&quot;,\n    &quot;&lt;div style=\\&quot;background: #222; color: #ddd; padding: 1rem; margin: 1rem; font-family: &#039;JetBrains Mono&#039;, monospace; border: 1px solid #555;\\&quot;&gt;&quot; +\n      &quot;&lt;h3&gt;Error: components.js not found&lt;/h3&gt;&quot; +\n      &quot;&lt;p&gt;$ cat components.js&lt;br&gt;cat: components.js: No such file or directory&lt;/p&gt;&quot; +\n      &quot;&lt;/div&gt;&quot;\n  );\n}\n\n// Terminal typing animation\nfunction simulateTyping(element, text, speed = 50) {\n  let i = 0;\n  element.textContent = &quot;&quot;;\n\n  return new Promise((resolve) =&gt; {\n    function type() {\n      if (i &lt; text.length) {\n        element.textContent += text.charAt(i);\n        i++;\n        setTimeout(type, speed);\n      } else {\n        resolve();\n      }\n    }\n    type();\n  });\n}\n\n// Page initialization - we don&#039;t need to re-render the header/footer\n// since they were already rendered by the preload function\nasync function initializePage() {\n  // Check if Components were properly loaded\n  if (typeof Components === &quot;undefined&quot;) {\n    console.error(&quot;$ typeof Components&quot;);\n    console.error(&quot;undefined&quot;);\n    document.body.insertAdjacentHTML(\n      &quot;afterbegin&quot;,\n      &quot;&lt;div style=\\&quot;background: #222; color: #ddd; padding: 1rem; margin: 1rem; font-family: &#039;JetBrains Mono&#039;, monospace; border: 1px solid #555;\\&quot;&gt;&quot; +\n        &quot;&lt;h3&gt;Error: Components not defined&lt;/h3&gt;&quot; +\n        &quot;&lt;p&gt;$ typeof Components&lt;br&gt;undefined&lt;/p&gt;&quot; +\n        &quot;&lt;/div&gt;&quot;\n    );\n    return;\n  }\n\n  // Determine current page\n  const currentPage = getCurrentPage();\n  console.log(&quot;$ echo $CURRENT_PAGE&quot;);\n  console.log(currentPage);\n\n  // Load page-specific content without re-rendering nav/footer\n  // This prevents the flash of unstyled content\n  switch (currentPage) {\n    case &quot;home&quot;:\n      loadHomeContent();\n      break;\n    case &quot;projects&quot;:\n      loadProjectsContent();\n      break;\n    case &quot;blogs&quot;:\n      loadBlogsContent();\n      break;\n    case &quot;project&quot;:\n      loadProjectDetail();\n      break;\n    case &quot;blog&quot;:\n      loadBlogDetail();\n      break;\n    case &quot;interface&quot;:\n      // Terminal interface page doesn&#039;t need data loading\n      // Terminal functionality is handled by terminal.js\n      break;\n    case &quot;contact&quot;:\n      // Contact page doesn&#039;t need data loading\n      break;\n  }\n}\n\n// Get current page\nfunction getCurrentPage() {\n  const pathname = window.location.pathname;\n  const filename = pathname.split(&quot;/&quot;).pop();\n\n  console.log(&quot;$ pwd&quot;);\n  console.log(pathname);\n\n  if (\n    filename === &quot;index.html&quot; ||\n    filename === &quot;&quot; ||\n    pathname.endsWith(&quot;/portfolio/&quot;)\n  ) {\n    return &quot;home&quot;;\n  } else if (filename === &quot;projects.html&quot;) {\n    return &quot;projects&quot;;\n  } else if (filename === &quot;blogs.html&quot;) {\n    return &quot;blogs&quot;;\n  } else if (filename === &quot;interface.html&quot;) {\n    return &quot;interface&quot;;\n  } else if (filename === &quot;contact.html&quot;) {\n    return &quot;contact&quot;;\n  } else if (filename === &quot;project.html&quot;) {\n    return &quot;project&quot;;\n  } else if (filename === &quot;blog.html&quot;) {\n    return &quot;blog&quot;;\n  }\n\n  return &quot;home&quot;; // Default\n}\n\n// Get URL parameter\nfunction getUrlParam(param) {\n  const urlParams = new URLSearchParams(window.location.search);\n  return urlParams.get(param);\n}\n\n// Cache for storing loaded data\nconst dataCache = {\n  projectsMetadata: null,\n  blogMetadata: null,\n  projects: {},\n  blogs: {},\n};\n\n// Enhanced JSON loading with better error handling and console logging\nasync function loadJsonData(filename) {\n  if (filename === &quot;projects&quot; &amp;&amp; dataCache.projectsMetadata) {\n    return dataCache.projectsMetadata;\n  }\n  if (filename === &quot;blogs&quot; &amp;&amp; dataCache.blogMetadata) {\n    return dataCache.blogMetadata;\n  }\n  if (\n    filename.startsWith(&quot;projects/&quot;) &amp;&amp;\n    dataCache.projects[filename.split(&quot;/&quot;)[1]]\n  ) {\n    return dataCache.projects[filename.split(&quot;/&quot;)[1]];\n  }\n  if (\n    filename.startsWith(&quot;blogs/&quot;) &amp;&amp;\n    dataCache.blogs[filename.split(&quot;/&quot;)[1]]\n  ) {\n    return dataCache.blogs[filename.split(&quot;/&quot;)[1]];\n  }\n\n  console.log(`$ curl -s https://api.portfolio.local/data/${filename}.json`);\n\n  try {\n    const response = await fetch(`data/${filename}.json`);\n\n    if (!response.ok) {\n      console.error(\n        `curl: (404) Not Found - ${filename}.json (${response.status})`\n      );\n      return null;\n    }\n\n    const data = await response.json();\n    console.log(`$ jq . data/${filename}.json | head -3`);\n    console.log(`{...}`); // Simulating partial output of jq\n\n    // Cache the data\n    if (filename === &quot;projects&quot;) {\n      dataCache.projectsMetadata = data;\n    } else if (filename === &quot;blogs&quot;) {\n      dataCache.blogMetadata = data;\n    } else if (filename.startsWith(&quot;projects/&quot;)) {\n      dataCache.projects[filename.split(&quot;/&quot;)[1]] = data;\n    } else if (filename.startsWith(&quot;blogs/&quot;)) {\n      dataCache.blogs[filename.split(&quot;/&quot;)[1]] = data;\n    }\n\n    return data;\n  } catch (error) {\n    console.error(\n      `curl: Failed to connect to api.portfolio.local - ${error.message}`\n    );\n    return null;\n  }\n}\n\n// Home page content\nasync function loadHomeContent() {\n  console.log(&quot;$ loading home content...&quot;);\n\n  // Load profile data\n  const profileData = await loadJsonData(&quot;profile&quot;);\n  if (profileData) {\n    const nameEl = document.getElementById(&quot;profile-name&quot;);\n    const titleEl = document.getElementById(&quot;profile-title&quot;);\n    const bioEl = document.getElementById(&quot;profile-bio&quot;);\n\n    if (nameEl) nameEl.textContent = profileData.name;\n    if (titleEl) titleEl.textContent = profileData.title;\n    if (bioEl) bioEl.innerHTML = profileData.bio;\n  } else {\n    document.getElementById(&quot;profile-bio&quot;).innerHTML =\n      &quot;&lt;p&gt;$ cat: bio.txt: No such file or directory&lt;/p&gt;&quot;;\n  }\n\n  console.log(&quot;$ home content loaded&quot;);\n}\n\n// Projects page content\nasync function loadProjectsContent() {\n  console.log(&quot;$ loading projects...&quot;);\n  const projectsContainer = document.querySelector(&quot;.terminal-output&quot;);\n  if (projectsContainer) {\n    // Simulate SSH connection time but shorter\n    await new Promise((resolve) =&gt; setTimeout(resolve, 500));\n\n    const projectsData = await loadJsonData(&quot;projects&quot;);\n    if (projectsData &amp;&amp; projectsData.projects) {\n      if (projectsData.projects.length &gt; 0) {\n        // Sort projects by date, newest first\n        const sortedProjects = [...projectsData.projects].sort((a, b) =&gt; {\n          const dateA = new Date(a.date || 0);\n          const dateB = new Date(b.date || 0);\n          return dateB - dateA; // Descending order (newest first)\n        });\n\n        let output = &quot;&quot;;\n        // Add ls -la style header\n        output += &quot;&lt;p&gt;total &quot; + sortedProjects.length + &quot;&lt;/p&gt;&quot;;\n        output += &quot;&lt;div class=&#039;projects-grid&#039;&gt;&quot;;\n        output += sortedProjects\n          .map((project) =&gt; Components.ProjectCard(project))\n          .join(&quot;&quot;);\n        output += &quot;&lt;/div&gt;&quot;;\n        projectsContainer.innerHTML = output;\n      } else {\n        projectsContainer.innerHTML = &quot;&lt;p&gt;total 0&lt;/p&gt;&lt;p&gt;No projects found.&lt;/p&gt;&quot;;\n      }\n    } else {\n      projectsContainer.innerHTML =\n        &quot;&lt;p&gt;ls: cannot access &#039;.&#039;: Connection timed out&lt;/p&gt;&quot;;\n    }\n  }\n  console.log(&quot;$ projects loaded&quot;);\n}\n\n// Blogs page content\nasync function loadBlogsContent() {\n  console.log(&quot;$ loading blogs...&quot;);\n  const blogsContainer = document.querySelector(&quot;.terminal-output&quot;);\n  if (blogsContainer) {\n    // Simulate SSH connection time but shorter\n    await new Promise((resolve) =&gt; setTimeout(resolve, 500));\n\n    const blogsData = await loadJsonData(&quot;blogs&quot;);\n    if (blogsData &amp;&amp; blogsData.posts) {\n      if (blogsData.posts.length &gt; 0) {\n        // Sort blog posts by date, newest first\n        const sortedPosts = [...blogsData.posts].sort((a, b) =&gt; {\n          const dateA = new Date(a.date || 0);\n          const dateB = new Date(b.date || 0);\n          return dateB - dateA; // Descending order (newest first)\n        });\n\n        let output = &quot;&quot;;\n        // Add find command style output\n        output += &quot;&lt;div class=&#039;posts-list&#039;&gt;&quot;;\n        output += sortedPosts\n          .map((post) =&gt; Components.BlogPostItem(post))\n          .join(&quot;&quot;);\n        output += &quot;&lt;/div&gt;&quot;;\n        blogsContainer.innerHTML = output;\n      } else {\n        blogsContainer.innerHTML = &quot;&lt;p&gt;No blog posts found.&lt;/p&gt;&quot;;\n      }\n    } else {\n      blogsContainer.innerHTML =\n        &quot;&lt;p&gt;find: cannot access &#039;./&#039;: Connection timed out&lt;/p&gt;&quot;;\n    }\n  }\n  console.log(&quot;$ blogs loaded&quot;);\n}\n\n// Project detail page\nasync function loadProjectDetail() {\n  const projectId = getUrlParam(&quot;id&quot;);\n  if (!projectId) {\n    window.location.href = &quot;projects.html&quot;;\n    return;\n  }\n\n  console.log(`$ loading project ${projectId}...`);\n  const contentContainer = document.getElementById(&quot;project-content&quot;);\n  const projectDirectory = document.getElementById(&quot;project-directory&quot;);\n  const projectPath = document.getElementById(&quot;project-path&quot;);\n  const projectPathCursor = document.querySelector(&quot;.project-path-cursor&quot;);\n  const titleEl = document.getElementById(&quot;project-title&quot;);\n  const tagsEl = document.getElementById(&quot;project-tags&quot;);\n  const descriptionEl = document.getElementById(&quot;project-description&quot;);\n  const linksEl = document.getElementById(&quot;project-links&quot;);\n\n  if (contentContainer) {\n    // First load projects metadata\n    const projectsData = await loadJsonData(&quot;projects&quot;);\n    if (!projectsData || !projectsData.projects) {\n      contentContainer.innerHTML =\n        &quot;&lt;p&gt;cat: README.md: No such file or directory&lt;/p&gt;&quot;;\n      return;\n    }\n\n    const projectMeta = projectsData.projects.find((p) =&gt; p.id === projectId);\n    if (!projectMeta) {\n      contentContainer.innerHTML =\n        &quot;&lt;p&gt;cd: no such directory: &quot; + projectId + &quot;&lt;/p&gt;&quot;;\n      return;\n    }\n\n    // Update project directory and path\n    if (projectDirectory) projectDirectory.textContent = projectMeta.id;\n    if (projectPath) projectPath.textContent = projectMeta.id;\n    if (projectPathCursor) projectPathCursor.textContent = projectMeta.id;\n\n    // Update page title and project metadata\n    if (titleEl) titleEl.textContent = projectMeta.title;\n    if (tagsEl) {\n      tagsEl.innerHTML = projectMeta.tags\n        .map((tag) =&gt; `&lt;span class=&quot;project-tag&quot;&gt;${tag}&lt;/span&gt;`)\n        .join(&quot;&quot;);\n    }\n    if (descriptionEl) descriptionEl.textContent = projectMeta.description;\n\n    // Now load the full project content\n    const projectContent = await loadJsonData(`projects/${projectId}`);\n    if (projectContent) {\n      // Simulate loading time but shorter\n      await new Promise((resolve) =&gt; setTimeout(resolve, 300));\n      contentContainer.innerHTML = projectContent.content;\n\n      // Add links if they exist and are not &quot;N/A&quot;\n      if (linksEl) {\n        let linksHTML = &quot;&quot;;\n\n        // Check if live link exists and is not &quot;N/A&quot; (case-insensitive)\n        if (\n          projectContent.live &amp;&amp;\n          !/^n\\/?a$/i.test(projectContent.live.trim())\n        ) {\n          linksHTML += `&lt;a href=&quot;${projectContent.live}&quot; target=&quot;_blank&quot; class=&quot;demo-link&quot;&gt;Live Demo&lt;/a&gt;`;\n        }\n\n        // Check if github link exists and is not &quot;N/A&quot; (case-insensitive)\n        if (\n          projectContent.github &amp;&amp;\n          !/^n\\/?a$/i.test(projectContent.github.trim())\n        ) {\n          // Only add margin-left if there&#039;s also a live demo link\n          const marginClass = linksHTML.length &gt; 0 ? &quot; github-with-margin&quot; : &quot;&quot;;\n          linksHTML += `&lt;a href=&quot;${projectContent.github}&quot; target=&quot;_blank&quot; class=&quot;repo-link${marginClass}&quot;&gt;GitHub Repo&lt;/a&gt;`;\n        }\n\n        linksEl.innerHTML = linksHTML;\n      }\n\n      // Update document title\n      document.title = `${projectContent.title} | PORTFOLIO_`;\n    } else {\n      contentContainer.innerHTML =\n        &quot;&lt;p&gt;cat: README.md: No such file or directory&lt;/p&gt;&quot;;\n    }\n  }\n  console.log(`$ project ${projectId} loaded`);\n}\n\n// Blog detail page\nasync function loadBlogDetail() {\n  const blogId = getUrlParam(&quot;id&quot;);\n  if (!blogId) {\n    window.location.href = &quot;blogs.html&quot;;\n    return;\n  }\n\n  console.log(`$ loading blog ${blogId}...`);\n  const contentContainer = document.getElementById(&quot;blog-content&quot;);\n  const titleEl = document.getElementById(&quot;blog-title&quot;);\n  const dateEl = document.getElementById(&quot;blog-date&quot;);\n  const filenameEl = document.getElementById(&quot;blog-filename&quot;);\n\n  if (contentContainer) {\n    // First load blogs metadata\n    const blogsData = await loadJsonData(&quot;blogs&quot;);\n    if (!blogsData || !blogsData.posts) {\n      contentContainer.innerHTML =\n        &quot;&lt;p&gt;less: post.md: No such file or directory&lt;/p&gt;&quot;;\n      return;\n    }\n\n    const blogMeta = blogsData.posts.find((p) =&gt; p.id === blogId);\n    if (!blogMeta) {\n      contentContainer.innerHTML =\n        &quot;&lt;p&gt;less: post.md: No such file or directory&lt;/p&gt;&quot;;\n      return;\n    }\n\n    // Update page title and blog metadata\n    if (titleEl) titleEl.textContent = blogMeta.title;\n    if (dateEl) dateEl.textContent = &quot;Date: &quot; + blogMeta.date;\n    if (filenameEl) filenameEl.textContent = blogId + &quot;.md&quot;;\n\n    // Update document title\n    document.title = `${blogMeta.title} | PORTFOLIO_`;\n\n    // Now load the full blog content\n    const blogContent = await loadJsonData(`blogs/${blogId}`);\n    if (blogContent) {\n      // Simulate loading time but shorter\n      await new Promise((resolve) =&gt; setTimeout(resolve, 300));\n      contentContainer.innerHTML = blogContent.content;\n    } else {\n      contentContainer.innerHTML =\n        &quot;&lt;p&gt;less: &quot; + blogId + &quot;.md: No such file or directory&lt;/p&gt;&quot;;\n    }\n  }\n  console.log(`$ blog ${blogId} loaded`);\n}\n\n// Add blinking cursor animation to elements\nfunction addBlinkingCursors() {\n  const cursors = document.querySelectorAll(&quot;.blink-cursor&quot;);\n  cursors.forEach((cursor) =&gt; {\n    if (!cursor.classList.contains(&quot;animated&quot;)) {\n      cursor.classList.add(&quot;animated&quot;);\n    }\n  });\n}\n\n// Simulate typing for terminal command elements\nfunction simulateCommandTyping() {\n  const commands = document.querySelectorAll(\n    &quot;.terminal-command:not(.blink-cursor):not(.typed)&quot;\n  );\n  commands.forEach(async (cmd) =&gt; {\n    const text = cmd.textContent;\n    cmd.classList.add(&quot;typed&quot;);\n    cmd.textContent = &quot;&quot;;\n    await new Promise((resolve) =&gt; setTimeout(resolve, Math.random() * 300));\n    simulateTyping(cmd, text, Math.floor(Math.random() * 15) + 15);\n  });\n}\n\n// GitHub Profile Data Fetcher\nasync function fetchGitHubProfile() {\n  const username = &quot;ioloEJ42&quot;;\n\n  try {\n    // Fetch basic profile data\n    const profileResponse = await fetch(\n      `https://api.github.com/users/${username}`\n    );\n    const profile = await profileResponse.json();\n\n    // Fetch repositories data\n    const reposResponse = await fetch(\n      `https://api.github.com/users/${username}/repos?sort=updated&amp;per_page=3`\n    );\n    const repos = await reposResponse.json();\n\n    // Build profile HTML with two-column layout\n    let profileHTML = `\n      &lt;div class=&quot;github-profile-grid&quot;&gt;\n        &lt;div class=&quot;github-profile-info&quot;&gt;\n          &lt;p&gt;&lt;span class=&quot;terminal-green&quot;&gt;Username:&lt;/span&gt; ${profile.login}&lt;/p&gt;\n          ${\n            profile.name\n              ? `&lt;p&gt;&lt;span class=&quot;terminal-green&quot;&gt;Name:&lt;/span&gt; ${profile.name}&lt;/p&gt;`\n              : &quot;&quot;\n          }\n          ${\n            profile.bio\n              ? `&lt;p&gt;&lt;span class=&quot;terminal-green&quot;&gt;Bio:&lt;/span&gt; ${profile.bio}&lt;/p&gt;`\n              : &quot;&quot;\n          }\n          &lt;p&gt;&lt;span class=&quot;terminal-green&quot;&gt;Public Repos:&lt;/span&gt; ${\n            profile.public_repos\n          }&lt;/p&gt;\n          &lt;p&gt;&lt;span class=&quot;terminal-green&quot;&gt;Followers:&lt;/span&gt; ${\n            profile.followers\n          }&lt;/p&gt;\n          &lt;p&gt;&lt;span class=&quot;terminal-green&quot;&gt;Following:&lt;/span&gt; ${\n            profile.following\n          }&lt;/p&gt;\n          &lt;p&gt;&lt;span class=&quot;terminal-green&quot;&gt;Profile URL:&lt;/span&gt; &lt;a href=&quot;${\n            profile.html_url\n          }&quot; target=&quot;_blank&quot;&gt;${profile.html_url}&lt;/a&gt;&lt;/p&gt;\n        &lt;/div&gt;\n    `;\n\n    // Add repos section as second column if repositories were found\n    if (repos.length &gt; 0) {\n      profileHTML += `\n        &lt;div class=&quot;github-profile-repos&quot;&gt;\n          &lt;p class=&quot;terminal-section-header&quot;&gt;Recent Repositories:&lt;/p&gt;\n          &lt;ul class=&quot;github-repos&quot;&gt;\n      `;\n\n      repos.forEach((repo) =&gt; {\n        profileHTML += `\n          &lt;li&gt;\n            &lt;span class=&quot;repo-name&quot;&gt;&lt;a href=&quot;${\n              repo.html_url\n            }&quot; target=&quot;_blank&quot;&gt;${repo.name}&lt;/a&gt;&lt;/span&gt;\n            ${\n              repo.language\n                ? `&lt;span class=&quot;repo-language&quot;&gt;[${repo.language}]&lt;/span&gt;`\n                : &quot;&quot;\n            }\n            ${\n              repo.description\n                ? `&lt;div class=&quot;repo-description&quot;&gt;${repo.description}&lt;/div&gt;`\n                : &quot;&quot;\n            }\n          &lt;/li&gt;\n        `;\n      });\n\n      profileHTML += `&lt;/ul&gt;&lt;/div&gt;`;\n    }\n\n    profileHTML += `&lt;/div&gt;`;\n\n    // Update the profile element with the fetched data\n    document.getElementById(&quot;github-profile&quot;).innerHTML = profileHTML;\n  } catch (error) {\n    console.error(&quot;Error fetching GitHub data:&quot;, error);\n    document.getElementById(&quot;github-profile&quot;).innerHTML =\n      &quot;Error fetching GitHub data. Please try again later.&quot;;\n  }\n}\n\nwindow.addEventListener(&quot;load&quot;, () =&gt; {\n  console.log(&quot;$ initializing terminal effects...&quot;);\n  addBlinkingCursors();\n  simulateCommandTyping();\n  console.log(&quot;$ terminal ready&quot;);\n\n  // Add this line to call the GitHub API fetch\n  fetchGitHubProfile();\n\n  // Hamburger menu functionality\n  const hamburger = document.querySelector(&quot;.hamburger-menu&quot;);\n  const navLinks = document.querySelector(&quot;.nav-links&quot;);\n\n  if (hamburger) {\n    hamburger.addEventListener(&quot;click&quot;, () =&gt; {\n      hamburger.classList.toggle(&quot;change&quot;);\n      navLinks.classList.toggle(&quot;show&quot;);\n    });\n  }\n});\n",
    "styles.css": "/* Base styles with classic terminal colors */\n:root {\n  /* Traditional terminal 16-color palette */\n  --color-black: rgb(0, 0, 0); /* Color_0 */\n  --color-light-red: rgb(255, 0, 0); /* Color_1 */\n  --color-light-green: rgb(0, 255, 0); /* Color_2 */\n  --color-yellow: rgb(255, 255, 0); /* Color_3 */\n  --color-light-blue: rgb(0, 0, 255); /* Color_4 */\n  --color-light-magenta: rgb(255, 0, 255); /* Color_5 */\n  --color-light-cyan: rgb(0, 255, 255); /* Color_6 */\n  --color-high-white: rgb(255, 255, 255); /* Color_7 */\n  --color-grey: rgb(128, 128, 128); /* Color_8 */\n  --color-red: rgb(128, 0, 0); /* Color_9 */\n  --color-green: rgb(0, 128, 0); /* Color_10 */\n  --color-brown: rgb(128, 128, 0); /* Color_11 */\n  --color-blue: rgb(0, 0, 128); /* Color_12 */\n  --color-magenta: rgb(128, 0, 128); /* Color_13 */\n  --color-cyan: rgb(0, 128, 128); /* Color_14 */\n  --color-white: rgb(192, 192, 192); /* Color_15 */\n\n  /* Theme variables mapped to terminal colors */\n  --bg-color: var(--color-black);\n  --text-color: var(--color-white);\n  --accent-color: var(--color-light-green);\n  --border-color: var(--color-grey);\n  --grid-color: rgba(255, 255, 255, 0.03);\n  --hover-color: rgba(255, 255, 255, 0.05);\n  --code-bg: rgba(128, 128, 128, 0.2);\n  --terminal-bg: var(--color-black);\n  --terminal-header-bg: var(--color-grey);\n  --terminal-prompt-color: var(--color-light-green);\n  --terminal-user-color: var(--color-light-cyan);\n  --terminal-host-color: var(--color-light-cyan);\n  --terminal-path-color: var(--color-light-blue);\n}\n\n* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n/* JetBrains Mono font import */\n@import url(&quot;https://fonts.googleapis.com/css2?family=JetBrains+Mono:wght@400;500;600;700&amp;display=swap&quot;);\n\nbody {\n  background-color: var(--bg-color);\n  color: var(--text-color);\n  line-height: 1.6;\n  max-width: 1200px;\n  margin: 0 auto;\n  padding: 0 20px;\n  font-size: 16px;\n  min-height: 100vh;\n  display: flex;\n  flex-direction: column;\n  position: relative;\n  font-family: &quot;JetBrains Mono&quot;, monospace;\n}\n\n/* Grid background - very subtle */\n.grid {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  z-index: -1;\n  background-size: 50px 50px;\n  background-image: linear-gradient(\n      to right,\n      var(--grid-color) 1px,\n      transparent 1px\n    ),\n    linear-gradient(to bottom, var(--grid-color) 1px, transparent 1px);\n}\n\n/* Typography */\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n  font-weight: 600;\n  margin-bottom: 0.5em;\n  letter-spacing: 0.5px;\n}\n\nh1 {\n  font-size: 2.5rem;\n  letter-spacing: 1px;\n  color: var(--accent-color);\n}\n\nh2 {\n  font-size: 1.75rem;\n  margin-top: 2rem;\n  color: var(--accent-color);\n}\n\np {\n  margin: 0 0 1rem;\n}\n\na {\n  color: var(--text-color);\n  text-decoration: none;\n  transition: color 0.2s;\n}\n\n.terminal-output a {\n  text-decoration: underline;\n  transition: all 0.2s ease;\n}\n\n/* Different colors for different link types */\n.terminal-output a[href^=&quot;mailto:&quot;] {\n  color: var(--color-light-cyan);\n}\n\n.terminal-output a[href*=&quot;github&quot;] {\n  color: var(--color-light-green);\n}\n\n.terminal-output a[href*=&quot;linkedin&quot;] {\n  color: var(--color-light-blue);\n}\n\n.terminal-output a[href*=&quot;twitter&quot;] {\n  color: var(--color-light-magenta);\n}\n\n/* Project and blog links */\n.project-title a,\n.post-title a {\n  color: var(--accent-color);\n  text-decoration: none;\n  border-bottom: 1px solid transparent;\n}\n\n.project-title a:hover,\n.post-title a:hover {\n  border-bottom: 1px solid var(--accent-color);\n}\n\n/* Navigation styled as terminal */\nheader {\n  padding: 1rem 0;\n}\n\nnav {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  border-bottom: 1px solid var(--border-color);\n  padding-bottom: 1rem;\n}\n\n.nav-title {\n  font-size: 1.25rem;\n  font-weight: 600;\n  letter-spacing: 1px;\n  color: var(--accent-color);\n}\n\n.nav-links {\n  display: flex;\n  list-style: none;\n  white-space: nowrap;\n}\n\n.nav-links li {\n  margin-left: 1.5rem;\n}\n\n.nav-links li.active a {\n  color: var(--accent-color);\n}\n\n/* Main content */\nmain {\n  flex: 1;\n}\n\n/* Terminal Window - Classic Linux Style */\n.terminal-window {\n  background-color: var(--terminal-bg);\n  border: 1px solid var(--border-color);\n  margin-bottom: 2rem;\n  overflow: hidden;\n  box-shadow: 0 5px 15px rgba(0, 0, 0, 0.5);\n}\n\n.terminal-header {\n  background-color: var(--color-grey);\n  padding: 5px 10px;\n  display: flex;\n  align-items: center;\n  border-bottom: 1px solid var(--border-color);\n}\n\n.terminal-buttons {\n  display: none; /* Hide macOS style buttons for classic Linux look */\n}\n\n.terminal-title {\n  flex: 1;\n  text-align: center;\n  font-size: 0.9rem;\n  opacity: 0.8;\n  color: var(--color-black);\n}\n\n.terminal-body {\n  padding: 1rem;\n  line-height: 1.6;\n  max-height: 80vh;\n  overflow-y: auto;\n  font-size: 0.95rem;\n}\n\n/* Terminal prompt - Linux style */\n.terminal-line {\n  display: flex;\n  margin-bottom: 0.5rem;\n  word-break: break-word;\n}\n\n.terminal-prompt {\n  color: var(--terminal-prompt-color);\n  margin-right: 0.5rem !important;\n  display: flex;\n  flex-shrink: 0;\n  white-space: nowrap;\n}\n\n.terminal-user {\n  color: var(--terminal-user-color);\n}\n\n.terminal-host {\n  color: var(--terminal-host-color);\n}\n\n.terminal-path {\n  color: var(--terminal-path-color);\n}\n\n.terminal-command {\n  color: var(--text-color);\n  flex: 1;\n}\n\n.terminal-output {\n  padding-left: 0;\n  margin-top: 0.5rem;\n  margin-bottom: 1rem;\n  color: var(--text-color);\n}\n.terminal-output p {\n  margin: 0;\n  line-height: 1.2;\n}\n\n.terminal-output p:not(:last-child) {\n  margin-bottom: 0.1rem;\n}\n\n/* Projects grid as output of ls command */\n.projects-grid {\n  display: flex;\n  flex-direction: column;\n  margin-top: 0.5rem;\n}\n\n.project-card {\n  margin-bottom: 1.5rem;\n  border-left: 2px solid var(--border-color);\n  padding-left: 1rem;\n}\n\n.project-title {\n  font-size: 1.2rem;\n  margin-bottom: 0.5rem;\n  color: var(--accent-color);\n}\n\n.project-tags {\n  display: flex;\n  flex-wrap: wrap;\n  margin: 0.5rem 0;\n}\n\n.project-tag {\n  font-size: 0.8rem;\n  background-color: var(--code-bg);\n  padding: 0.2rem 0.5rem;\n  margin-right: 0.5rem;\n  margin-bottom: 0.5rem;\n  border-radius: 3px;\n}\n\n/* Blog posts list as output of cat command */\n.posts-list {\n  margin-top: 0.5rem;\n}\n\n.post-item {\n  padding: 1rem 0;\n  border-bottom: 1px dashed var(--border-color);\n}\n\n.post-item:last-child {\n  border-bottom: none;\n}\n\n.post-date {\n  font-size: 0.9rem;\n  opacity: 0.7;\n  margin-bottom: 0.5rem;\n}\n\n.post-title {\n  font-size: 1.4rem;\n  margin-bottom: 0.5rem;\n  color: var(--accent-color);\n}\n\n.post-excerpt {\n  font-size: 1rem;\n  margin-bottom: 1rem;\n}\n\n/* Loading indicator */\n.loading {\n  padding: 1rem 0;\n  text-align: left;\n  font-style: italic;\n  opacity: 0.7;\n}\n\n/* SSH loading animation */\n.ssh-loading {\n  margin-bottom: 1rem;\n  font-size: 0.9rem;\n}\n\n.ssh-loading p {\n  margin-bottom: 0.3rem;\n}\n\n/* Footer */\nfooter {\n  padding: 2rem 0;\n  border-top: 1px solid var(--border-color);\n  text-align: center;\n  font-size: 0.9rem;\n  opacity: 0.7;\n}\n\n/* Blog and project detail pages */\n.blog-post,\n.project-detail {\n  max-width: 800px;\n  margin: 0 auto;\n}\n\n.blog-header,\n.project-header {\n  margin-bottom: 2rem;\n}\n\n.blog-date {\n  opacity: 0.7;\n  margin-bottom: 1rem;\n}\n\n.blog-content,\n.project-content {\n  line-height: 1.8;\n}\n\n.blog-content p,\n.project-content p {\n  margin-bottom: 1.5rem;\n}\n\n.blog-content img,\n.project-content img {\n  max-width: 100%;\n  margin: 2rem 0;\n  border: 1px solid var(--border-color);\n}\n\n/* Code blocks - Linux terminal style */\npre,\ncode {\n  background-color: var(--code-bg);\n  border-radius: 0; /* More Linux-like */\n  font-family: &quot;JetBrains Mono&quot;, monospace;\n}\n\npre {\n  padding: 1rem;\n  overflow-x: auto;\n  margin-bottom: 1.5rem;\n  border: 1px solid var(--border-color);\n}\n\ncode {\n  padding: 0.2rem 0.4rem;\n  font-size: 0.9rem;\n}\n\npre code {\n  padding: 0;\n  background-color: transparent;\n}\n\n/* Contact page */\n.contact-form {\n  max-width: 600px;\n}\n\n/* Form styling */\n.form-group {\n  margin-bottom: 1.5rem;\n  position: relative;\n}\n\n.form-label {\n  display: block;\n  margin-bottom: 0.5rem;\n  color: var(--terminal-prompt-color);\n}\n\n.form-label::before {\n  content: &quot;$&quot;;\n  color: var(--terminal-prompt-color);\n  margin-right: 0.5rem;\n}\n\n.form-input {\n  width: 100%;\n  background: var(--terminal-bg);\n  border: 1px solid var(--border-color);\n  padding: 0.8rem;\n  padding-left: calc(0.8rem + 15px);\n  color: var(--text-color);\n  font-family: &quot;JetBrains Mono&quot;, monospace;\n  font-size: 1rem;\n  position: relative;\n}\n\n.form-input::before {\n  content: &quot;&gt;&quot;;\n  position: absolute;\n  left: 0.8rem;\n  color: var(--terminal-prompt-color);\n}\n\n.form-input:focus {\n  outline: none;\n  border-color: var(--terminal-prompt-color);\n}\n\ntextarea.form-input {\n  min-height: 150px;\n  resize: vertical;\n}\n\n.button {\n  background: var(--terminal-bg);\n  border: 1px solid var(--border-color);\n  color: var(--terminal-prompt-color);\n  padding: 0.8rem 1.5rem;\n  font-family: &quot;JetBrains Mono&quot;, monospace;\n  font-size: 1rem;\n  cursor: pointer;\n}\n\n.button::before {\n  content: &quot;$ &quot;;\n  color: var(--terminal-prompt-color);\n}\n\n/* Success message styling */\n.success-message {\n  padding: 1rem;\n  background: var(--terminal-bg);\n  border: 1px solid var(--border-color);\n  color: var(--color-light-green);\n}\n\n.error-message {\n  padding: 1rem;\n  background: var(--terminal-bg);\n  border: 1px solid var(--border-color);\n  color: var(--color-light-red);\n}\n\n/* Contact page styles */\n.contact-section {\n  display: grid;\n  grid-template-columns: 1fr 2fr;\n  gap: 3rem;\n  margin-top: 2rem;\n}\n\n.contact-options {\n  display: flex;\n  flex-direction: column;\n  gap: 1.5rem;\n}\n\n.contact-option h3 {\n  margin-bottom: 0.5rem;\n  color: var(--terminal-prompt-color);\n}\n\n/* Terminal effect for links */\n.read-more {\n  font-weight: 500;\n  color: var(--color-light-cyan);\n  position: relative;\n}\n\n.read-more:hover {\n  color: var(--color-high-white);\n}\n\n/* Add a blinking cursor effect on hover */\n.read-more:hover::after {\n  content: &quot;_&quot;;\n  display: inline-block;\n  color: var(--color-high-white);\n  animation: blink 1s step-end infinite;\n  margin-left: 4px;\n}\n\n/* Blinking cursor effect for certain elements */\n.blink-cursor::after {\n  content: &quot;_&quot;;\n  animation: blink 1s step-end infinite;\n}\n\n.loading {\n  position: relative;\n}\n\n.loading::after {\n  content: &quot;&quot;;\n  display: inline-block;\n  width: 8px;\n  height: 8px;\n  margin-left: 8px;\n  border-radius: 50%;\n  background: var(--terminal-prompt-color);\n  animation: loading-pulse 1.5s infinite ease-in-out;\n}\n\n@keyframes loading-pulse {\n  0%,\n  100% {\n    opacity: 0.2;\n    transform: scale(0.8);\n  }\n  50% {\n    opacity: 0.8;\n    transform: scale(1.2);\n  }\n}\n\n@keyframes blink {\n  from,\n  to {\n    opacity: 1;\n  }\n  50% {\n    opacity: 0;\n  }\n}\n\n/* Simulated typing effect */\n.typing {\n  overflow: hidden;\n  white-space: nowrap;\n  animation: typing 3.5s steps(40, end);\n}\n\n@keyframes typing {\n  from {\n    width: 0;\n  }\n  to {\n    width: 100%;\n  }\n}\n\n/* Classic Linux Directory Colors */\n.directory {\n  color: var(--color-light-cyan); /* Light blue for directories */\n}\n\n.executable {\n  color: var(--color-light-green); /* Light green for executables */\n}\n\n.text-file {\n  color: var(--color-high-white); /* High white for text files */\n}\n\n.image-file {\n  color: var(--color-light-magenta); /* Light magenta for images */\n}\n\n.symlink {\n  color: var(--color-light-cyan); /* Light cyan for symlinks */\n}\n\n/* Default ls colors for various file types */\n.file-archive {\n  color: var(--color-red); /* Red for archives */\n}\n\n.file-media {\n  color: var(--color-light-magenta); /* Light magenta for media */\n}\n\n.file-config {\n  color: var(--color-brown); /* Brown for config files */\n}\n\n.file-temp {\n  color: var(--color-grey); /* Grey for temp files */\n}\n\n/* System files and directories */\n.system-dir {\n  color: var(--color-blue); /* Blue for system directories */\n}\n\n/* Responsive adjustments */\n@media (max-width: 768px) {\n  nav {\n    flex-direction: column;\n    align-items: flex-start;\n  }\n\n  .nav-links {\n    margin-top: 1rem;\n    flex-wrap: wrap;\n  }\n\n  .contact-section {\n    grid-template-columns: 1fr;\n    gap: 2rem;\n  }\n\n  .terminal-window {\n    max-width: 100%;\n    overflow-x: auto;\n  }\n}\n\n.tryhackme-badge {\n  margin: 0.5rem 0;\n\n  background-color: var(--terminal-bg);\n  border-radius: 3px;\n  overflow: hidden;\n  max-width: 100%;\n}\n\n/* GitHub Profile Styling */\n.github-profile {\n  font-family: &quot;JetBrains Mono&quot;, monospace;\n}\n\n.terminal-green {\n  color: var(--terminal-prompt-color);\n}\n\n.terminal-section-header {\n  color: var(--accent-color);\n  margin-top: 0.8rem;\n  margin-bottom: 0.3rem;\n}\n\n.github-repos {\n  list-style-type: none;\n  padding-left: 1rem;\n}\n\n.github-repos li {\n  margin-bottom: 0.5rem;\n}\n\n.repo-name a {\n  color: var(--color-light-cyan);\n  text-decoration: none;\n}\n\n.repo-name a:hover {\n  text-decoration: underline;\n}\n\n.repo-description {\n  color: var(--text-color);\n}\n\n.repo-language {\n  color: var(--color-light-magenta);\n  margin-left: 0.5rem;\n}\n\n/* Loading indicator styling */\n.loading {\n  position: relative;\n  color: var(--text-color);\n  opacity: 0.8;\n}\n\n.loading::after {\n  content: &quot;&quot;;\n  display: inline-block;\n  width: 8px;\n  height: 8px;\n  margin-left: 8px;\n  border-radius: 50%;\n  background: var(--terminal-prompt-color);\n  animation: loading-pulse 1.5s infinite ease-in-out;\n}\n\n#github-profile {\n  margin-top: -20px; /* Adjust this value as needed */\n}\n\n/* GitHub Profile Grid Layout */\n.github-profile-grid {\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  gap: 1.5rem;\n  margin-top: 0.5rem;\n}\n\n.github-profile-info {\n  border-right: 1px dashed var(--border-color);\n  padding-right: 1rem;\n}\n\n.github-profile-repos {\n  padding-left: 0.5rem;\n}\n\n/* Adjust repo items to fit the column */\n.github-repos li {\n  margin-bottom: 1rem;\n  padding-bottom: 0.5rem;\n  border-bottom: 1px dotted var(--border-color);\n}\n\n.github-repos li:last-child {\n  border-bottom: none;\n}\n\n.repo-description {\n  font-size: 0.85rem;\n  margin-top: 0.25rem;\n  opacity: 0.8;\n}\n\n.repo-language {\n  font-size: 0.85rem;\n  color: var(--color-light-magenta);\n  margin-left: 0.5rem;\n}\n\n/* Media query for smaller screens */\n@media (max-width: 768px) {\n  .github-profile-grid {\n    grid-template-columns: 1fr;\n    gap: 1rem;\n  }\n\n  .github-profile-info {\n    border-right: none;\n    padding-right: 0;\n    border-bottom: 1px dashed var(--border-color);\n    padding-bottom: 1rem;\n  }\n\n  .github-profile-repos {\n    padding-left: 0;\n  }\n}\n#github-profile.loading::after {\n  display: none;\n}\n\n/* Optional: You might also want to adjust the style of the loading text */\n#github-profile.loading {\n  font-style: normal;\n  opacity: 0.9;\n}\n\n.github-with-margin {\n  margin-left: 15px;\n}\n\n.demo-link {\n  text-decoration: underline;\n}\n.repo-link {\n  text-decoration: underline;\n}\n.repo-link.github-with-margin {\n  margin-left: 15px;\n}\n.project-links {\n  margin-top: 15px;\n  margin-bottom: 15px;\n}\n\n/* Add this to the end of your styles.css file */\n\n/* Interactive Terminal Styles */\n.interactive-terminal {\n  height: 500px;\n  overflow-y: auto;\n  padding-bottom: 60px; /* Space for input */\n  position: relative;\n  background-color: var(--terminal-bg);\n}\n\n/* Term Output &amp; Input Styling */\n.term-output {\n  white-space: normal;\n  word-break: break-word;\n}\n\n.term-output p {\n  margin: 0 !important;\n  padding: 0 !important;\n  line-height: 1.2 !important;\n}\n\n.term-output p:not(:last-child) {\n  margin-bottom: 2px !important;\n}\n\n.term-input-line {\n  display: flex;\n  position: relative;\n  margin-top: 10px;\n}\n\n.term-input-prompt {\n  color: var(--terminal-prompt-color);\n  display: flex;\n  margin-right: 8px;\n  white-space: nowrap;\n}\n\n.term-input {\n  background: transparent;\n  border: none;\n  color: var(--text-color);\n  font-family: &quot;JetBrains Mono&quot;, monospace;\n  font-size: 0.95rem;\n  width: 100%;\n  padding: 0;\n  outline: none;\n}\n\n.term-input:focus {\n  outline: none;\n}\n\n/* Command Syntax Highlighting */\n.command-name {\n  color: var(--color-light-green);\n}\n\n.command-param {\n  color: var(--color-light-cyan);\n}\n\n.command-flag {\n  color: var(--color-yellow);\n}\n\n.error-text {\n  color: var(--color-light-red);\n}\n\n.success-text {\n  color: var(--color-light-green);\n}\n\n/* Neofetch Output Styling */\n.neofetch-output {\n  font-family: monospace;\n  white-space: pre;\n  line-height: 1.2;\n  color: var(--text-color);\n}\n\n.neofetch-output .command-name {\n  color: var(--color-light-cyan);\n  font-weight: bold;\n}\n\n/* Section Title Styling */\n.section-title {\n  text-align: center;\n  margin-bottom: 2rem;\n}\n\n.section-title h2 {\n  margin-bottom: 0.5rem;\n}\n\n.section-title p {\n  opacity: 0.8;\n}\n\n/* Hamburger Menu Styles */\n.nav-container {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  width: 100%;\n  padding: 0.5rem 0;\n}\n\n.hamburger-menu {\n  display: none;\n  cursor: pointer;\n  z-index: 100;\n  padding: 0.5rem;\n  border: 1px solid var(--border-color);\n  background-color: var(--terminal-bg);\n}\n\n.bar1,\n.bar2,\n.bar3 {\n  width: 20px;\n  height: 2px;\n  background-color: var(--terminal-prompt-color);\n  margin: 4px 0;\n  transition: 0.3s;\n}\n\n/* Hamburger animation to terminal prompt */\n.change .bar1 {\n  transform: translate(0, 6px) rotate(-45deg);\n  background-color: var(--color-light-red);\n}\n\n.change .bar2 {\n  opacity: 0;\n}\n\n.change .bar3 {\n  transform: translate(0, -6px) rotate(45deg);\n  background-color: var(--color-light-red);\n}\n\n/* Media query for mobile devices */\n@media screen and (max-width: 768px) {\n  .hamburger-menu {\n    display: block;\n  }\n\n  nav {\n    flex-direction: column;\n    align-items: flex-start;\n    background-color: var(--terminal-bg);\n    border: 1px solid var(--border-color);\n    padding: 1rem;\n  }\n\n  .nav-links {\n    flex-direction: column;\n    width: 100%;\n    max-height: 0;\n    overflow: hidden;\n    transition: max-height 0.3s ease-out;\n    margin-top: 0;\n    background-color: var(--terminal-bg);\n  }\n\n  .nav-links.show {\n    max-height: 300px;\n    padding-top: 0.5rem;\n    border-top: 1px solid var(--border-color);\n  }\n\n  .nav-links li {\n    margin: 0.5rem 0;\n    margin-left: 0;\n    padding: 0.25rem 0;\n  }\n\n  .nav-links li a {\n    display: block;\n    padding-left: 1rem;\n  }\n\n  .nav-links li a::before {\n    content: &quot;$&quot;;\n    color: var(--terminal-prompt-color);\n    margin-right: 0.5rem;\n    font-family: &quot;JetBrains Mono&quot;, monospace;\n  }\n\n  .nav-links li:first-child {\n    margin-top: 0.5rem;\n  }\n}\n\n/* Terminal raw output */\n.raw-output {\n  font-family: monospace;\n  white-space: pre-wrap;\n  word-wrap: break-word;\n}\n\n.raw-output .md-h1,\n.raw-output .md-h2,\n.raw-output .md-h3 {\n  color: var(--color-light-cyan);\n  display: block;\n}\n\n.raw-output .md-bullet,\n.raw-output .md-list {\n  color: var(--text-color);\n  display: block;\n}\n",
    "terminal.js": "/**\n * Terminal Emulator\n * A simulated Linux environment with basic command line functionality\n */\n\ndocument.addEventListener(&quot;DOMContentLoaded&quot;, () =&gt; {\n  const terminal = new TerminalEmulator(&quot;terminal&quot;, &quot;term-input&quot;);\n  terminal.init();\n});\n\nclass TerminalEmulator {\n  constructor(terminalId, inputId) {\n    this.terminal = document.getElementById(terminalId);\n    this.input = document.getElementById(inputId);\n    this.currentDir = &quot;/&quot;;\n    this.history = [];\n    this.historyIndex = -1;\n    this.commandsRun = 0;\n    this.fileSystem = null;\n    this.aliases = {};\n    this.isInitialized = false;\n  }\n\n  /**\n   * Initialize the terminal\n   */\n  async init() {\n    // Set up event listeners\n    this.input.addEventListener(&quot;keydown&quot;, this.handleKeyDown.bind(this));\n\n    // Add click event to focus input when terminal is clicked\n    this.terminal.addEventListener(&quot;click&quot;, () =&gt; {\n      this.input.focus();\n    });\n\n    // Initialize the file system first\n    await this.initFileSystem();\n\n    // Then initialize commands\n    this.initCommands();\n\n    // Display welcome message\n    if (this.fileSystem &amp;&amp; this.fileSystem.etc &amp;&amp; this.fileSystem.etc.motd) {\n      this.write(this.fileSystem.etc.motd, &quot;success-text&quot;);\n    }\n\n    // Set focus to input\n    this.input.focus();\n\n    this.isInitialized = true;\n  }\n\n  /**\n   * Load the file system\n   */\n  async initFileSystem() {\n    try {\n      // Load the filesystem structure\n      const fsResponse = await fetch(&quot;data/filesystem.json&quot;);\n      if (!fsResponse.ok) {\n        throw new Error(`Failed to load filesystem: ${fsResponse.status}`);\n      }\n\n      this.fileSystem = await fsResponse.json();\n      await this.loadDynamicContent();\n\n      return true;\n    } catch (error) {\n      console.error(&quot;Error initializing file system:&quot;, error);\n      this.fileSystem = this.createDefaultFileSystem();\n      this.write(\n        &quot;Warning: Failed to load filesystem. Using default.&quot;,\n        &quot;error-text&quot;\n      );\n\n      return false;\n    }\n  }\n\n  /**\n   * Load dynamic content (projects and blogs)\n   */\n  async loadDynamicContent() {\n    try {\n      // First load the base filesystem\n      await this.loadProjects();\n      await this.loadBlogs();\n\n      // Then set up periodic refresh\n      this.setupRefreshInterval();\n    } catch (error) {\n      console.warn(&quot;Error loading dynamic content:&quot;, error);\n    }\n  }\n\n  setupRefreshInterval() {\n    // Check for filesystem updates every 5 minutes\n    setInterval(async () =&gt; {\n      try {\n        const response = await fetch(&quot;data/filesystem.json&quot;);\n        if (!response.ok) return;\n\n        const newFileSystem = await response.json();\n        \n        // Only update if the content has changed\n        if (JSON.stringify(newFileSystem) !== JSON.stringify(this.fileSystem)) {\n          console.log(&quot;Filesystem updated&quot;);\n          this.fileSystem = newFileSystem;\n        }\n      } catch (error) {\n        console.warn(&quot;Error refreshing filesystem:&quot;, error);\n      }\n    }, 5 * 60 * 1000); // 5 minutes\n  }\n\n  /**\n   * Load projects data\n   */\n  async loadProjects() {\n    try {\n      const projectsResponse = await fetch(&quot;data/projects.json&quot;);\n      if (!projectsResponse.ok) return;\n\n      const projectsData = await projectsResponse.json();\n\n      // Initialize projects directory if it doesn&#039;t exist\n      if (!this.fileSystem.home.user.projects) {\n        this.fileSystem.home.user.projects = {};\n      }\n\n      // Add each project to the filesystem\n      if (projectsData.projects &amp;&amp; Array.isArray(projectsData.projects)) {\n        for (const project of projectsData.projects) {\n          this.fileSystem.home.user.projects[project.id] = {\n            &quot;README.md&quot;: `# ${project.title}\\n\\n${\n              project.description\n            }\\n\\n## Tags\\n\\n${project.tags.join(&quot;, &quot;)}`,\n          };\n\n          // Try to load detailed project data\n          await this.loadProjectDetails(project.id);\n        }\n      }\n    } catch (error) {\n      console.warn(&quot;Failed to load projects:&quot;, error);\n    }\n  }\n\n  /**\n   * Load details for a specific project\n   */\n  async loadProjectDetails(projectId) {\n    try {\n      const projectDetailResponse = await fetch(\n        `data/projects/${projectId}.json`\n      );\n      if (!projectDetailResponse.ok) return;\n\n      const projectDetail = await projectDetailResponse.json();\n\n      if (projectDetail.content) {\n        // Convert HTML content to a plain text representation for the terminal\n        const textContent = this.htmlToText(projectDetail.content);\n        this.fileSystem.home.user.projects[projectId][&quot;details.txt&quot;] =\n          textContent;\n      }\n\n      // Add links file if project has links\n      if (projectDetail.github || projectDetail.live) {\n        let linksContent = &quot;# Project Links\\n\\n&quot;;\n        if (projectDetail.github)\n          linksContent += `* GitHub: ${projectDetail.github}\\n`;\n        if (projectDetail.live)\n          linksContent += `* Live Demo: ${projectDetail.live}\\n`;\n        this.fileSystem.home.user.projects[projectId][&quot;links.txt&quot;] =\n          linksContent;\n      }\n    } catch (error) {\n      console.warn(\n        `Could not load detailed data for project ${projectId}:`,\n        error\n      );\n    }\n  }\n\n  /**\n   * Load blogs data\n   */\n  async loadBlogs() {\n    try {\n      const blogsResponse = await fetch(&quot;data/blogs.json&quot;);\n      if (!blogsResponse.ok) return;\n\n      const blogsData = await blogsResponse.json();\n\n      // Initialize blogs directory if it doesn&#039;t exist\n      if (!this.fileSystem.home.user.blogs) {\n        this.fileSystem.home.user.blogs = {};\n      }\n\n      // Add each blog to the filesystem\n      if (blogsData.posts &amp;&amp; Array.isArray(blogsData.posts)) {\n        for (const blog of blogsData.posts) {\n          // Create a directory for each blog\n          this.fileSystem.home.user.blogs[blog.id] = {\n            &quot;post.md&quot;: `# ${blog.title}\\n\\nDate: ${blog.date}\\n\\n${\n              blog.excerpt || &quot;&quot;\n            }`,\n          };\n\n          // Try to load detailed blog content\n          await this.loadBlogDetails(blog.id);\n        }\n      }\n    } catch (error) {\n      console.warn(&quot;Failed to load blogs:&quot;, error);\n    }\n  }\n\n  /**\n   * Load details for a specific blog\n   */\n  async loadBlogDetails(blogId) {\n    try {\n      const blogDetailResponse = await fetch(`data/blogs/${blogId}.json`);\n      if (!blogDetailResponse.ok) return;\n\n      const blogDetail = await blogDetailResponse.json();\n\n      if (blogDetail.content) {\n        // Convert HTML content to a plain text representation for the terminal\n        const textContent = this.htmlToText(blogDetail.content);\n        this.fileSystem.home.user.blogs[blogId][&quot;full-content.md&quot;] =\n          textContent;\n      }\n    } catch (error) {\n      console.warn(`Could not load detailed data for blog ${blogId}:`, error);\n    }\n  }\n\n  /**\n   * Convert HTML content to plain text for terminal display\n   */\n  htmlToText(html) {\n    // Create a temporary div to hold the HTML\n    const tempDiv = document.createElement(&quot;div&quot;);\n    tempDiv.innerHTML = html;\n\n    // Process headers\n    const headers = tempDiv.querySelectorAll(&quot;h1, h2, h3, h4, h5, h6&quot;);\n    headers.forEach((header) =&gt; {\n      const level = parseInt(header.tagName.charAt(1));\n      const prefix = &quot;#&quot;.repeat(level) + &quot; &quot;;\n      header.textContent = prefix + header.textContent + &quot;\\n&quot;;\n    });\n\n    // Process links\n    const links = tempDiv.querySelectorAll(&quot;a&quot;);\n    links.forEach((link) =&gt; {\n      link.textContent = `${link.textContent} [${link.href}]`;\n    });\n\n    // Process lists\n    const listItems = tempDiv.querySelectorAll(&quot;li&quot;);\n    listItems.forEach((item) =&gt; {\n      item.textContent = &quot;* &quot; + item.textContent;\n    });\n\n    // Extract text and preserve some line breaks\n    return tempDiv.textContent\n      .replace(/&lt;br\\s*\\/?&gt;/gi, &quot;\\n&quot;)\n      .replace(/&lt;\\/p&gt;/gi, &quot;\\n\\n&quot;)\n      .replace(/&lt;\\/div&gt;/gi, &quot;\\n&quot;)\n      .replace(/&lt;\\/li&gt;/gi, &quot;\\n&quot;);\n  }\n\n  /**\n   * Create a default file system structure if JSON fails to load\n   */\n  createDefaultFileSystem() {\n    return {\n      home: {\n        user: {\n          documents: {\n            &quot;about.txt&quot;:\n              &quot;This is a simulated Linux terminal environment.\\nYou can explore the file system using common commands.&quot;,\n            &quot;help.txt&quot;:\n              &quot;Available commands: ls, cd, pwd, cat, echo, help, clear, find, grep, head, tail&quot;,\n          },\n          projects: {},\n          blogs: {},\n          &quot;README.md&quot;:\n            &quot;Welcome to the portfolio terminal.\\nUse `ls` to list files and directories.\\nUse `help` to see available commands.&quot;,\n        },\n      },\n      bin: {\n        ls: &quot;executable&quot;,\n        cd: &quot;executable&quot;,\n        pwd: &quot;executable&quot;,\n        cat: &quot;executable&quot;,\n        echo: &quot;executable&quot;,\n        clear: &quot;executable&quot;,\n        help: &quot;executable&quot;,\n        find: &quot;executable&quot;,\n        grep: &quot;executable&quot;,\n        head: &quot;executable&quot;,\n        tail: &quot;executable&quot;,\n      },\n      usr: {\n        share: {\n          doc: {\n            examples: {\n              &quot;hello.txt&quot;: &quot;Hello, World!&quot;,\n            },\n          },\n        },\n      },\n      etc: {\n        motd: &quot;Welcome to the Portfolio Terminal!\\nType &#039;help&#039; to see available commands.\\n\\nThis terminal emulator allows you to explore the portfolio using Linux-style commands.&quot;,\n      },\n    };\n  }\n\n  /**\n   * Initialize command bindings\n   */\n  initCommands() {\n    this.commands = {\n      neofetch: this.cmdNeofetch.bind(this),\n      theme: this.cmdTheme.bind(this),\n      history: this.cmdHistory.bind(this),\n      alias: this.cmdAlias.bind(this),\n      ls: this.cmdLs.bind(this),\n      cd: this.cmdCd.bind(this),\n      pwd: this.cmdPwd.bind(this),\n      cat: this.cmdCat.bind(this),\n      echo: this.cmdEcho.bind(this),\n      clear: this.cmdClear.bind(this),\n      help: this.cmdHelp.bind(this),\n      find: this.cmdFind.bind(this),\n      grep: this.cmdGrep.bind(this),\n      head: this.cmdHead.bind(this),\n      tail: this.cmdTail.bind(this),\n    };\n  }\n\n  /**\n   * Handle keyboard input\n   */\n  handleKeyDown(event) {\n    if (!this.isInitialized) return;\n\n    switch (event.key) {\n      case &quot;Enter&quot;:\n        // Process command\n        const command = this.input.value.trim();\n        this.processCommand(command);\n\n        // Reset input\n        this.input.value = &quot;&quot;;\n        event.preventDefault();\n        break;\n\n      case &quot;ArrowUp&quot;:\n        // Navigate command history (previous)\n        if (\n          this.history.length &gt; 0 &amp;&amp;\n          this.historyIndex &lt; this.history.length - 1\n        ) {\n          this.historyIndex++;\n          this.input.value = this.history[this.historyIndex];\n\n          // Move cursor to end of input\n          setTimeout(() =&gt; {\n            this.input.selectionStart = this.input.selectionEnd =\n              this.input.value.length;\n          }, 0);\n        }\n        event.preventDefault();\n        break;\n\n      case &quot;ArrowDown&quot;:\n        // Navigate command history (next)\n        if (this.historyIndex &gt; 0) {\n          this.historyIndex--;\n          this.input.value = this.history[this.historyIndex];\n        } else if (this.historyIndex === 0) {\n          this.historyIndex = -1;\n          this.input.value = &quot;&quot;;\n        }\n        event.preventDefault();\n        break;\n\n      case &quot;Tab&quot;:\n        // Tab completion\n        event.preventDefault();\n        this.tabComplete();\n        break;\n\n      default:\n        // Regular key press - no special handling\n        break;\n    }\n  }\n\n  /**\n   * Handle tab completion\n   */\n  tabComplete() {\n    const commandText = this.input.value.trim();\n    if (!commandText) return; // No autocomplete on empty input\n\n    const parts = this.parseCommand(commandText);\n    const cmd = parts.command;\n    const args = parts.args;\n\n    // Command completion (if no args or space at the end)\n    if (!args.length &amp;&amp; !commandText.endsWith(&quot; &quot;)) {\n      this.completeCommand(cmd);\n      return;\n    }\n\n    // Flag completion for commands\n    if (\n      args.length &gt; 0 &amp;&amp;\n      args[args.length - 1].startsWith(&quot;-&quot;) &amp;&amp;\n      !args[args.length - 1].includes(&quot; &quot;)\n    ) {\n      this.completeFlag(cmd, args);\n      return;\n    }\n\n    // Path completion\n    if (cmd === &quot;cd&quot; || cmd === &quot;cat&quot; || cmd === &quot;ls&quot; || cmd === &quot;find&quot;) {\n      this.completePath(cmd, args);\n    }\n  }\n\n  /**\n   * Complete a command name\n   */\n  completeCommand(cmd) {\n    const availableCommands = Object.keys(this.commands);\n    const matchingCommands = availableCommands.filter((c) =&gt; c.startsWith(cmd));\n\n    if (matchingCommands.length === 1) {\n      this.input.value = `${matchingCommands[0]} `;\n    } else if (matchingCommands.length &gt; 1) {\n      // Show possible completions with descriptions\n      this.write(this.getPrompt() + &quot; &quot; + cmd, &quot;term-command&quot;);\n\n      const commandDescriptions = {\n        neofetch: &quot;Display system information with ASCII art&quot;,\n        ls: &quot;List directory contents&quot;,\n        cd: &quot;Change the current directory&quot;,\n        pwd: &quot;Print current directory&quot;,\n        cat: &quot;Concatenate and display file contents&quot;,\n        echo: &quot;Display a line of text&quot;,\n        clear: &quot;Clear the terminal screen&quot;,\n        help: &quot;Display this help message&quot;,\n        find: &quot;Search for files in a directory hierarchy&quot;,\n        grep: &quot;Search for patterns in files&quot;,\n        head: &quot;Display first lines of a file&quot;,\n        tail: &quot;Display last lines of a file&quot;,\n        theme: &quot;Change terminal color theme&quot;,\n        history: &quot;Display command history&quot;,\n        alias: &quot;Define or display aliases for commands&quot;,\n      };\n\n      const formattedCommands = matchingCommands.map(\n        (cmd) =&gt;\n          `&lt;span class=&quot;command-name&quot;&gt;${cmd}&lt;/span&gt; - ${\n            commandDescriptions[cmd] || &quot;No description&quot;\n          }`\n      );\n\n      this.write(formattedCommands.join(&quot;\\n&quot;));\n    }\n  }\n\n  /**\n   * Complete a flag for a command\n   */\n  completeFlag(cmd, args) {\n    const commandFlags = {\n      ls: {\n        &quot;-a&quot;: &quot;Show all files (including hidden)&quot;,\n        &quot;-l&quot;: &quot;Use a long listing format&quot;,\n        &quot;-la&quot;: &quot;Long format, show all files&quot;,\n        &quot;--all&quot;: &quot;Show all files (including hidden)&quot;,\n      },\n      find: {\n        &quot;-name&quot;: &quot;Pattern to match files&quot;,\n        &quot;-type&quot;: &quot;Type of file (f for files, d for directories)&quot;,\n      },\n      grep: {\n        &quot;-i&quot;: &quot;Ignore case distinctions&quot;,\n        &quot;-v&quot;: &quot;Select non-matching lines&quot;,\n        &quot;-n&quot;: &quot;Print line number with output lines&quot;,\n      },\n      head: {\n        &quot;-n&quot;: &quot;Print the first n lines&quot;,\n      },\n      tail: {\n        &quot;-n&quot;: &quot;Print the last n lines&quot;,\n      },\n    };\n\n    const currentFlag = args[args.length - 1];\n    if (commandFlags[cmd]) {\n      const matchingFlags = Object.keys(commandFlags[cmd]).filter((flag) =&gt;\n        flag.startsWith(currentFlag)\n      );\n\n      if (matchingFlags.length === 1) {\n        // Replace the current flag with the completed one\n        args[args.length - 1] = matchingFlags[0];\n        this.input.value = `${cmd} ${args.join(&quot; &quot;)} `;\n      } else if (matchingFlags.length &gt; 1) {\n        // Show possible flag completions with descriptions\n        this.write(\n          this.getPrompt() + &quot; &quot; + this.input.value.trim(),\n          &quot;term-command&quot;\n        );\n\n        const formattedFlags = matchingFlags.map(\n          (flag) =&gt;\n            `&lt;span class=&quot;command-flag&quot;&gt;${flag}&lt;/span&gt; - ${commandFlags[cmd][flag]}`\n        );\n\n        this.write(formattedFlags.join(&quot;\\n&quot;));\n      }\n    }\n  }\n\n  /**\n   * Complete a file/directory path\n   */\n  completePath(cmd, args) {\n    const lastArg = args.length &gt; 0 ? args[args.length - 1] : &quot;&quot;;\n    const directoryPath = this.getParentDir(lastArg || &quot;.&quot;);\n    const dirObj = this.getFileSystemObject(directoryPath);\n\n    if (!dirObj || typeof dirObj !== &quot;object&quot;) return;\n\n    // Get basename for matching\n    const basename = this.getFileName(lastArg);\n    const matchingItems = Object.keys(dirObj).filter((item) =&gt;\n      item.startsWith(basename)\n    );\n\n    if (matchingItems.length === 1) {\n      // Single match - autocomplete\n      const completePath = lastArg.includes(&quot;/&quot;)\n        ? lastArg.substring(0, lastArg.lastIndexOf(&quot;/&quot;) + 1) + matchingItems[0]\n        : matchingItems[0];\n\n      // Check if it&#039;s a directory, add trailing slash\n      if (typeof dirObj[matchingItems[0]] === &quot;object&quot;) {\n        this.input.value = `${cmd} ${completePath}/`;\n      } else {\n        this.input.value = `${cmd} ${completePath}`;\n      }\n    } else if (matchingItems.length &gt; 1) {\n      // Multiple matches - show options\n      this.write(\n        this.getPrompt() + &quot; &quot; + this.input.value.trim(),\n        &quot;term-command&quot;\n      );\n\n      // Format the output to show directories and files differently\n      const formattedItems = matchingItems.map((item) =&gt; {\n        if (typeof dirObj[item] === &quot;object&quot;) {\n          return `&lt;span class=&quot;directory&quot;&gt;${item}/&lt;/span&gt;`;\n        } else if (item.endsWith(&quot;.md&quot;) || item.endsWith(&quot;.txt&quot;)) {\n          return `&lt;span class=&quot;text-file&quot;&gt;${item}&lt;/span&gt;`;\n        } else if (item.endsWith(&quot;.exe&quot;) || item.endsWith(&quot;.sh&quot;)) {\n          return `&lt;span class=&quot;executable&quot;&gt;${item}&lt;/span&gt;`;\n        } else {\n          return item;\n        }\n      });\n\n      this.write(formattedItems.join(&quot;  &quot;));\n    }\n  }\n\n  /**\n   * Process a command\n   */\n  processCommand(command) {\n    if (command.trim() === &quot;&quot;) return;\n\n    // Handle command chaining with &amp;&amp;\n    if (command.includes(&quot;&amp;&amp;&quot;)) {\n      const commands = command\n        .split(&quot;&amp;&amp;&quot;)\n        .map((cmd) =&gt; cmd.trim())\n        .filter((cmd) =&gt; cmd);\n\n      // Add the full command to history\n      this.history.unshift(command);\n      this.historyIndex = -1;\n      this.commandsRun++;\n\n      // Display the full command\n      this.write(this.getPrompt() + &quot; &quot; + command, &quot;term-command&quot;);\n\n      // Execute each command in sequence\n      for (const cmd of commands) {\n        // Skip displaying the prompt for subsequent commands\n        if (cmd !== commands[0]) {\n          this.write(`Executing: ${cmd}`, &quot;term-info&quot;);\n        }\n\n        // Process each command individually\n        const parts = this.parseCommand(cmd);\n        const cmdName = parts.command;\n        const args = parts.args;\n\n        // Execute command\n        this.executeCommand(cmdName, args);\n      }\n\n      // Add a new input line and exit early\n      this.createNewInputLine();\n      return;\n    }\n\n    // Add command to history\n    this.history.unshift(command);\n    this.historyIndex = -1;\n    this.commandsRun++;\n\n    // Display command\n    this.write(this.getPrompt() + &quot; &quot; + command, &quot;term-command&quot;);\n\n    // Handle special case: !! (repeat last command)\n    if (command === &quot;!!&quot;) {\n      if (this.history.length &gt; 1) {\n        command = this.history[1]; // Get the previous command\n        this.write(`Executing: ${command}`, &quot;term-info&quot;);\n      } else {\n        this.write(&quot;No previous command to execute&quot;, &quot;error-text&quot;);\n        return;\n      }\n    }\n\n    // Parse command\n    const parts = this.parseCommand(command);\n    const cmd = parts.command;\n    const args = parts.args;\n\n    // Execute the command\n    this.executeCommand(cmd, args);\n\n    // Add a new input line\n    this.createNewInputLine();\n  }\n\n  /**\n   * Strip HTML tags from text\n   * @param {string} html - Text with HTML tags\n   * @returns {string} - Plain text\n   */\n  stripHtml(html) {\n    const temp = document.createElement(&quot;div&quot;);\n    temp.innerHTML = html;\n    return temp.textContent || temp.innerText || &quot;&quot;;\n  }\n\n  /**\n   * Execute a specific command with its arguments\n   */\n  executeCommand(cmd, args) {\n    // Check for aliases\n    if (this.aliases[cmd]) {\n      // Replace the command with its alias\n      const aliasedCommand = this.aliases[cmd];\n      const aliasedParts = this.parseCommand(aliasedCommand);\n\n      // If the alias contains arguments, merge them with the provided args\n      const aliasedArgs = aliasedParts.args.concat(args);\n\n      // Execute the aliased command\n      if (aliasedParts.command in this.commands) {\n        this.commands[aliasedParts.command](aliasedArgs);\n      } else {\n        this.write(`command not found: ${aliasedParts.command}`, &quot;error-text&quot;);\n      }\n    } else if (cmd in this.commands) {\n      // Execute regular command\n      this.commands[cmd](args);\n    } else if (cmd) {\n      this.write(`command not found: ${cmd}`, &quot;error-text&quot;);\n    }\n  }\n\n  /**\n   * Parse a command string into command and arguments\n   */\n  parseCommand(commandStr) {\n    const parts = [];\n    let current = &quot;&quot;;\n    let inQuotes = false;\n    let quoteChar = &quot;&quot;;\n\n    for (let i = 0; i &lt; commandStr.length; i++) {\n      const char = commandStr[i];\n\n      if ((char === &#039;&quot;&#039; || char === &quot;&#039;&quot;) &amp;&amp; (!inQuotes || quoteChar === char)) {\n        inQuotes = !inQuotes;\n        if (inQuotes) quoteChar = char;\n        else quoteChar = &quot;&quot;;\n      } else if (char === &quot; &quot; &amp;&amp; !inQuotes) {\n        if (current) {\n          parts.push(current);\n          current = &quot;&quot;;\n        }\n      } else {\n        current += char;\n      }\n    }\n\n    if (current) parts.push(current);\n\n    return {\n      command: parts[0],\n      args: parts.slice(1),\n    };\n  }\n\n  /**\n   * Get the command prompt string\n   */\n  getPrompt() {\n    const pathDisplay = this.currentDir === &quot;/&quot; ? &quot;/portfolio&quot; : &quot;/portfolio&quot; + this.currentDir;\n    return `&lt;span class=&quot;terminal-user&quot;&gt;user&lt;/span&gt;@&lt;span class=&quot;terminal-host&quot;&gt;portfolio&lt;/span&gt;:&lt;span class=&quot;terminal-path&quot;&gt;${pathDisplay}&lt;/span&gt;$`;\n  }\n\n  /**\n   * Write output to the terminal\n   */\n  write(text, className = &quot;&quot;) {\n    const output = document.createElement(&quot;div&quot;);\n    output.className = &quot;term-output&quot;;\n    if (className) output.classList.add(className);\n    output.innerHTML = text;\n\n    // Insert before the current input line\n    const inputLine = this.terminal.querySelector(&quot;.term-input-line&quot;);\n    this.terminal.insertBefore(output, inputLine);\n\n    // Scroll to bottom\n    this.terminal.scrollTop = this.terminal.scrollHeight;\n  }\n\n  /**\n   * Create a new input line\n   */\n  createNewInputLine() {\n    // Remove current input line\n    const currentInputLine = this.terminal.querySelector(&quot;.term-input-line&quot;);\n    if (currentInputLine) {\n      currentInputLine.remove();\n    }\n\n    // Create new input line\n    const newInputLine = document.createElement(&quot;div&quot;);\n    newInputLine.className = &quot;term-input-line&quot;;\n    newInputLine.innerHTML = `\n      &lt;div class=&quot;term-input-prompt&quot;&gt;\n        ${this.getPrompt()}\n      &lt;/div&gt;\n    `;\n\n    // Create new input element\n    const newInput = document.createElement(&quot;input&quot;);\n    newInput.type = &quot;text&quot;;\n    newInput.className = &quot;term-input&quot;;\n    newInput.id = &quot;term-input&quot;;\n    newInput.spellcheck = false;\n    newInput.autocomplete = &quot;off&quot;;\n\n    // Add event listeners\n    newInput.addEventListener(&quot;keydown&quot;, this.handleKeyDown.bind(this));\n\n    // Append to input line\n    newInputLine.appendChild(newInput);\n\n    // Append to terminal\n    this.terminal.appendChild(newInputLine);\n\n    // Update input reference\n    this.input = newInput;\n\n    // Focus input\n    this.input.focus();\n\n    // Scroll to bottom\n    this.terminal.scrollTop = this.terminal.scrollHeight;\n  }\n\n  /**\n   * Resolve a path (handling relative paths, .., etc.)\n   */\n  resolvePath(path) {\n    if (!path) return this.currentDir;\n\n    // Handle absolute paths\n    if (path.startsWith(&quot;/&quot;)) {\n      // This is already an absolute path\n      return this.normalizePath(path);\n    }\n\n    // Handle home shortcut\n    if (path === &quot;~&quot; || path.startsWith(&quot;~/&quot;)) {\n      return this.normalizePath(path.replace(&quot;~&quot;, &quot;/home/user&quot;));\n    }\n\n    // Handle relative paths\n    return this.normalizePath(`${this.currentDir}/${path}`);\n  }\n\n  /**\n   * Normalize a path (handle . and ..)\n   */\n  normalizePath(path) {\n    // Split path into segments\n    const segments = path.split(&quot;/&quot;).filter((segment) =&gt; segment !== &quot;&quot;);\n    const result = [];\n\n    // Process each segment\n    for (const segment of segments) {\n      if (segment === &quot;.&quot;) {\n        // Current directory, do nothing\n      } else if (segment === &quot;..&quot;) {\n        // Parent directory, remove last segment\n        if (result.length &gt; 0) result.pop();\n      } else {\n        // Regular segment, add to result\n        result.push(segment);\n      }\n    }\n\n    // Construct normalized path\n    return &quot;/&quot; + result.join(&quot;/&quot;);\n  }\n\n  /**\n   * Get an object from the file system based on path\n   */\n  getFileSystemObject(path) {\n    const normalizedPath = this.resolvePath(path);\n    const segments = normalizedPath\n      .split(&quot;/&quot;)\n      .filter((segment) =&gt; segment !== &quot;&quot;);\n\n    let current = this.fileSystem;\n\n    // Navigate through file system\n    for (const segment of segments) {\n      if (!current || typeof current !== &quot;object&quot; || !(segment in current)) {\n        return null;\n      }\n\n      current = current[segment];\n    }\n\n    return current;\n  }\n\n  /**\n   * Check if a path exists and is a directory\n   */\n  isDirectory(path) {\n    const obj = this.getFileSystemObject(path);\n    return obj !== null &amp;&amp; typeof obj === &quot;object&quot;;\n  }\n\n  /**\n   * Check if a path exists and is a file\n   */\n  isFile(path) {\n    const obj = this.getFileSystemObject(path);\n    return obj !== null &amp;&amp; typeof obj !== &quot;object&quot;;\n  }\n\n  /**\n   * Get parent directory of a path\n   */\n  getParentDir(path) {\n    const normalizedPath = this.resolvePath(path);\n    const segments = normalizedPath\n      .split(&quot;/&quot;)\n      .filter((segment) =&gt; segment !== &quot;&quot;);\n\n    if (segments.length === 0) return &quot;/&quot;;\n\n    segments.pop();\n    return &quot;/&quot; + segments.join(&quot;/&quot;);\n  }\n\n  /**\n   * Get filename from a path\n   */\n  getFileName(path) {\n    const normalizedPath = this.resolvePath(path);\n    const segments = normalizedPath\n      .split(&quot;/&quot;)\n      .filter((segment) =&gt; segment !== &quot;&quot;);\n\n    if (segments.length === 0) return &quot;&quot;;\n\n    return segments[segments.length - 1];\n  }\n\n  /* ==== COMMAND IMPLEMENTATIONS ==== */\n\n  /**\n   * List directory contents\n   */\n  cmdLs(args) {\n    // Parse arguments\n    let path = &quot;.&quot;;\n    let showHidden = false;\n    let showDetails = false;\n\n    for (const arg of args) {\n      if (arg === &quot;-a&quot; || arg === &quot;--all&quot;) {\n        showHidden = true;\n      } else if (arg === &quot;-l&quot;) {\n        showDetails = true;\n      } else if (arg === &quot;-la&quot; || arg === &quot;-al&quot;) {\n        showHidden = true;\n        showDetails = true;\n      } else if (!arg.startsWith(&quot;-&quot;)) {\n        path = arg;\n      }\n    }\n\n    const targetPath = this.resolvePath(path);\n    const obj = this.getFileSystemObject(targetPath);\n\n    if (!obj || typeof obj !== &quot;object&quot;) {\n      this.write(\n        `ls: cannot access &#039;${path}&#039;: No such file or directory`,\n        &quot;error-text&quot;\n      );\n      return;\n    }\n\n    let output = &quot;&quot;;\n\n    if (showDetails) {\n      // Format similar to ls -l\n      output += &quot;total &quot; + Object.keys(obj).length + &quot;\\n&quot;;\n\n      // Get all visible items first\n      const items = Object.entries(obj)\n        .filter(([name]) =&gt; showHidden || !name.startsWith(&quot;.&quot;))\n        .map(([name, content]) =&gt; {\n          const isDir = typeof content === &quot;object&quot;;\n          return {\n            name,\n            isDir,\n            permissions: isDir ? &quot;drwxr-xr-x&quot; : &quot;-rw-r--r--&quot;,\n            size: isDir ? 4096 : (typeof content === &quot;string&quot; ? content.length : 0),\n            date: new Date().toLocaleString(&quot;default&quot;, {\n              month: &quot;short&quot;,\n              day: &quot;2-digit&quot;,\n              hour: &quot;2-digit&quot;,\n              minute: &quot;2-digit&quot;\n            })\n          };\n        });\n\n      // Find the longest size for padding\n      const maxSizeLength = Math.max(...items.map(item =&gt; item.size.toString().length));\n\n      // Output each item\n      for (const item of items) {\n        output += `${item.permissions} 1 user portfolio ${item.size.toString().padStart(maxSizeLength)} ${item.date} `;\n        \n        if (item.isDir) {\n          output += `&lt;span class=&quot;directory&quot;&gt;${item.name}/&lt;/span&gt;`;\n        } else if (item.name.endsWith(&quot;.md&quot;) || item.name.endsWith(&quot;.txt&quot;)) {\n          output += `&lt;span class=&quot;text-file&quot;&gt;${item.name}&lt;/span&gt;`;\n        } else if (item.name.endsWith(&quot;.exe&quot;) || item.name.endsWith(&quot;.sh&quot;)) {\n          output += `&lt;span class=&quot;executable&quot;&gt;${item.name}&lt;/span&gt;`;\n        } else {\n          output += item.name;\n        }\n        output += &quot;\\n&quot;;\n      }\n    } else {\n      // Get all visible items first\n      const items = Object.entries(obj)\n        .filter(([name]) =&gt; showHidden || !name.startsWith(&quot;.&quot;))\n        .map(([name, content]) =&gt; {\n          const isDir = typeof content === &quot;object&quot;;\n          let displayName = name + (isDir ? &quot;/&quot; : &quot;&quot;);\n          \n          if (isDir) {\n            return `&lt;span class=&quot;directory&quot;&gt;${displayName}&lt;/span&gt;`;\n          } else if (name.endsWith(&quot;.md&quot;) || name.endsWith(&quot;.txt&quot;)) {\n            return `&lt;span class=&quot;text-file&quot;&gt;${displayName}&lt;/span&gt;`;\n          } else if (name.endsWith(&quot;.exe&quot;) || name.endsWith(&quot;.sh&quot;)) {\n            return `&lt;span class=&quot;executable&quot;&gt;${displayName}&lt;/span&gt;`;\n          } else {\n            return displayName;\n          }\n        });\n\n      // Calculate number of columns based on longest item\n      const maxLength = Math.max(...items.map(item =&gt; item.replace(/&lt;[^&gt;]+&gt;/g, &quot;&quot;).length)) + 2;\n      const terminalWidth = 80;\n      const columns = Math.floor(terminalWidth / maxLength);\n      \n      // Organize items into rows\n      const rows = [];\n      for (let i = 0; i &lt; items.length; i += columns) {\n        const row = items.slice(i, i + columns).map(item =&gt; {\n          // Remove HTML tags for length calculation\n          const plainItem = item.replace(/&lt;[^&gt;]+&gt;/g, &quot;&quot;);\n          return item + &quot; &quot;.repeat(maxLength - plainItem.length);\n        });\n        rows.push(row.join(&quot;&quot;));\n      }\n      \n      output = rows.join(&quot;\\n&quot;);\n    }\n\n    this.write(output || &quot;Directory is empty&quot;);\n  }\n\n  /**\n   * Change directory\n   */\n  cmdCd(args) {\n    if (args.length === 0 || args[0] === &quot;~&quot;) {\n      // cd to home directory\n      this.currentDir = &quot;/home/user&quot;;\n      return;\n    }\n\n    const targetPath = this.resolvePath(args[0]);\n\n    if (this.isDirectory(targetPath)) {\n      this.currentDir = targetPath;\n    } else {\n      this.write(`cd: ${args[0]}: Not a directory`, &quot;error-text&quot;);\n    }\n  }\n\n  /**\n   * Print working directory\n   */\n  cmdPwd(args) {\n    this.write(this.currentDir);\n  }\n\n  /**\n   * Concatenate and display file contents\n   */\n  cmdCat(args) {\n    if (args.length === 0) {\n      this.write(&quot;Usage: cat [file...]&quot;, &quot;term-info&quot;);\n      return;\n    }\n\n    for (const arg of args) {\n      const targetPath = this.resolvePath(arg);\n      const obj = this.getFileSystemObject(targetPath);\n\n      if (obj === null) {\n        this.write(`cat: ${arg}: No such file or directory`, &quot;error-text&quot;);\n      } else if (typeof obj === &quot;object&quot;) {\n        this.write(`cat: ${arg}: Is a directory`, &quot;error-text&quot;);\n      } else {\n        // Escape HTML content to show raw file contents\n        const content = obj.toString();\n        const escapedContent = content\n          .replace(/&amp;/g, &quot;&amp;amp;&quot;)\n          .replace(/&lt;/g, &quot;&amp;lt;&quot;)\n          .replace(/&gt;/g, &quot;&amp;gt;&quot;)\n          .replace(/&quot;/g, &quot;&amp;quot;&quot;)\n          .replace(/&#039;/g, &quot;&amp;#039;&quot;);\n\n        // For markdown files, still add some basic formatting but keep HTML escaped\n        if (arg.endsWith(&quot;.md&quot;)) {\n          let formattedContent = escapedContent\n            .replace(/^# (.+)$/gm, &quot;&lt;span class=\\&quot;md-h1\\&quot;&gt;# $1&lt;/span&gt;&quot;)\n            .replace(/^## (.+)$/gm, &quot;&lt;span class=\\&quot;md-h2\\&quot;&gt;## $1&lt;/span&gt;&quot;)\n            .replace(/^### (.+)$/gm, &quot;&lt;span class=\\&quot;md-h3\\&quot;&gt;### $1&lt;/span&gt;&quot;)\n            .replace(/^- (.+)$/gm, &quot;&lt;span class=\\&quot;md-bullet\\&quot;&gt;- $1&lt;/span&gt;&quot;)\n            .replace(/^(\\d+)\\. (.+)$/gm, &quot;&lt;span class=\\&quot;md-list\\&quot;&gt;$1. $2&lt;/span&gt;&quot;);\n          this.write(formattedContent, &quot;raw-output&quot;);\n        } else {\n          this.write(escapedContent, &quot;raw-output&quot;);\n        }\n      }\n    }\n  }\n\n  /**\n   * Echo text to terminal\n   */\n  cmdEcho(args) {\n    // Handle special variables\n    const text = args\n      .join(&quot; &quot;)\n      .replace(/\\$PWD/g, this.currentDir)\n      .replace(/\\$HOME/g, &quot;/home/user&quot;)\n      .replace(/\\$USER/g, &quot;user&quot;)\n      .replace(/\\$HOSTNAME/g, &quot;portfolio&quot;);\n    this.write(text);\n  }\n\n  /**\n   * Clear the terminal\n   */\n  cmdClear(args) {\n    // Clear all output\n    const outputElements = this.terminal.querySelectorAll(&quot;.term-output&quot;);\n    outputElements.forEach((el) =&gt; el.remove());\n\n    // Create new input line\n    this.createNewInputLine();\n  }\n\n  /**\n   * Display help information\n   */\n  cmdHelp(args) {\n    const commandHelp = {\n      neofetch: &quot;Display system information with ASCII art and color blocks&quot;,\n      theme:\n        &quot;Change terminal color theme (dracula, monokai, nord, solarized-dark)&quot;,\n      history: &quot;Display command history with -n option to limit entries&quot;,\n      alias: &quot;Define or display aliases for commands&quot;,\n      ls: &quot;List directory contents (-a for hidden files, -l for long format)&quot;,\n      cd: &quot;Change the current directory&quot;,\n      pwd: &quot;Print current working directory&quot;,\n      cat: &quot;Concatenate and display file contents&quot;,\n      echo: &quot;Display a line of text (supports $PWD, $HOME, $USER variables)&quot;,\n      clear: &quot;Clear the terminal screen&quot;,\n      help: &quot;Display this help message&quot;,\n      find: &quot;Search for files in a directory hierarchy (-name pattern, -type f|d)&quot;,\n      grep: &quot;Search for patterns in files (supports regex patterns)&quot;,\n      head: &quot;Display first lines of a file (-n to specify number of lines)&quot;,\n      tail: &quot;Display last lines of a file (-n to specify number of lines)&quot;,\n    };\n\n    if (args.length &gt; 0) {\n      const cmd = args[0];\n      if (cmd in commandHelp) {\n        this.write(\n          `&lt;span class=&quot;command-name&quot;&gt;${cmd}&lt;/span&gt;: ${commandHelp[cmd]}`\n        );\n      } else {\n        this.write(`No help available for &#039;${cmd}&#039;`, &quot;error-text&quot;);\n      }\n    } else {\n      // For the general help command with no args, ensure we properly format the output\n      // with explicit div elements to force proper line breaks\n      let output = &quot;&lt;div&gt;Available commands:&lt;/div&gt;&lt;div&gt;&amp;nbsp;&lt;/div&gt;&quot;;\n\n      // Create a div for each command to ensure proper line breaks\n      for (const cmd in commandHelp) {\n        output += `&lt;div&gt;&lt;span class=&quot;command-name&quot;&gt;${cmd}&lt;/span&gt; - ${commandHelp[cmd]}&lt;/div&gt;`;\n      }\n\n      // Add special features section with explicit line breaks\n      output += &quot;&lt;div&gt;&amp;nbsp;&lt;/div&gt;&lt;div&gt;Special features:&lt;/div&gt;&quot;;\n      output +=\n        &#039;&lt;div&gt;• &lt;span class=&quot;command-name&quot;&gt;!!&lt;/span&gt; - Repeat the last command&lt;/div&gt;&#039;;\n      output +=\n        &#039;&lt;div&gt;• &lt;span class=&quot;command-name&quot;&gt;Tab&lt;/span&gt; - Auto-complete commands, flags, and paths&lt;/div&gt;&#039;;\n      output +=\n        &#039;&lt;div&gt;• &lt;span class=&quot;command-name&quot;&gt;Arrow Up/Down&lt;/span&gt; - Navigate command history&lt;/div&gt;&#039;;\n      output +=\n        &quot;&lt;div&gt;• Command aliases can be defined with &lt;span class=\\&quot;command-name\\&quot;&gt;alias name=&#039;command&#039;&lt;/span&gt;&lt;/div&gt;&quot;;\n      output +=\n        &#039;&lt;div&gt;• Multiple themes available with &lt;span class=&quot;command-name&quot;&gt;theme&lt;/span&gt; command&lt;/div&gt;&#039;;\n      output +=\n        &#039;&lt;div&gt;&amp;nbsp;&lt;/div&gt;&lt;div&gt;Use &lt;span class=&quot;command-name&quot;&gt;help [command]&lt;/span&gt; for more information about a specific command.&lt;/div&gt;&#039;;\n\n      this.write(output);\n    }\n  }\n\n  cmdFind(args) {\n    if (args.length === 0) {\n      this.write(&quot;Usage: find [path] [expression]&quot;, &quot;term-info&quot;);\n      this.write(&#039;Example: find . -name &quot;*.txt&quot;&#039;, &quot;term-info&quot;);\n      return;\n    }\n\n    // Parse arguments\n    let startPath = &quot;.&quot;;\n    let pattern = null;\n    let nameFlag = false;\n    let typeFlag = null;\n\n    for (let i = 0; i &lt; args.length; i++) {\n      if (args[i] === &quot;-name&quot; &amp;&amp; i + 1 &lt; args.length) {\n        nameFlag = true;\n        pattern = args[i + 1].replace(/&quot;/g, &quot;&quot;).replace(/\\*/g, &quot;.*&quot;);\n        i++; // Skip the next argument\n      } else if (args[i] === &quot;-type&quot; &amp;&amp; i + 1 &lt; args.length) {\n        if (args[i + 1] === &quot;f&quot;) {\n          typeFlag = &quot;file&quot;;\n        } else if (args[i + 1] === &quot;d&quot;) {\n          typeFlag = &quot;directory&quot;;\n        }\n        i++;\n      } else if (!nameFlag &amp;&amp; !args[i].startsWith(&quot;-&quot;)) {\n        startPath = args[i];\n      }\n    }\n\n    const targetPath = this.resolvePath(startPath);\n    const results = this.findRecursive(\n      targetPath,\n      pattern ? new RegExp(pattern) : null,\n      typeFlag\n    );\n\n    if (results.length === 0) {\n      this.write(&quot;No matching files found&quot;, &quot;term-info&quot;);\n    } else {\n      // Format results with colors based on file type\n      const formattedResults = results.map((path) =&gt; {\n        const obj = this.getFileSystemObject(path);\n        if (typeof obj === &quot;object&quot;) {\n          return `&lt;span class=&quot;directory&quot;&gt;${path}&lt;/span&gt;`;\n        } else if (path.endsWith(&quot;.md&quot;) || path.endsWith(&quot;.txt&quot;)) {\n          return `&lt;span class=&quot;text-file&quot;&gt;${path}&lt;/span&gt;`;\n        } else if (path.endsWith(&quot;.exe&quot;) || path.endsWith(&quot;.sh&quot;)) {\n          return `&lt;span class=&quot;executable&quot;&gt;${path}&lt;/span&gt;`;\n        } else {\n          return path;\n        }\n      });\n\n      this.write(formattedResults.join(&quot;\\n&quot;));\n    }\n  }\n\n  /**\n   * Find files recursively\n   */\n  findRecursive(path, pattern, typeFilter = null, relativeTo = null) {\n    if (!relativeTo) relativeTo = path;\n\n    const obj = this.getFileSystemObject(path);\n    if (!obj || typeof obj !== &quot;object&quot;) return [];\n\n    const results = [];\n\n    for (const item in obj) {\n      const itemPath = `${path}/${item}`;\n      const relPath = itemPath.replace(relativeTo, &quot;.&quot;).replace(/\\/\\//g, &quot;/&quot;);\n      const isDir = typeof obj[item] === &quot;object&quot;;\n\n      // Apply type filter if specified\n      if (\n        (typeFilter === &quot;file&quot; &amp;&amp; isDir) ||\n        (typeFilter === &quot;directory&quot; &amp;&amp; !isDir)\n      ) {\n        // Skip this item as it doesn&#039;t match the type filter\n      } else if (!pattern || pattern.test(item)) {\n        results.push(relPath);\n      }\n\n      if (isDir) {\n        results.push(\n          ...this.findRecursive(itemPath, pattern, typeFilter, relativeTo)\n        );\n      }\n    }\n\n    return results;\n  }\n\n  /**\n   * Search for patterns in files\n   */\n  cmdGrep(args) {\n    if (args.length &lt; 2) {\n      this.write(&quot;Usage: grep [pattern] [file...]&quot;, &quot;term-info&quot;);\n      this.write(&#039;Example: grep &quot;TODO&quot; *.txt&#039;, &quot;term-info&quot;);\n      return;\n    }\n\n    const pattern = args[0];\n    const files = args.slice(1);\n\n    let regex;\n    try {\n      regex = new RegExp(pattern, &quot;gi&quot;);\n    } catch (e) {\n      this.write(`Invalid regex pattern: ${e.message}`, &quot;error-text&quot;);\n      return;\n    }\n\n    let matchFound = false;\n\n    // Process files\n    for (const file of files) {\n      // Handle wildcards in filenames\n      if (file.includes(&quot;*&quot;)) {\n        const dir = this.getParentDir(file);\n        const filePattern = file.split(&quot;/&quot;).pop().replace(/\\*/g, &quot;.*&quot;);\n        const dirObj = this.getFileSystemObject(dir);\n\n        if (!dirObj || typeof dirObj !== &quot;object&quot;) {\n          this.write(`grep: ${dir}: No such directory`, &quot;error-text&quot;);\n          continue;\n        }\n\n        // Find matching files\n        const matchingFiles = Object.keys(dirObj).filter((name) =&gt;\n          new RegExp(`^${filePattern}$`).test(name)\n        );\n\n        for (const match of matchingFiles) {\n          if (typeof dirObj[match] !== &quot;object&quot;) {\n            const filePath = dir === &quot;/&quot; ? `/${match}` : `${dir}/${match}`;\n            const foundMatch = this.grepFile(filePath, regex);\n            matchFound = matchFound || foundMatch;\n          }\n        }\n      } else {\n        // Process regular files\n        const targetPath = this.resolvePath(file);\n        const foundMatch = this.grepFile(targetPath, regex);\n        matchFound = matchFound || foundMatch;\n      }\n    }\n\n    if (!matchFound) {\n      this.write(&quot;No matches found&quot;, &quot;term-info&quot;);\n    }\n  }\n\n  /**\n   * Search for pattern in a specific file\n   */\n  grepFile(filePath, regex) {\n    const obj = this.getFileSystemObject(filePath);\n\n    if (obj === null) {\n      this.write(`grep: ${filePath}: No such file or directory`, &quot;error-text&quot;);\n      return false;\n    } else if (typeof obj === &quot;object&quot;) {\n      this.write(`grep: ${filePath}: Is a directory`, &quot;error-text&quot;);\n      return false;\n    }\n\n    const content = obj.toString();\n    const lines = content.split(&quot;\\n&quot;);\n    const matches = [];\n\n    for (let i = 0; i &lt; lines.length; i++) {\n      if (regex.test(lines[i])) {\n        regex.lastIndex = 0; // Reset regex state\n        const highlightedLine = lines[i].replace(\n          regex,\n          (match) =&gt; `&lt;span class=&quot;success-text&quot;&gt;${match}&lt;/span&gt;`\n        );\n        matches.push(`${filePath}:${i + 1}: ${highlightedLine}`);\n      }\n    }\n\n    if (matches.length &gt; 0) {\n      this.write(matches.join(&quot;\\n&quot;));\n      return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Strip HTML tags from text\n   * @param {string} html - Text with HTML tags\n   * @returns {string} - Plain text\n   */\n  stripHtml(html) {\n    const temp = document.createElement(&quot;div&quot;);\n    temp.innerHTML = html;\n    return temp.textContent || temp.innerText || &quot;&quot;;\n  }\n\n  /**\n   * Display first lines of a file\n   */\n  cmdHead(args) {\n    if (args.length === 0) {\n      this.write(&quot;Usage: head [options] [file]&quot;, &quot;term-info&quot;);\n      this.write(&quot;Example: head -n 5 README.md&quot;, &quot;term-info&quot;);\n      return;\n    }\n\n    // Parse arguments\n    let lineCount = 10; // Default\n    let filePath = args[0];\n\n    if (args[0] === &quot;-n&quot; &amp;&amp; args.length &gt; 1) {\n      lineCount = parseInt(args[1], 10);\n      if (isNaN(lineCount) || lineCount &lt; 1) {\n        this.write(&quot;head: invalid number of lines&quot;, &quot;error-text&quot;);\n        return;\n      }\n      filePath = args.length &gt; 2 ? args[2] : null;\n    }\n\n    if (!filePath) {\n      this.write(&quot;head: missing file operand&quot;, &quot;error-text&quot;);\n      return;\n    }\n\n    const targetPath = this.resolvePath(filePath);\n    const obj = this.getFileSystemObject(targetPath);\n\n    if (obj === null) {\n      this.write(`head: ${filePath}: No such file or directory`, &quot;error-text&quot;);\n    } else if (typeof obj === &quot;object&quot;) {\n      this.write(`head: ${filePath}: Is a directory`, &quot;error-text&quot;);\n    } else {\n      const content = obj.toString();\n      const lines = content.split(&quot;\\n&quot;);\n      const result = lines.slice(0, lineCount).join(&quot;\\n&quot;);\n\n      this.write(`==&gt; ${filePath} &lt;==`, &quot;command-name&quot;);\n      this.write(result);\n    }\n  }\n\n  /**\n   * Display last lines of a file\n   */\n  cmdTail(args) {\n    if (args.length === 0) {\n      this.write(&quot;Usage: tail [options] [file]&quot;, &quot;term-info&quot;);\n      this.write(&quot;Example: tail -n 5 README.md&quot;, &quot;term-info&quot;);\n      return;\n    }\n\n    // Parse arguments\n    let lineCount = 10; // Default\n    let filePath = args[0];\n\n    if (args[0] === &quot;-n&quot; &amp;&amp; args.length &gt; 1) {\n      lineCount = parseInt(args[1], 10);\n      if (isNaN(lineCount) || lineCount &lt; 1) {\n        this.write(&quot;tail: invalid number of lines&quot;, &quot;error-text&quot;);\n        return;\n      }\n      filePath = args.length &gt; 2 ? args[2] : null;\n    }\n\n    if (!filePath) {\n      this.write(&quot;tail: missing file operand&quot;, &quot;error-text&quot;);\n      return;\n    }\n\n    const targetPath = this.resolvePath(filePath);\n    const obj = this.getFileSystemObject(targetPath);\n\n    if (obj === null) {\n      this.write(`tail: ${filePath}: No such file or directory`, &quot;error-text&quot;);\n    } else if (typeof obj === &quot;object&quot;) {\n      this.write(`tail: ${filePath}: Is a directory`, &quot;error-text&quot;);\n    } else {\n      const content = obj.toString();\n      const lines = content.split(&quot;\\n&quot;);\n      const result = lines.slice(-lineCount).join(&quot;\\n&quot;);\n\n      this.write(`==&gt; ${filePath} &lt;==`, &quot;command-name&quot;);\n      this.write(result);\n    }\n  }\n\n  /**\n   * Display system information with ASCII art\n   */\n  cmdNeofetch(args) {\n    // ASCII art for Linux penguin\n    const asciiArt = `\n          *nnnn*                      \n        dGGGGMMb     ,&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;.\n       @p~qp~~qMb    | Linux Rules! |\n       M|@||@) M|   *;..............&#039;\n       @,----.JM| -&#039;\n      JS^\\\\*_/  qKL\n     dZP        qKRb\n    dZP          qKKb\n   fZP            SMMb\n   HZM            MMMM\n   FqM            MMMM\n  __| &quot;.        |\\\\dS&quot;qML\n  |    \\`.       | \\`&#039; \\\\Zq\n  )      \\\\.*__.,|     .&#039;\n  \\\\____   )MMMMMM|   .&#039;\n     \\`-&#039;       \\`--&#039; hjm\n  `;\n\n    // Get actual terminal dimensions\n    const termWidth = this.terminal.clientWidth;\n    const termHeight = this.terminal.clientHeight;\n\n    // System information (customized for portfolio)\n    const systemInfo = [\n      &#039;&lt;span class=&quot;terminal-user&quot;&gt;user&lt;/span&gt;@&lt;span class=&quot;terminal-host&quot;&gt;portfolio&lt;/span&gt;&#039;,\n      &quot;-------------------------&quot;,\n      &#039;&lt;span class=&quot;command-name&quot;&gt;OS:&lt;/span&gt; Portfolio Linux 25.02.2&#039;,\n      &#039;&lt;span class=&quot;command-name&quot;&gt;Host:&lt;/span&gt; Virtual Portfolio Server&#039;,\n      &#039;&lt;span class=&quot;command-name&quot;&gt;Kernel:&lt;/span&gt; 5.15.0-portfolio&#039;,\n      &#039;&lt;span class=&quot;command-name&quot;&gt;Uptime:&lt;/span&gt; &#039; + this.getUptime(),\n      &#039;&lt;span class=&quot;command-name&quot;&gt;Packages:&lt;/span&gt; 42 (npm)&#039;,\n      &#039;&lt;span class=&quot;command-name&quot;&gt;Shell:&lt;/span&gt; portfolio-bash 5.1.16&#039;,\n      `&lt;span class=&quot;command-name&quot;&gt;Resolution:&lt;/span&gt; ${termWidth}px x ${termHeight}px`,\n      &#039;&lt;span class=&quot;command-name&quot;&gt;DE:&lt;/span&gt; Portfolio-Desktop&#039;,\n      &#039;&lt;span class=&quot;command-name&quot;&gt;WM:&lt;/span&gt; JavaScript&#039;,\n      &#039;&lt;span class=&quot;command-name&quot;&gt;WM Theme:&lt;/span&gt; Minimalist-Dark&#039;,\n      &#039;&lt;span class=&quot;command-name&quot;&gt;Terminal:&lt;/span&gt; portfolio-term&#039;,\n      &#039;&lt;span class=&quot;command-name&quot;&gt;CPU:&lt;/span&gt; JavaScript V8 @ 60fps&#039;,\n      &#039;&lt;span class=&quot;command-name&quot;&gt;GPU:&lt;/span&gt; HTML5 Canvas Accelerated&#039;,\n      &#039;&lt;span class=&quot;command-name&quot;&gt;Memory:&lt;/span&gt; 256MB / 512MB&#039;,\n    ];\n\n    const colorBlocks = `\n&lt;span style=&quot;color:#000000&quot;&gt;███&lt;/span&gt;&lt;span style=&quot;color:#CC0000&quot;&gt;███&lt;/span&gt;&lt;span style=&quot;color:#4E9A06&quot;&gt;███&lt;/span&gt;&lt;span style=&quot;color:#C4A000&quot;&gt;███&lt;/span&gt;&lt;span style=&quot;color:#3465A4&quot;&gt;███&lt;/span&gt;&lt;span style=&quot;color:#75507B&quot;&gt;███&lt;/span&gt;&lt;span style=&quot;color:#06989A&quot;&gt;███&lt;/span&gt;&lt;span style=&quot;color:#D3D7CF&quot;&gt;███&lt;/span&gt;\n&lt;span style=&quot;color:#555753&quot;&gt;███&lt;/span&gt;&lt;span style=&quot;color:#EF2929&quot;&gt;███&lt;/span&gt;&lt;span style=&quot;color:#8AE234&quot;&gt;███&lt;/span&gt;&lt;span style=&quot;color:#FCE94F&quot;&gt;███&lt;/span&gt;&lt;span style=&quot;color:#729FCF&quot;&gt;███&lt;/span&gt;&lt;span style=&quot;color:#AD7FA8&quot;&gt;███&lt;/span&gt;&lt;span style=&quot;color:#34E2E2&quot;&gt;███&lt;/span&gt;&lt;span style=&quot;color:#EEEEEC&quot;&gt;███&lt;/span&gt;\n`;\n\n    // Add color blocks to the system info\n    systemInfo.push(&quot;&quot;); // Empty line\n    colorBlocks.split(&quot;\\n&quot;).forEach((line) =&gt; {\n      systemInfo.push(line);\n    });\n\n    // Format the output with ASCII art on the left and system info on the right\n    const asciiLines = asciiArt.split(&quot;\\n&quot;);\n    const maxAsciiWidth = Math.max(...asciiLines.map((line) =&gt; line.length));\n\n    let output = &quot;&quot;;\n    const padding = 2; // Padding between ASCII and info\n\n    for (let i = 0; i &lt; Math.max(asciiLines.length, systemInfo.length); i++) {\n      const asciiLine = i &lt; asciiLines.length ? asciiLines[i] : &quot;&quot;;\n      const infoLine = i &lt; systemInfo.length ? systemInfo[i] : &quot;&quot;;\n\n      // Pad the ASCII line to align system info\n      const paddedAscii = asciiLine.padEnd(maxAsciiWidth + padding);\n\n      output += paddedAscii + infoLine + &quot;\\n&quot;;\n    }\n\n    this.write(output, &quot;neofetch-output&quot;);\n  }\n\n  /**\n   * Helper method to get uptime for neofetch\n   */\n  getUptime() {\n    // Generate a random but realistic uptime\n    const hours = Math.floor(Math.random() * 24);\n    const mins = Math.floor(Math.random() * 60);\n    const days = Math.floor(Math.random() * 5);\n\n    if (days &gt; 0) {\n      return `${days} days, ${hours} hours, ${mins} mins`;\n    } else {\n      return `${hours} hours, ${mins} mins`;\n    }\n  }\n\n  /**\n   * Change terminal color theme\n   */\n  cmdTheme(args) {\n    const availableThemes = {\n      dracula: {\n        &quot;--terminal-bg&quot;: &quot;#282a36&quot;,\n        &quot;--text-color&quot;: &quot;#f8f8f2&quot;,\n        &quot;--terminal-prompt-color&quot;: &quot;#50fa7b&quot;,\n        &quot;--color-light-green&quot;: &quot;#50fa7b&quot;,\n        &quot;--color-light-cyan&quot;: &quot;#8be9fd&quot;,\n        &quot;--color-light-blue&quot;: &quot;#6272a4&quot;,\n        &quot;--color-light-purple&quot;: &quot;#bd93f9&quot;,\n        &quot;--color-yellow&quot;: &quot;#f1fa8c&quot;,\n        &quot;--color-light-red&quot;: &quot;#ff5555&quot;,\n      },\n      monokai: {\n        &quot;--terminal-bg&quot;: &quot;#272822&quot;,\n        &quot;--text-color&quot;: &quot;#f8f8f2&quot;,\n        &quot;--terminal-prompt-color&quot;: &quot;#a6e22e&quot;,\n        &quot;--color-light-green&quot;: &quot;#a6e22e&quot;,\n        &quot;--color-light-cyan&quot;: &quot;#66d9ef&quot;,\n        &quot;--color-light-blue&quot;: &quot;#75715e&quot;,\n        &quot;--color-light-purple&quot;: &quot;#ae81ff&quot;,\n        &quot;--color-yellow&quot;: &quot;#e6db74&quot;,\n        &quot;--color-light-red&quot;: &quot;#f92672&quot;,\n      },\n      nord: {\n        &quot;--terminal-bg&quot;: &quot;#2e3440&quot;,\n        &quot;--text-color&quot;: &quot;#d8dee9&quot;,\n        &quot;--terminal-prompt-color&quot;: &quot;#a3be8c&quot;,\n        &quot;--color-light-green&quot;: &quot;#a3be8c&quot;,\n        &quot;--color-light-cyan&quot;: &quot;#88c0d0&quot;,\n        &quot;--color-light-blue&quot;: &quot;#81a1c1&quot;,\n        &quot;--color-light-purple&quot;: &quot;#b48ead&quot;,\n        &quot;--color-yellow&quot;: &quot;#ebcb8b&quot;,\n        &quot;--color-light-red&quot;: &quot;#bf616a&quot;,\n      },\n      &quot;solarized-dark&quot;: {\n        &quot;--terminal-bg&quot;: &quot;#002b36&quot;,\n        &quot;--text-color&quot;: &quot;#839496&quot;,\n        &quot;--terminal-prompt-color&quot;: &quot;#859900&quot;,\n        &quot;--color-light-green&quot;: &quot;#859900&quot;,\n        &quot;--color-light-cyan&quot;: &quot;#2aa198&quot;,\n        &quot;--color-light-blue&quot;: &quot;#268bd2&quot;,\n        &quot;--color-light-purple&quot;: &quot;#6c71c4&quot;,\n        &quot;--color-yellow&quot;: &quot;#b58900&quot;,\n        &quot;--color-light-red&quot;: &quot;#dc322f&quot;,\n      },\n    };\n\n    if (args.length === 0) {\n      // Display available themes\n      this.write(&quot;Available themes:&quot;, &quot;term-info&quot;);\n      Object.keys(availableThemes).forEach((theme) =&gt; {\n        this.write(`  ${theme}`, &quot;command-name&quot;);\n      });\n      this.write(&quot;Usage: theme [theme-name]&quot;, &quot;term-info&quot;);\n      return;\n    }\n\n    const requestedTheme = args[0].toLowerCase();\n    if (availableThemes[requestedTheme]) {\n      // Apply the theme\n      const themeColors = availableThemes[requestedTheme];\n      const root = document.documentElement;\n\n      Object.keys(themeColors).forEach((property) =&gt; {\n        root.style.setProperty(property, themeColors[property]);\n      });\n\n      this.write(`Theme changed to ${requestedTheme}`, &quot;success-text&quot;);\n    } else {\n      this.write(\n        `Theme &#039;${requestedTheme}&#039; not found. Use &#039;theme&#039; to see available themes.`,\n        &quot;error-text&quot;\n      );\n    }\n  }\n\n  /**\n   * Display command history\n   */\n  cmdHistory(args) {\n    if (this.history.length === 0) {\n      this.write(&quot;No commands in history&quot;, &quot;term-info&quot;);\n      return;\n    }\n\n    // Parse arguments\n    let limit = 10; // Default\n    if (args.length &gt; 0 &amp;&amp; args[0] === &quot;-n&quot; &amp;&amp; args.length &gt; 1) {\n      const requestedLimit = parseInt(args[1], 10);\n      if (!isNaN(requestedLimit) &amp;&amp; requestedLimit &gt; 0) {\n        limit = Math.min(requestedLimit, this.history.length);\n      } else {\n        this.write(&quot;history: invalid number of lines&quot;, &quot;error-text&quot;);\n        return;\n      }\n    }\n\n    // Display limited history with numbers\n    const historyToShow = this.history.slice(0, limit);\n    let output = &quot;&quot;;\n\n    for (let i = 0; i &lt; historyToShow.length; i++) {\n      const commandNumber = this.commandsRun - i;\n      output += `&lt;span class=&quot;command-name&quot;&gt;${commandNumber\n        .toString()\n        .padStart(4)}&lt;/span&gt;  ${historyToShow[i]}\\n`;\n    }\n\n    this.write(output);\n  }\n\n  /**\n   * Define or display aliases for commands\n   */\n  cmdAlias(args) {\n    if (args.length === 0) {\n      // Display all aliases\n      if (Object.keys(this.aliases).length === 0) {\n        this.write(&quot;No aliases defined&quot;, &quot;term-info&quot;);\n        return;\n      }\n\n      let output = &quot;&quot;;\n      for (const alias in this.aliases) {\n        output += `&lt;span class=&quot;command-name&quot;&gt;alias&lt;/span&gt; ${alias}=&#039;${this.aliases[alias]}&#039;\\n`;\n      }\n      this.write(output);\n      return;\n    }\n\n    // Handle alias assignment or removal\n    if (args.length === 1) {\n      const aliasArg = args[0];\n      if (aliasArg.includes(&quot;=&quot;)) {\n        // Set alias\n        const [name, ...valueParts] = aliasArg.split(&quot;=&quot;);\n        const value = valueParts.join(&quot;=&quot;).replace(/^[&#039;&quot;](.*)[&#039;&quot;]$/, &quot;$1&quot;);\n\n        if (!name) {\n          this.write(&quot;alias: invalid alias name&quot;, &quot;error-text&quot;);\n          return;\n        }\n\n        this.aliases[name] = value;\n        this.write(`Alias set: ${name}=&#039;${value}&#039;`, &quot;success-text&quot;);\n      } else {\n        // Show specific alias\n        if (this.aliases[aliasArg]) {\n          this.write(\n            `&lt;span class=&quot;command-name&quot;&gt;alias&lt;/span&gt; ${aliasArg}=&#039;${this.aliases[aliasArg]}&#039;`\n          );\n        } else {\n          this.write(`alias: ${aliasArg}: not found`, &quot;error-text&quot;);\n        }\n      }\n    }\n  }\n}\n"
  },
  "blog.html": "&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n  &lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot; /&gt;\n    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;\n    &lt;title&gt;BLOG_POST_ | PORTFOLIO_&lt;/title&gt;\n    &lt;link\n      rel=&quot;icon&quot;\n      href=&quot;./images/logo.svg&quot;\n      type=&quot;image/svg+xml&quot;\n    /&gt;\n    &lt;link rel=&quot;stylesheet&quot; href=&quot;./assets/styles.css&quot; /&gt;\n    &lt;link\n      href=&quot;https://fonts.googleapis.com/css2?family=JetBrains+Mono:wght@400;500;600;700&amp;display=swap&quot;\n      rel=&quot;stylesheet&quot;\n    /&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;div class=&quot;grid&quot;&gt;&lt;/div&gt;\n    &lt;header&gt;&lt;/header&gt;\n    &lt;main&gt;\n      &lt;div class=&quot;terminal-window&quot;&gt;\n        &lt;div class=&quot;terminal-header&quot;&gt;\n          &lt;div class=&quot;terminal-buttons&quot;&gt;\n            &lt;div class=&quot;terminal-button close&quot;&gt;&lt;/div&gt;\n            &lt;div class=&quot;terminal-button minimize&quot;&gt;&lt;/div&gt;\n            &lt;div class=&quot;terminal-button maximize&quot;&gt;&lt;/div&gt;\n          &lt;/div&gt;\n          &lt;div class=&quot;terminal-title&quot;&gt;less post.md&lt;/div&gt;\n        &lt;/div&gt;\n        &lt;div class=&quot;terminal-body&quot;&gt;\n          &lt;div class=&quot;terminal-line&quot;&gt;\n            &lt;div class=&quot;terminal-prompt&quot;&gt;\n              &lt;span class=&quot;terminal-user&quot;&gt;blogs&lt;/span&gt;\n              &lt;span&gt;@&lt;/span&gt;\n              &lt;span class=&quot;terminal-host&quot;&gt;portfolio&lt;/span&gt;\n              &lt;span&gt;:&lt;/span&gt;\n              &lt;span class=&quot;terminal-path&quot;&gt;~/posts&lt;/span&gt;\n              &lt;span&gt;$&lt;/span&gt;\n            &lt;/div&gt;\n            &lt;div class=&quot;terminal-command&quot;&gt;\n              less &lt;span id=&quot;blog-filename&quot;&gt;post.md&lt;/span&gt;\n            &lt;/div&gt;\n          &lt;/div&gt;\n\n          &lt;div class=&quot;terminal-output&quot;&gt;\n            &lt;article class=&quot;blog-post&quot;&gt;\n              &lt;div class=&quot;blog-header&quot;&gt;\n                &lt;h1 id=&quot;blog-title&quot;&gt;BLOG_POST_TITLE_&lt;/h1&gt;\n                &lt;div id=&quot;blog-date&quot; class=&quot;blog-date&quot;&gt;\n                  Date: FEBRUARY_25_2025_\n                &lt;/div&gt;\n              &lt;/div&gt;\n              &lt;div id=&quot;blog-content&quot; class=&quot;blog-content&quot;&gt;\n                &lt;div class=&quot;loading&quot;&gt;\n                  Loading content...&lt;span class=&quot;blink-cursor&quot;&gt;&lt;/span&gt;\n                &lt;/div&gt;\n              &lt;/div&gt;\n            &lt;/article&gt;\n          &lt;/div&gt;\n\n          &lt;div class=&quot;terminal-line&quot;&gt;\n            &lt;div class=&quot;terminal-prompt&quot;&gt;\n              &lt;span class=&quot;terminal-user&quot;&gt;blogs&lt;/span&gt;\n              &lt;span&gt;@&lt;/span&gt;\n              &lt;span class=&quot;terminal-host&quot;&gt;portfolio&lt;/span&gt;\n              &lt;span&gt;:&lt;/span&gt;\n              &lt;span class=&quot;terminal-path&quot;&gt;~/posts&lt;/span&gt;\n              &lt;span&gt;$&lt;/span&gt;\n            &lt;/div&gt;\n            &lt;div class=&quot;terminal-command blink-cursor&quot;&gt;&lt;/div&gt;\n          &lt;/div&gt;\n        &lt;/div&gt;\n      &lt;/div&gt;\n    &lt;/main&gt;\n    &lt;footer&gt;&lt;/footer&gt;\n    &lt;script src=&quot;./assets/script.js&quot;&gt;&lt;/script&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n",
  "blogs.html": "&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n  &lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot; /&gt;\n    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;\n    &lt;title&gt;BLOG_ | PORTFOLIO_&lt;/title&gt;\n    &lt;link\n      rel=&quot;icon&quot;\n      href=&quot;./images/logo.svg&quot;\n      type=&quot;image/svg+xml&quot;\n    /&gt;\n    &lt;link rel=&quot;stylesheet&quot; href=&quot;./assets/styles.css&quot; /&gt;\n    &lt;link\n      href=&quot;https://fonts.googleapis.com/css2?family=JetBrains+Mono:wght@400;500;600;700&amp;display=swap&quot;\n      rel=&quot;stylesheet&quot;\n    /&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;div class=&quot;grid&quot;&gt;&lt;/div&gt;\n    &lt;header&gt;&lt;/header&gt;\n    &lt;main&gt;\n      &lt;section id=&quot;blogs-list&quot;&gt;\n        &lt;div class=&quot;terminal-window&quot;&gt;\n          &lt;div class=&quot;terminal-header&quot;&gt;\n            &lt;div class=&quot;terminal-buttons&quot;&gt;\n              &lt;div class=&quot;terminal-button close&quot;&gt;&lt;/div&gt;\n              &lt;div class=&quot;terminal-button minimize&quot;&gt;&lt;/div&gt;\n              &lt;div class=&quot;terminal-button maximize&quot;&gt;&lt;/div&gt;\n            &lt;/div&gt;\n            &lt;div class=&quot;terminal-title&quot;&gt;ssh blogs.portfolio.local&lt;/div&gt;\n          &lt;/div&gt;\n          &lt;div class=&quot;terminal-body&quot;&gt;\n            &lt;div class=&quot;ssh-loading&quot;&gt;\n              &lt;div class=&quot;terminal-line&quot;&gt;\n                &lt;div class=&quot;terminal-prompt&quot;&gt;\n                  &lt;span class=&quot;terminal-user&quot;&gt;user&lt;/span&gt;\n                  &lt;span&gt;@&lt;/span&gt;\n                  &lt;span class=&quot;terminal-host&quot;&gt;local&lt;/span&gt;\n                  &lt;span&gt;:&lt;/span&gt;\n                  &lt;span class=&quot;terminal-path&quot;&gt;~&lt;/span&gt;\n                  &lt;span&gt;$&lt;/span&gt;\n                &lt;/div&gt;\n                &lt;div class=&quot;terminal-command&quot;&gt;ssh blogs@portfolio.local&lt;/div&gt;\n              &lt;/div&gt;\n              &lt;p&gt;Connecting to blogs@portfolio.local...&lt;/p&gt;\n              &lt;p&gt;\n                The authenticity of host &#039;portfolio.local&#039; can&#039;t be established.\n              &lt;/p&gt;\n              &lt;p&gt;\n                ECDSA key fingerprint is\n                SHA256:dGhpciBpcyBhIGZha2Uga2V5IGZpbmdlcnByaW50\n              &lt;/p&gt;\n              &lt;p&gt;\n                Are you sure you want to continue connecting\n                (yes/no/[fingerprint])? yes\n              &lt;/p&gt;\n              &lt;p&gt;\n                Warning: Permanently added &#039;portfolio.local&#039; (ECDSA) to the list\n                of known hosts.\n              &lt;/p&gt;\n              &lt;p&gt;Password: ********&lt;/p&gt;\n              &lt;p&gt;Last login: Tue Feb 25 10:15:23 2025 from 192.168.1.42&lt;/p&gt;\n            &lt;/div&gt;\n            &lt;div class=&quot;terminal-line&quot;&gt;\n              &lt;div class=&quot;terminal-prompt&quot;&gt;\n                &lt;span class=&quot;terminal-user&quot;&gt;blogs&lt;/span&gt;\n                &lt;span&gt;@&lt;/span&gt;\n                &lt;span class=&quot;terminal-host&quot;&gt;portfolio&lt;/span&gt;\n                &lt;span&gt;:&lt;/span&gt;\n                &lt;span class=&quot;terminal-path&quot;&gt;~/posts&lt;/span&gt;\n                &lt;span&gt;$&lt;/span&gt;\n              &lt;/div&gt;\n              &lt;div class=&quot;terminal-command&quot;&gt;\n                find . -name &quot;*.md&quot; -type f | sort -r | xargs ls -l\n              &lt;/div&gt;\n            &lt;/div&gt;\n            &lt;div class=&quot;terminal-output&quot;&gt;\n              &lt;div class=&quot;loading&quot;&gt;\n                Fetching blog posts...&lt;span class=&quot;blink-cursor&quot;&gt;&lt;/span&gt;\n              &lt;/div&gt;\n            &lt;/div&gt;\n          &lt;/div&gt;\n        &lt;/div&gt;\n      &lt;/section&gt;\n    &lt;/main&gt;\n    &lt;footer&gt;&lt;/footer&gt;\n    &lt;script src=&quot;./assets/script.js&quot;&gt;&lt;/script&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n",
  "components.js": "const Components = {\n  Navbar: (activePage = &quot;&quot;) =&gt; {\n    return `\n      &lt;nav&gt;\n        &lt;div class=&quot;nav-container&quot;&gt;\n          &lt;div class=&quot;nav-title&quot;&gt;PORTFOLIO_&lt;/div&gt;\n          &lt;div class=&quot;hamburger-menu&quot;&gt;\n            &lt;div class=&quot;bar1&quot;&gt;&lt;/div&gt;\n            &lt;div class=&quot;bar2&quot;&gt;&lt;/div&gt;\n            &lt;div class=&quot;bar3&quot;&gt;&lt;/div&gt;\n          &lt;/div&gt;\n        &lt;/div&gt;\n        &lt;ul class=&quot;nav-links&quot;&gt;\n          &lt;li class=&quot;${\n            activePage === &quot;home&quot; ? &quot;active&quot; : &quot;&quot;\n          }&quot;&gt;&lt;a href=&quot;index.html&quot;&gt;$ HOME&lt;/a&gt;&lt;/li&gt;\n          &lt;li class=&quot;${\n            activePage === &quot;projects&quot; ? &quot;active&quot; : &quot;&quot;\n          }&quot;&gt;&lt;a href=&quot;projects.html&quot;&gt;$ PROJECTS&lt;/a&gt;&lt;/li&gt;\n          &lt;li class=&quot;${\n            activePage === &quot;blogs&quot; ? &quot;active&quot; : &quot;&quot;\n          }&quot;&gt;&lt;a href=&quot;blogs.html&quot;&gt;$ BLOGS&lt;/a&gt;&lt;/li&gt;\n          &lt;li class=&quot;${\n            activePage === &quot;interface&quot; ? &quot;active&quot; : &quot;&quot;\n          }&quot;&gt;&lt;a href=&quot;interface.html&quot;&gt;$ TERMINAL&lt;/a&gt;&lt;/li&gt;\n          &lt;li class=&quot;${\n            activePage === &quot;contact&quot; ? &quot;active&quot; : &quot;&quot;\n          }&quot;&gt;&lt;a href=&quot;contact.html&quot;&gt;$ CONTACT&lt;/a&gt;&lt;/li&gt;\n        &lt;/ul&gt;\n      &lt;/nav&gt;\n    `;\n  },\n\n  // Footer component\n  Footer: () =&gt; {\n    const currentYear = new Date().getFullYear();\n    return `\n      &lt;p&gt;&amp;copy; ${currentYear} Iolo Evans Jones| $ echo &quot;Built with HTML, CSS, JS&quot;&lt;/p&gt;\n    `;\n  },\n\n  // Terminal window component - Linux style\n  TerminalWindow: ({\n    title = &quot;user@server: ~&quot;,\n    commands = [],\n    content = &quot;&quot;,\n  }) =&gt; {\n    return `\n      &lt;div class=&quot;terminal-window&quot;&gt;\n        &lt;div class=&quot;terminal-header&quot;&gt;\n          &lt;div class=&quot;terminal-title&quot;&gt;${title}&lt;/div&gt;\n        &lt;/div&gt;\n        &lt;div class=&quot;terminal-body&quot;&gt;\n          ${commands.map((cmd) =&gt; Components.TerminalLine(cmd)).join(&quot;&quot;)}\n          ${content}\n        &lt;/div&gt;\n      &lt;/div&gt;\n    `;\n  },\n\n  // Terminal line with prompt - Linux style\n  TerminalLine: ({\n    user = &quot;user&quot;,\n    host = &quot;portfolio&quot;,\n    path = &quot;~&quot;,\n    command = &quot;&quot;,\n    output = &quot;&quot;,\n  }) =&gt; {\n    return `\n      &lt;div class=&quot;terminal-line&quot;&gt;\n        &lt;div class=&quot;terminal-prompt&quot;&gt;\n          &lt;span class=&quot;terminal-user&quot;&gt;${user}&lt;/span&gt;\n          &lt;span&gt;@&lt;/span&gt;\n          &lt;span class=&quot;terminal-host&quot;&gt;${host}&lt;/span&gt;\n          &lt;span&gt;:&lt;/span&gt;\n          &lt;span class=&quot;terminal-path&quot;&gt;${path}&lt;/span&gt;\n          &lt;span&gt;$&lt;/span&gt;\n        &lt;/div&gt;\n        &lt;div class=&quot;terminal-command&quot;&gt;${command}&lt;/div&gt;\n      &lt;/div&gt;\n      ${output ? `&lt;div class=&quot;terminal-output&quot;&gt;${output}&lt;/div&gt;` : &quot;&quot;}\n    `;\n  },\n\n  // SSH connection animation - Linux style\n  SSHConnection: (host, content) =&gt; {\n    return `\n      &lt;div class=&quot;ssh-loading&quot;&gt;\n        &lt;div class=&quot;terminal-line&quot;&gt;\n          &lt;div class=&quot;terminal-prompt&quot;&gt;\n            &lt;span class=&quot;terminal-user&quot;&gt;user&lt;/span&gt;\n            &lt;span&gt;@&lt;/span&gt;\n            &lt;span class=&quot;terminal-host&quot;&gt;local&lt;/span&gt;\n            &lt;span&gt;:&lt;/span&gt;\n            &lt;span class=&quot;terminal-path&quot;&gt;~&lt;/span&gt;\n            &lt;span&gt;$&lt;/span&gt;\n          &lt;/div&gt;\n          &lt;div class=&quot;terminal-command&quot;&gt;ssh ${host}&lt;/div&gt;\n        &lt;/div&gt;\n        &lt;p&gt;The authenticity of host &#039;${host}&#039; can&#039;t be established.&lt;/p&gt;\n        &lt;p&gt;ECDSA key fingerprint is SHA256:dGhpciBpcyBhIGZha2Uga2V5IGZpbmdlcnByaW50&lt;/p&gt;\n        &lt;p&gt;Are you sure you want to continue connecting (yes/no/[fingerprint])? yes&lt;/p&gt;\n        &lt;p&gt;Warning: Permanently added &#039;${host}&#039; (ECDSA) to the list of known hosts.&lt;/p&gt;\n        &lt;p&gt;${host}&#039;s password: ********&lt;/p&gt;\n        &lt;p&gt;Last login: ${new Date().toUTCString()} from 192.168.1.42&lt;/p&gt;\n      &lt;/div&gt;\n      ${content}\n    `;\n  },\n\n  // Helper function to parse dates consistently\n  parseDate: (dateString) =&gt; {\n    if (!dateString) return new Date(0); // Default to epoch if no date\n\n    // If already a Date object\n    if (dateString instanceof Date) return dateString;\n\n    // Try to parse the date\n    const parsedDate = new Date(dateString);\n\n    // Check if parsing worked\n    if (!isNaN(parsedDate.getTime())) {\n      return parsedDate;\n    }\n\n    // Fallback to current date if parsing failed\n    console.error(`Failed to parse date: ${dateString}`);\n    return new Date();\n  },\n\n  // Project card component - Linux file listing style\n  ProjectCard: (project) =&gt; {\n    // Format the date if it exists, otherwise use current date as fallback\n    let formattedDate = new Date().toISOString().split(&quot;T&quot;)[0]; // Fallback\n\n    if (project.date) {\n      // Check if date is in ISO format (YYYY-MM-DD)\n      if (/^\\d{4}-\\d{2}-\\d{2}$/.test(project.date)) {\n        formattedDate = project.date;\n      }\n      // Handle other date formats if needed (e.g., &quot;February 20, 2025&quot;)\n      else {\n        try {\n          const parsedDate = new Date(project.date);\n          if (!isNaN(parsedDate)) {\n            formattedDate = parsedDate.toISOString().split(&quot;T&quot;)[0];\n          }\n        } catch (e) {\n          console.error(`Error parsing date for project ${project.id}:`, e);\n        }\n      }\n    }\n\n    return `\n      &lt;div class=&quot;project-card&quot;&gt;\n        &lt;div class=&quot;project-listing&quot;&gt;\n          &lt;span class=&quot;text-file&quot;&gt;drwxr-xr-x&lt;/span&gt; 2 user portfolio 4096 ${formattedDate} &lt;span class=&quot;directory&quot;&gt;${\n      project.id\n    }/&lt;/span&gt;\n        &lt;/div&gt;\n        &lt;h3 class=&quot;project-title&quot;&gt;${project.title}&lt;/h3&gt;\n        &lt;p&gt;${project.description}&lt;/p&gt;\n        &lt;div class=&quot;project-tags&quot;&gt;\n          ${project.tags\n            .map((tag) =&gt; `&lt;span class=&quot;project-tag&quot;&gt;${tag}&lt;/span&gt;`)\n            .join(&quot;&quot;)}\n        &lt;/div&gt;\n        &lt;a href=&quot;project.html?id=${project.id}&quot; class=&quot;read-more&quot;&gt;$ cd ${\n      project.id\n    } &amp;&amp; cat README.md&lt;/a&gt;\n      &lt;/div&gt;\n    `;\n  },\n\n  // Projects list in terminal style - Linux ls output\n  ProjectsList: (projects) =&gt; {\n    const commands = [\n      {\n        user: &quot;user&quot;,\n        host: &quot;portfolio&quot;,\n        path: &quot;~/projects&quot;,\n        command: &quot;ls -la&quot;,\n      },\n    ];\n\n    let output = &quot;&lt;p&gt;total &quot; + projects.length + &quot;&lt;/p&gt;&quot;;\n    output += projects\n      .map((project) =&gt; Components.ProjectCard(project))\n      .join(&quot;&quot;);\n\n    return Components.TerminalWindow({\n      title: &quot;user@portfolio: ~/projects&quot;,\n      commands: commands,\n      content: output,\n    });\n  },\n\n  // Blog post item component - Linux file view style\n  BlogPostItem: (post) =&gt; {\n    // Format the date properly\n    let fileDate = post.date;\n\n    // Replace spaces with underscores and convert to lowercase for filename-like format\n    if (typeof fileDate === &quot;string&quot;) {\n      fileDate = fileDate.replace(/\\s/g, &quot;_&quot;).toLowerCase();\n    }\n\n    return `\n      &lt;div class=&quot;post-item&quot;&gt;\n        &lt;div class=&quot;post-listing&quot;&gt;\n          &lt;span class=&quot;text-file&quot;&gt;-rw-r--r--&lt;/span&gt; 1 blogs portfolio 4096 ${fileDate} &lt;span class=&quot;text-file&quot;&gt;${post.id}.md&lt;/span&gt;\n        &lt;/div&gt;\n        &lt;div class=&quot;post-date&quot;&gt;${post.date}&lt;/div&gt;\n        &lt;h3 class=&quot;post-title&quot;&gt;${post.title}&lt;/h3&gt;\n        &lt;p class=&quot;post-excerpt&quot;&gt;${post.excerpt}&lt;/p&gt;\n        &lt;a href=&quot;blog.html?id=${post.id}&quot; class=&quot;read-more&quot;&gt;$ less ${post.id}.md&lt;/a&gt;\n      &lt;/div&gt;\n    `;\n  },\n\n  // Blog posts list in terminal style - Linux find output\n  BlogsList: (posts) =&gt; {\n    const commands = [\n      {\n        user: &quot;user&quot;,\n        host: &quot;portfolio&quot;,\n        path: &quot;~/blogs&quot;,\n        command: &#039;find . -name &quot;*.md&quot; -type f | sort -r&#039;,\n      },\n    ];\n\n    const output = posts.map((post) =&gt; Components.BlogPostItem(post)).join(&quot;&quot;);\n\n    return Components.TerminalWindow({\n      title: &quot;user@portfolio: ~/blogs&quot;,\n      commands: commands,\n      content: output,\n    });\n  },\n\n  // Loading indicator - Linux style\n  Loading: () =&gt; {\n    return `\n      &lt;div class=&quot;terminal-window&quot;&gt;\n        &lt;div class=&quot;terminal-header&quot;&gt;\n          &lt;div class=&quot;terminal-title&quot;&gt;user@portfolio: ~&lt;/div&gt;\n        &lt;/div&gt;\n        &lt;div class=&quot;terminal-body&quot;&gt;\n          &lt;div class=&quot;terminal-line&quot;&gt;\n            &lt;div class=&quot;terminal-prompt&quot;&gt;\n              &lt;span class=&quot;terminal-user&quot;&gt;user&lt;/span&gt;\n              &lt;span&gt;@&lt;/span&gt;\n              &lt;span class=&quot;terminal-host&quot;&gt;portfolio&lt;/span&gt;\n              &lt;span&gt;:&lt;/span&gt;\n              &lt;span class=&quot;terminal-path&quot;&gt;~&lt;/span&gt;\n              &lt;span&gt;$&lt;/span&gt;\n            &lt;/div&gt;\n            &lt;div class=&quot;terminal-command&quot;&gt;fetching data&lt;span class=&quot;blink-cursor&quot;&gt;&lt;/span&gt;&lt;/div&gt;\n          &lt;/div&gt;\n        &lt;/div&gt;\n      &lt;/div&gt;\n    `;\n  },\n};\n\n// Component renderer\nfunction renderComponent(selector, component) {\n  const container = document.querySelector(selector);\n  if (container) {\n    container.innerHTML = component;\n  }\n}\n\n// Export components to global scope\nwindow.Components = Components;\nwindow.renderComponent = renderComponent;\n",
  "contact.html": "&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n  &lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot; /&gt;\n    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;\n    &lt;title&gt;CONTACT_ | PORTFOLIO_&lt;/title&gt;\n    &lt;link\n      rel=&quot;icon&quot;\n      href=&quot;./images/logo.svg&quot;\n      type=&quot;image/svg+xml&quot;\n    /&gt;\n    &lt;link rel=&quot;stylesheet&quot; href=&quot;./assets/styles.css&quot; /&gt;\n    &lt;link\n      href=&quot;https://fonts.googleapis.com/css2?family=JetBrains+Mono:wght@400;500;600;700&amp;display=swap&quot;\n      rel=&quot;stylesheet&quot;\n    /&gt;\n    &lt;style&gt;\n      /* Override defaults for terminal-like appearance */\n      .terminal-output pre {\n        font-family: &quot;JetBrains Mono&quot;, monospace;\n        padding: 0;\n        margin: 0;\n        overflow-x: visible;\n        border: none;\n        background: transparent;\n        color: var(--text-color);\n        line-height: 1.2;\n        font-size: 0.95rem;\n      }\n\n      /* Fix spacing in terminal output */\n      .terminal-output {\n        padding-left: 0;\n        margin-top: 0.25rem;\n        margin-bottom: 0.5rem;\n      }\n\n      /* Tighter paragraphs for terminal feel */\n      .terminal-output p {\n        margin: 0;\n        line-height: 1.2;\n      }\n\n      /* Add small space between paragraphs but keep compact */\n      .terminal-output p:not(:last-child) {\n        margin-bottom: 0.1rem;\n      }\n\n      /* Contact options with no large gaps */\n      .contact-options {\n        display: flex;\n        flex-direction: column;\n        gap: 0;\n      }\n\n      .contact-option h3 {\n        margin-bottom: 0.1rem;\n        color: var(--terminal-prompt-color);\n      }\n\n      /* Link styling for terminal with colors */\n      .email-link {\n        text-decoration: underline;\n        color: var(--color-light-cyan);\n      }\n\n      .github-link {\n        text-decoration: underline;\n        color: var(--color-light-green);\n      }\n\n      .linkedin-link {\n        text-decoration: underline;\n        color: var(--color-light-blue);\n      }\n\n      /* Hover effect for links */\n      .terminal-output a:hover {\n        opacity: 0.8;\n        color: var(--color-high-white);\n      }\n    &lt;/style&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;div class=&quot;grid&quot;&gt;&lt;/div&gt;\n    &lt;header&gt;&lt;/header&gt;\n    &lt;main&gt;\n      &lt;div class=&quot;terminal-window&quot;&gt;\n        &lt;div class=&quot;terminal-header&quot;&gt;\n          &lt;div class=&quot;terminal-title&quot;&gt;contact@portfolio: ~&lt;/div&gt;\n        &lt;/div&gt;\n        &lt;div class=&quot;terminal-body&quot;&gt;\n          &lt;div class=&quot;terminal-line&quot;&gt;\n            &lt;div class=&quot;terminal-prompt&quot;&gt;\n              &lt;span class=&quot;terminal-user&quot;&gt;user&lt;/span&gt;\n              &lt;span&gt;@&lt;/span&gt;\n              &lt;span class=&quot;terminal-host&quot;&gt;portfolio&lt;/span&gt;\n              &lt;span&gt;:&lt;/span&gt;\n              &lt;span class=&quot;terminal-path&quot;&gt;~&lt;/span&gt;\n              &lt;span&gt;$&lt;/span&gt;\n            &lt;/div&gt;\n            &lt;div class=&quot;terminal-command&quot;&gt;cat contact_info.txt&lt;/div&gt;\n          &lt;/div&gt;\n\n          &lt;div class=&quot;terminal-output&quot;&gt;\n            &lt;pre&gt;\n  _____            _             _   \n / ____|          | |           | |  \n| |     ___  _ __ | |_ __ _  ___| |_ \n| |    / _ \\| &#039;_ \\| __/ _` |/ __| __|\n| |___| (_) | | | | || (_| | (__| |_ \n \\_____\\___/|_| |_|\\__\\__,_|\\___|\\__|\n                                     &lt;/pre\n            &gt;\n            &lt;p&gt;\n              Looking to connect or discuss potential projects? Here&#039;s how to\n              reach me:\n            &lt;/p&gt;\n          &lt;/div&gt;\n\n          &lt;div class=&quot;terminal-line&quot;&gt;\n            &lt;div class=&quot;terminal-prompt&quot;&gt;\n              &lt;span class=&quot;terminal-user&quot;&gt;user&lt;/span&gt;\n              &lt;span&gt;@&lt;/span&gt;\n              &lt;span class=&quot;terminal-host&quot;&gt;portfolio&lt;/span&gt;\n              &lt;span&gt;:&lt;/span&gt;\n              &lt;span class=&quot;terminal-path&quot;&gt;~&lt;/span&gt;\n              &lt;span&gt;$&lt;/span&gt;\n            &lt;/div&gt;\n            &lt;div class=&quot;terminal-command&quot;&gt;ls -la contact_methods/&lt;/div&gt;\n          &lt;/div&gt;\n\n          &lt;div class=&quot;terminal-output contact-options&quot;&gt;\n            &lt;p&gt;total 4&lt;/p&gt;\n            &lt;p&gt;drwxr-xr-x 2 user portfolio 4096 Feb 25 12:34 .&lt;/p&gt;\n            &lt;p&gt;drwxr-xr-x 10 user portfolio 4096 Feb 25 12:34 ..&lt;/p&gt;\n            &lt;p&gt;\n              -rw-r--r-- 1 user portfolio 220 Feb 25 12:34\n              &lt;span class=&quot;text-file&quot;\n                &gt;&lt;a href=&quot;mailto:contact@example.com&quot; class=&quot;email-link&quot;\n                  &gt;email.txt&lt;/a\n                &gt;&lt;/span\n              &gt;\n            &lt;/p&gt;\n            &lt;p&gt;\n              -rw-r--r-- 1 user portfolio 220 Feb 25 12:34\n              &lt;span class=&quot;text-file&quot;\n                &gt;&lt;a\n                  href=&quot;https://github.com/username&quot;\n                  target=&quot;_blank&quot;\n                  class=&quot;github-link&quot;\n                  &gt;github.txt&lt;/a\n                &gt;&lt;/span\n              &gt;\n            &lt;/p&gt;\n            &lt;p&gt;\n              -rw-r--r-- 1 user portfolio 220 Feb 25 12:34\n              &lt;span class=&quot;text-file&quot;\n                &gt;&lt;a\n                  href=&quot;https://linkedin.com/in/username&quot;\n                  target=&quot;_blank&quot;\n                  class=&quot;linkedin-link&quot;\n                  &gt;linkedin.txt&lt;/a\n                &gt;&lt;/span\n              &gt;\n            &lt;/p&gt;\n          &lt;/div&gt;\n\n          &lt;div class=&quot;terminal-line&quot;&gt;\n            &lt;div class=&quot;terminal-prompt&quot;&gt;\n              &lt;span class=&quot;terminal-user&quot;&gt;user&lt;/span&gt;\n              &lt;span&gt;@&lt;/span&gt;\n              &lt;span class=&quot;terminal-host&quot;&gt;portfolio&lt;/span&gt;\n              &lt;span&gt;:&lt;/span&gt;\n              &lt;span class=&quot;terminal-path&quot;&gt;~&lt;/span&gt;\n              &lt;span&gt;$&lt;/span&gt;\n            &lt;/div&gt;\n            &lt;div class=&quot;terminal-command&quot;&gt;cat contact_policy.txt&lt;/div&gt;\n          &lt;/div&gt;\n\n          &lt;div class=&quot;terminal-output&quot;&gt;\n            &lt;p&gt;I typically respond to messages within 24-48 hours.&lt;/p&gt;\n            &lt;p&gt;\n              For urgent inquiries, please include &quot;URGENT&quot; in your email\n              subject line.\n            &lt;/p&gt;\n            &lt;p style=&quot;color: var(--color-light-green)&quot;&gt;\n              Current availability for new projects:\n              &lt;span class=&quot;success-text&quot; style=&quot;text-decoration: underline;&quot;&gt;OPEN&lt;/span&gt;\n            &lt;/p&gt;\n          &lt;/div&gt;\n\n          &lt;div class=&quot;terminal-line&quot;&gt;\n            &lt;div class=&quot;terminal-prompt&quot;&gt;\n              &lt;span class=&quot;terminal-user&quot;&gt;user&lt;/span&gt;\n              &lt;span&gt;@&lt;/span&gt;\n              &lt;span class=&quot;terminal-host&quot;&gt;portfolio&lt;/span&gt;\n              &lt;span&gt;:&lt;/span&gt;\n              &lt;span class=&quot;terminal-path&quot;&gt;~&lt;/span&gt;\n              &lt;span&gt;$&lt;/span&gt;\n            &lt;/div&gt;\n            &lt;div class=&quot;terminal-command&quot;&gt;./preferred_contact_method.sh&lt;/div&gt;\n          &lt;/div&gt;\n\n          &lt;div class=&quot;terminal-output&quot;&gt;\n            &lt;p&gt;Email is my preferred method of initial contact.&lt;/p&gt;\n            &lt;p&gt;Please include the following information:&lt;/p&gt;\n            &lt;p&gt;- Your name&lt;/p&gt;\n            &lt;p&gt;- Project overview/requirements&lt;/p&gt;\n            &lt;p&gt;- Timeline expectations&lt;/p&gt;\n            &lt;p&gt;- Any additional relevant details&lt;/p&gt;\n          &lt;/div&gt;\n\n          &lt;div class=&quot;terminal-line&quot;&gt;\n            &lt;div class=&quot;terminal-prompt&quot;&gt;\n              &lt;span class=&quot;terminal-user&quot;&gt;user&lt;/span&gt;\n              &lt;span&gt;@&lt;/span&gt;\n              &lt;span class=&quot;terminal-host&quot;&gt;portfolio&lt;/span&gt;\n              &lt;span&gt;:&lt;/span&gt;\n              &lt;span class=&quot;terminal-path&quot;&gt;~&lt;/span&gt;\n              &lt;span&gt;$&lt;/span&gt;\n            &lt;/div&gt;\n            &lt;div class=&quot;terminal-command blink-cursor&quot;&gt;&lt;/div&gt;\n          &lt;/div&gt;\n        &lt;/div&gt;\n      &lt;/div&gt;\n    &lt;/main&gt;\n    &lt;footer&gt;&lt;/footer&gt;\n    &lt;script src=&quot;./assets/script.js&quot;&gt;&lt;/script&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n",
  "data": {
    "assets": {
      "Dissertation.pdf": "[Binary File]"
    },
    "blogs": {
      "welcome-to-my-blog.json": "{\n  &quot;id&quot;: &quot;welcome-to-my-blog&quot;,\n  &quot;title&quot;: &quot;Welcome to My Blog: The Beginning of a Tech Journey&quot;,\n  &quot;date&quot;: &quot;March 4 2025&quot;,\n  &quot;author&quot;: &quot;DEV_NAME_&quot;,\n  &quot;tags&quot;: [&quot;Introduction&quot;, &quot;Personal&quot;, &quot;Development&quot;],\n  &quot;content&quot;: &quot;&lt;p&gt;Welcome to my first blog on my website! Hopefully this&#039;ll be the first of many, many blogs that I do, that&#039;ll range from software development, to all manners of cybersecurity stuff! I&#039;ll try and keep them all fun, informative, and reflective of anything cool I make!&lt;/p&gt;&lt;br&gt;&lt;p&gt;I&#039;ll try my best to write a blog twice a month, and hopefully once a week, however quality will be prioritised over quantity, of course. Hopefully you&#039;ll enjoy all my blogs, have a look at a few of my projects, and have a tinker at the interactive terminal I&#039;ve made (which will hopefully have more and more stuff in it over time!)&lt;/p&gt;&lt;h2&gt;What to Expect&lt;/h2&gt;&lt;p&gt;In the coming weeks and months, I plan to share:&lt;/p&gt;&lt;br&gt;&lt;ul&gt;&lt;li&gt;Tutorials and walkthroughs of interesting coding problems&lt;/li&gt;&lt;li&gt;Cybersecurity insights and discoveries&lt;/li&gt;&lt;li&gt;Deep dives into technologies I&#039;m currently exploring&lt;/li&gt;&lt;li&gt;Updates on personal projects I&#039;m working on&lt;/li&gt;&lt;li&gt;Reflections on my learning journey&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;About Me&lt;/h2&gt;&lt;p&gt;For those who don&#039;t know me yet, I&#039;m a developer with a passion for cybersecurity and creating useful, interactive web applications. This portfolio site is both a showcase of my work and a playground where I can experiment with new ideas.&lt;/p&gt;&lt;br&gt;&lt;p&gt;The interactive terminal you might have noticed is one such experiment - it&#039;s designed to be both functional and fun, giving you a different way to explore my portfolio. I&#039;ll be adding more commands and features to it over time!&lt;/p&gt;&lt;h2&gt;Let&#039;s Connect&lt;/h2&gt;&lt;p&gt;I&#039;m always open to feedback, questions, or just a friendly chat about tech. Don&#039;t hesitate to reach out if you find something interesting here or have suggestions for future topics.&lt;/p&gt;&lt;br&gt;&lt;p&gt;Thanks for stopping by, and I hope you&#039;ll join me on this journey!&lt;/p&gt;&lt;br&gt;&lt;p&gt;- Iolo&lt;/p&gt;&quot;\n}"
    },
    "blogs.json": "{\n  &quot;posts&quot;: [\n    {\n      &quot;id&quot;: &quot;welcome-to-my-blog&quot;,\n      &quot;title&quot;: &quot;Welcome to My Blog Page!&quot;,\n      &quot;date&quot;: &quot;March 4, 2025&quot;,\n      &quot;excerpt&quot;: &quot;An introduction to my blog where I&#039;ll be sharing insights on software development, cybersecurity, and my personal projects including the interactive terminal.&quot;,\n      &quot;tags&quot;: [&quot;Introduction&quot;, &quot;Personal&quot;, &quot;Development&quot;]\n    }\n  ]\n}\n",
    "profile.json": "{\n  &quot;name&quot;: &quot;Iolo Evans Jones&quot;,\n  &quot;title&quot;: &quot;Cybersecurity Specialist &amp; Developer&quot;,\n  &quot;bio&quot;: &quot;&lt;p&gt;I&#039;m a cybersecurity specialist with a strong programming background, currently pursuing a master&#039;s degree in Cybersecurity With Technology (NCSC accredited) at Cardiff University. My work combines security principles with efficient development practices.&lt;/p&gt;&lt;br&gt;&lt;p&gt;Having achieved a 1st class honors in Computer Science, I&#039;m now focused on SOC analysis, security automation, and penetration testing. I&#039;m actively developing my skills on TryHackMe (top 10%) while creating tools that enhance digital security.&lt;/p&gt;&quot;,\n  &quot;skills&quot;: [\n    &quot;Python&quot;,\n    &quot;JavaScript/TypeScript&quot;,\n    &quot;React&quot;,\n    &quot;Tailwind CSS&quot;,\n    &quot;Bash Scripting&quot;,\n    &quot;Security Analysis&quot;,\n    &quot;Digital Forensics&quot;,\n    &quot;Network Security&quot;\n  ]\n}",
    "projects": {
      "all-sorts.json": "{\n  &quot;id&quot;: &quot;all-sorts&quot;,\n  &quot;title&quot;: &quot;All-Sorts&quot;,\n  &quot;description&quot;: &quot;An advanced algorithm visualization platform showcasing 15+ sorting algorithms through real-time, interactive visualizations.&quot;,\n  &quot;date&quot;: &quot;2024-08-15&quot;,\n  &quot;tags&quot;: [&quot;React&quot;, &quot;TypeScript&quot;, &quot;Tailwind CSS&quot;, &quot;Algorithms&quot;, &quot;Interactive&quot;],\n  &quot;github&quot;: &quot;https://github.com/ioloEJ42/All-Sorts&quot;,\n  &quot;live&quot;: &quot;https://all-sorts.netlify.app/&quot;,\n  &quot;content&quot;: &quot;&lt;h2&gt;Project Overview&lt;/h2&gt;&lt;p&gt;All-Sorts is a modern, interactive sorting algorithm visualization platform that brings complex computer science concepts to life. The application allows users to visualize 15+ sorting algorithms in real-time, with customizable array sizes and sorting speeds, making it an excellent educational tool for understanding algorithm efficiency and behavior.&lt;/p&gt;&lt;h2&gt;Algorithm Categories&lt;/h2&gt;&lt;h3&gt;Logarithmic (O(n log n))&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;Quick Sort&lt;/li&gt;&lt;li&gt;Merge Sort&lt;/li&gt;&lt;li&gt;Heap Sort&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;Quadratic (O(n²))&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;Bubble Sort&lt;/li&gt;&lt;li&gt;Selection Sort&lt;/li&gt;&lt;li&gt;Insertion Sort&lt;/li&gt;&lt;li&gt;Shell Sort&lt;/li&gt;&lt;li&gt;Comb Sort&lt;/li&gt;&lt;li&gt;Brick Sort&lt;/li&gt;&lt;li&gt;Cocktail Sort&lt;/li&gt;&lt;li&gt;Pancake Sort&lt;/li&gt;&lt;li&gt;Gnome Sort&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;Unique &amp; Experimental&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;Bitonic Sort (requires power-of-2 arrays)&lt;/li&gt;&lt;li&gt;Bogo Sort&lt;/li&gt;&lt;li&gt;Radix Sort&lt;/li&gt;&lt;li&gt;Stooge Sort&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Technical Features&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Real-time Visualization Engine:&lt;/strong&gt; Watch algorithms work step-by-step with visual feedback&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Interactive Controls:&lt;/strong&gt; Adjust array size (5-200 elements) and sorting speed&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Abort Control System:&lt;/strong&gt; Stop sorting operations at any time&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Visual State Indicators:&lt;/strong&gt; Color-coded elements showing comparison, sorting, and completion states&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Responsive Design:&lt;/strong&gt; Works seamlessly across device sizes&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Smooth Transitions:&lt;/strong&gt; Page transitions and UI animations enhance user experience&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Technical Implementation&lt;/h2&gt;&lt;p&gt;The project is built with a modern web technology stack:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;React 18 with TypeScript:&lt;/strong&gt; For a robust, type-safe component architecture&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Tailwind CSS:&lt;/strong&gt; Utility-first CSS framework for styling&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Framer Motion:&lt;/strong&gt; For smooth animations and transitions&lt;/li&gt;&lt;li&gt;&lt;strong&gt;React Router:&lt;/strong&gt; For application navigation&lt;/li&gt;&lt;li&gt;&lt;strong&gt;React Hot Toast:&lt;/strong&gt; For user notifications&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Vite:&lt;/strong&gt; For fast development and optimized builds&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Architecture&lt;/h2&gt;&lt;p&gt;The application follows a modular architecture with clear separation of concerns:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Algorithms Module:&lt;/strong&gt; Pure TypeScript implementations of sorting algorithms&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Visualization Engine:&lt;/strong&gt; React components that render and animate the sorting process&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Control System:&lt;/strong&gt; Interactive UI elements for controlling the visualization&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Type System:&lt;/strong&gt; Comprehensive TypeScript definitions ensuring code reliability&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Educational Value&lt;/h2&gt;&lt;p&gt;All-Sorts serves as both a practical tool and an educational resource:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Visualizes algorithm behavior in real-time&lt;/li&gt;&lt;li&gt;Illustrates time complexity differences between algorithm categories&lt;/li&gt;&lt;li&gt;Provides algorithm descriptions and complexity information&lt;/li&gt;&lt;li&gt;Allows direct comparison between different sorting approaches&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;This project demonstrates my ability to implement complex algorithms, create interactive visualizations, and build educational tools using modern web technologies. It also showcases my understanding of computer science fundamentals and UI/UX design principles.&lt;/p&gt;&quot;\n}\n",
      "ascii-art-generator.json": "{\n  &quot;id&quot;: &quot;ascii-art-generator&quot;,\n  &quot;title&quot;: &quot;ASCII Art Generator&quot;,\n  &quot;description&quot;: &quot;An interactive web application for creating, customizing, and exporting ASCII art with multiple shapes, patterns, and export options.&quot;,\n  &quot;date&quot;: &quot;2024-09-20&quot;,\n  &quot;tags&quot;: [&quot;React&quot;, &quot;TypeScript&quot;, &quot;Tailwind CSS&quot;, &quot;Vite&quot;, &quot;Interactive&quot;],\n  &quot;github&quot;: &quot;https://github.com/ioloEJ42/ASCII-GEN&quot;,\n  &quot;live&quot;: &quot;https://ascii-gen.netlify.app/&quot;,\n  &quot;content&quot;: &quot;&lt;h2&gt;Project Overview&lt;/h2&gt;&lt;p&gt;The ASCII Art Generator is a short little project compromising of a web application that allows users to create, customize, and export ASCII art. &lt;/p&gt;&lt;h2&gt;Key Features&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Dynamic Shape Generation:&lt;/strong&gt; Choose from multiple shapes including circle, square, triangle, heart, octagon, star, and diamond&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Customizable Patterns:&lt;/strong&gt; Apply various patterns to your shapes, including animated options like wave, spiral, and pulsate&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Real-time Color Management:&lt;/strong&gt; Customize background, main, and accent colors with an intuitive color picker&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Interactive Resizing:&lt;/strong&gt; Resize your ASCII art in real-time with a draggable interface&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Multiple Export Options:&lt;/strong&gt; Save your creation as JPG, PNG, animated GIF, or even as a React component&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Responsive Design:&lt;/strong&gt; Fully responsive layout that works on desktop and mobile devices&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Dark Mode:&lt;/strong&gt; Toggle between light and dark themes for comfortable viewing&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Keyboard Shortcuts:&lt;/strong&gt; Enhance productivity with easy-to-use keyboard shortcuts&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Technical Implementation&lt;/h2&gt;&lt;p&gt;The project leverages several modern web technologies:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;React.js with TypeScript:&lt;/strong&gt; For a robust, type-safe component architecture&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Vite:&lt;/strong&gt; Next-generation front-end tooling for faster development and optimized builds&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Tailwind CSS:&lt;/strong&gt; Utility-first CSS framework for rapid UI development&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Shadcn UI:&lt;/strong&gt; Re-usable components built with Radix UI and Tailwind CSS&lt;/li&gt;&lt;li&gt;&lt;strong&gt;HTML2Canvas:&lt;/strong&gt; For rendering and capturing the ASCII art as an image&lt;/li&gt;&lt;li&gt;&lt;strong&gt;GIF.js:&lt;/strong&gt; Enables the creation of animated GIFs from the ASCII art&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Performance Considerations&lt;/h2&gt;&lt;p&gt;The application includes several performance optimizations:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Efficient re-rendering using React&#039;s useCallback and useMemo hooks&lt;/li&gt;&lt;li&gt;Optimized art generation algorithm to handle large ASCII art sizes&lt;/li&gt;&lt;li&gt;Lazy loading of export functionalities to reduce initial load time&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;User Experience&lt;/h2&gt;&lt;p&gt;The application provides an intuitive interface with:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Separate tabs for shape selection, pattern customization, and color management&lt;/li&gt;&lt;li&gt;Real-time preview of changes&lt;/li&gt;&lt;li&gt;Convenient keyboard shortcuts for common actions&lt;/li&gt;&lt;li&gt;Multiple export options to suit different needs&lt;/li&gt;&lt;li&gt;Responsive design that works across devices&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Accessibility&lt;/h2&gt;&lt;p&gt;Accessibility was a key consideration, with features like:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Proper ARIA labels on interactive elements&lt;/li&gt;&lt;li&gt;Keyboard navigation support&lt;/li&gt;&lt;li&gt;Color contrast considerations in the UI design&lt;/li&gt;&lt;li&gt;Screen reader-friendly content structure&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;This project demonstrates my ability to create complex, interactive web applications with a focus on user experience, performance, and accessibility.&lt;/p&gt;&quot;\n}\n",
      "file-integrity-monitor.json": "{\n  &quot;id&quot;: &quot;file-integrity-monitor&quot;,\n  &quot;title&quot;: &quot;File Integrity Monitor&quot;,\n  &quot;description&quot;: &quot;A Python-based security tool for real-time file system monitoring with cryptographic verification and comprehensive reporting.&quot;,\n  &quot;date&quot;: &quot;2024-10-15&quot;,\n  &quot;tags&quot;: [&quot;Python&quot;, &quot;Security&quot;, &quot;Watchdog&quot;, &quot;SQLite&quot;, &quot;PDF Reporting&quot;],\n  &quot;github&quot;: &quot;https://github.com/ioloEJ42/File_Integrity_Monitor&quot;,\n  &quot;live&quot;: &quot;N/A&quot;,\n  &quot;content&quot;: &quot;&lt;h2&gt;Project Overview&lt;/h2&gt;&lt;p&gt;File Integrity Monitor (FIM) is a robust Python-based security tool that provides real-time monitoring and integrity verification of files within specified directories. The tool tracks file system events including creation, modification, deletion, and renaming, while maintaining detailed logs with user attribution and cryptographic hashes.&lt;/p&gt;&lt;h2&gt;Key Features&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Real-time Monitoring:&lt;/strong&gt; Detects and records file system events as they happen&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Cryptographic Verification:&lt;/strong&gt; Uses SHA-256 hashing to detect unauthorized content changes&lt;/li&gt;&lt;li&gt;&lt;strong&gt;User Attribution:&lt;/strong&gt; Tracks which user performed each file operation&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Cross-Platform Support:&lt;/strong&gt; Works on Windows, Unix, and WSL with path normalization&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Database Integration:&lt;/strong&gt; Maintains event history in SQLite database&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Advanced Reporting:&lt;/strong&gt; Exports detailed logs in CSV and PDF formats with visualizations&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Interactive Interface:&lt;/strong&gt; Color-coded terminal output for different event types&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Technical Implementation&lt;/h2&gt;&lt;p&gt;The project uses several key technologies and libraries:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Watchdog:&lt;/strong&gt; For efficient event-based file system monitoring&lt;/li&gt;&lt;li&gt;&lt;strong&gt;SQLite:&lt;/strong&gt; For persistent storage of file hashes and event logs&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Reportlab:&lt;/strong&gt; For generating comprehensive PDF reports with analytics&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Rich:&lt;/strong&gt; For enhanced terminal output and user experience&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Security Considerations&lt;/h2&gt;&lt;p&gt;File integrity monitoring is a crucial aspect of cybersecurity, especially for systems that require high levels of compliance. This tool helps detect unauthorized changes to important files by:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Creating a baseline of known-good hashes&lt;/li&gt;&lt;li&gt;Continuously monitoring for changes to files&lt;/li&gt;&lt;li&gt;Alerting when unexpected modifications occur&lt;/li&gt;&lt;li&gt;Providing forensic evidence of file system activities&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Architecture&lt;/h2&gt;&lt;p&gt;The project is structured with separation of concerns in mind:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Core Monitoring:&lt;/strong&gt; Main file handling event detection and processing&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Database Layer:&lt;/strong&gt; Data persistence and retrieval&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Export Module:&lt;/strong&gt; Reporting capabilities with visualizations&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Test Framework:&lt;/strong&gt; Automated testing of monitoring capabilities&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;This modular approach allows for easy extension of functionality and makes the codebase maintainable.&lt;/p&gt;&quot;\n}\n",
      "minimal-dashboard.json": "{\n  &quot;id&quot;: &quot;minimal-dashboard&quot;,\n  &quot;title&quot;: &quot;Minimal Dashboard&quot;,\n  &quot;description&quot;: &quot;A custom browser homepage with search functionality, organized links, and integrated Linux command references.&quot;,\n  &quot;date&quot;: &quot;2025-01-05&quot;,\n  &quot;tags&quot;: [&quot;HTML&quot;, &quot;CSS&quot;, &quot;JavaScript&quot;],\n  &quot;github&quot;: &quot;https://github.com/ioloEJ42/ioloEJ42.github.io&quot;,\n  &quot;live&quot;: &quot;https://ioloej42.github.io/&quot;,\n  &quot;content&quot;: &quot;&lt;p&gt;A clean, efficient browser homepage I built to replace the default new tab page. Designed with speed and simplicity in mind while including the features I personally needed.&lt;/p&gt;&lt;h2&gt;Features&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;Multi-engine search functionality (DuckDuckGo, Google, Bing)&lt;/li&gt;&lt;li&gt;Organized link categories for quick access to frequently used sites&lt;/li&gt;&lt;li&gt;Real-time clock display&lt;/li&gt;&lt;li&gt;Built-in reference sheets for Linux commands (i3WM, tmux, nano)&lt;/li&gt;&lt;li&gt;Minimal design with dot grid background&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Why I Built It&lt;/h2&gt;&lt;p&gt;I created this dashboard to have complete control over my browsing experience. My motivations included:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Having quick access to Linux documentation and resources&lt;/li&gt;&lt;li&gt;Creating an easily accessible reference for command shortcuts&lt;/li&gt;&lt;li&gt;Implementing a cleaner, darker aesthetic I prefer&lt;/li&gt;&lt;li&gt;Building something lightweight with zero dependencies&lt;/li&gt;&lt;li&gt;Having full ownership of the code rather than relying on extensions&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Implementation&lt;/h2&gt;&lt;p&gt;Built with vanilla HTML, CSS, and JavaScript - no frameworks, no build tools, no overhead. The entire dashboard loads instantly and runs entirely in the browser.&lt;/p&gt;&quot;\n}",
      "password-strength-analyser.json": "{\n  &quot;id&quot;: &quot;password-strength-analyser&quot;,\n  &quot;title&quot;: &quot;Password Strength Analyser&quot;,\n  &quot;description&quot;: &quot;A real-time password strength assessment tool with visual indicators, pattern detection, and custom recommendations.&quot;,\n  &quot;date&quot;: &quot;2025-03-01&quot;,\n  &quot;tags&quot;: [&quot;HTML&quot;, &quot;CSS&quot;, &quot;JavaScript&quot;, &quot;Security&quot;, &quot;Frontend&quot;],\n  &quot;github&quot;: &quot;https://github.com/ioloEJ42/Password-strength-checker&quot;,\n  &quot;live&quot;: &quot;https://pwd-checker.netlify.app/&quot;,\n  &quot;content&quot;: &quot;&lt;h2&gt;Project Overview&lt;/h2&gt;&lt;p&gt;In my honest opinion, a password strength checker is just the security equivalent of \\&quot;Hello World\\&quot;, so consider this an obligatory entry project.&lt;/p&gt;&lt;p&gt;This analyser provides real-time feedback on password strength without any unnecessary complexity or feature bloat. Just pure, straightforward password analysis.&lt;/p&gt;&lt;h2&gt;Key Features&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Real-time Analysis:&lt;/strong&gt; Immediate feedback as you type&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Visual Strength Meter:&lt;/strong&gt; Color-coded segments showing password strength from 0-100&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Basic Requirements Checking:&lt;/strong&gt; Length, uppercase, lowercase, numbers, special characters&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Advanced Pattern Detection:&lt;/strong&gt; Identifies common passwords, repeated characters, sequential patterns, and personal information&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Terminal-style Recommendations:&lt;/strong&gt; Custom, actionable advice to improve password security&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Clean, Responsive UI:&lt;/strong&gt; Works on all devices without unnecessary visual clutter&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Technical Implementation&lt;/h2&gt;&lt;p&gt;Built with vanilla web technologies to demonstrate core fundamentals:&lt;/p&gt;&lt;br&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;HTML5:&lt;/strong&gt; Semantic structure for the analyser interface&lt;/li&gt;&lt;li&gt;&lt;strong&gt;CSS3:&lt;/strong&gt; Custom styling for visual indicators and responsive design&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Vanilla JavaScript:&lt;/strong&gt; No frameworks or libraries - just clean, efficient code&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Security Aspects&lt;/h2&gt;&lt;p&gt;The analyser implements several key security principles:&lt;/p&gt;&lt;br&gt;&lt;ul&gt;&lt;li&gt;Password complexity assessment using multiple criteria&lt;/li&gt;&lt;li&gt;Common password database comparison&lt;/li&gt;&lt;li&gt;Pattern recognition algorithms to detect weak security patterns&lt;/li&gt;&lt;li&gt;Security-focused UI with password visibility toggle&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;While it&#039;s a simple project, it demonstrates fundamental security concepts that form the foundation of more complex security applications. Sometimes the most important security tools are the ones that help users create better passwords in the first place.&lt;/p&gt;&quot;\n}\n",
      "steganography-dissertation.json": "{\n    &quot;id&quot;: &quot;steganography-dissertation&quot;,\n    &quot;title&quot;: &quot;Undergraduate Dissertation: Integrative Approaches to Digital Steganography&quot;,\n    &quot;description&quot;: &quot;A comprehensive educational platform exploring seven steganography techniques with LSB implementation, a recommendation system, and quality assessment tools.&quot;,\n    &quot;date&quot;: &quot;2024-05-01&quot;,\n    &quot;tags&quot;: [&quot;Python&quot;, &quot;React&quot;, &quot;Tailwind CSS&quot;, &quot;Steganography&quot;, &quot;Cybersecurity&quot;, &quot;Educational&quot;],\n    &quot;github&quot;: &quot;https://github.com/ioloEJ42/UnderGraduate_Dissertation&quot;,\n    &quot;live&quot;: &quot;N/A&quot;,\n    &quot;content&quot;: &quot;&lt;p&gt;This dissertation provides a comprehensive examination of steganography, with a specific focus on the development of innovative scripts, tools, and educational resources designed to enhance the application and understanding of steganography in digital communication.&lt;/p&gt;&lt;h2&gt;Key Achievements&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;Developed a fully functional LSB steganography script capable of embedding text and binary data in images&lt;/li&gt;&lt;li&gt;Created a PSNR and MSE calculation tool for quantitative steganographic quality assessment&lt;/li&gt;&lt;li&gt;Designed a recommendation system to guide users in selecting appropriate steganography techniques&lt;/li&gt;&lt;li&gt;Built comprehensive educational modules covering seven steganography techniques&lt;/li&gt;&lt;li&gt;Implemented a prototype framework for future steganographic implementations&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Steganography Techniques Explored&lt;/h2&gt;&lt;p&gt;The platform provides educational content on seven key steganography techniques:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Least Significant Bit (LSB)&lt;/li&gt;&lt;li&gt;Discrete Cosine Transform (DCT)&lt;/li&gt;&lt;li&gt;Discrete Wavelet Transform (DWT)&lt;/li&gt;&lt;li&gt;Discrete Fourier Transform (DFT)&lt;/li&gt;&lt;li&gt;Bit-Plane Complexity Segmentation (BPCS)&lt;/li&gt;&lt;li&gt;Palette-Based Steganography&lt;/li&gt;&lt;li&gt;Fractal Steganography&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Technical Implementation&lt;/h2&gt;&lt;p&gt;The project was implemented using multiple technologies:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Python with OpenCV and NumPy for the LSB steganography script and quality assessment tools&lt;/li&gt;&lt;li&gt;React with Tailwind CSS for the educational web platform&lt;/li&gt;&lt;li&gt;Material-UI for interactive components and tabbed interfaces&lt;/li&gt;&lt;li&gt;Modular architecture to facilitate future expansions&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Novel Contributions&lt;/h2&gt;&lt;p&gt;The dissertation introduces several novel elements to the field:&lt;/p&gt;&lt;br&gt;&lt;ul&gt;&lt;li&gt;Integration of a recommendation system for method selection based on user requirements&lt;/li&gt;&lt;li&gt;Evaluation of embedding quality using advanced metrics (NMSE, PSNR)&lt;/li&gt;&lt;li&gt;A comprehensive framework for future steganography implementations&lt;/li&gt;&lt;li&gt;Educational modules with interactive elements and pseudocode examples&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;The project successfully bridges the gap between theoretical knowledge and practical application in steganography, making complex concepts accessible to students, researchers, and cybersecurity professionals.&lt;/p&gt;&quot;\n  }"
    },
    "projects.json": "{\n  &quot;projects&quot;: [\n    {\n      &quot;id&quot;: &quot;minimal-dashboard&quot;,\n      &quot;title&quot;: &quot;Minimal Dashboard&quot;,\n      &quot;date&quot;: &quot;2024-08-15&quot;,\n      &quot;description&quot;: &quot;A minimalist browser dashboard with search functionality and customizable links.&quot;,\n      &quot;tags&quot;: [&quot;HTML&quot;, &quot;CSS&quot;, &quot;JavaScript&quot;],\n      &quot;thumbnail&quot;: &quot;dashboard-thumb.png&quot;\n    },\n    {\n      &quot;id&quot;: &quot;file-integrity-monitor&quot;,\n      &quot;title&quot;: &quot;File Integrity Monitor&quot;,\n      &quot;date&quot;: &quot;2024-08-15&quot;,\n      &quot;description&quot;: &quot;A Python-based security tool for real-time file system monitoring with cryptographic verification and comprehensive reporting.&quot;,\n      &quot;tags&quot;: [&quot;Python&quot;, &quot;Security&quot;, &quot;Watchdog&quot;, &quot;SQLite&quot;, &quot;PDF Reporting&quot;]\n    },\n    {\n      &quot;id&quot;: &quot;ascii-art-generator&quot;,\n      &quot;title&quot;: &quot;ASCII Art Generator&quot;,\n      &quot;date&quot;: &quot;2024-08-15&quot;,\n      &quot;description&quot;: &quot;An interactive web application for creating, customizing, and exporting ASCII art with multiple shapes, patterns, and export options.&quot;,\n      &quot;tags&quot;: [&quot;React&quot;, &quot;TypeScript&quot;, &quot;Tailwind CSS&quot;, &quot;Vite&quot;, &quot;Interactive&quot;]\n    },\n    {\n      &quot;id&quot;: &quot;all-sorts&quot;,\n      &quot;title&quot;: &quot;All-Sorts&quot;,\n      &quot;date&quot;: &quot;2024-08-15&quot;,\n      &quot;description&quot;: &quot;An advanced algorithm visualization platform showcasing 15+ sorting algorithms through real-time, interactive visualizations.&quot;,\n      &quot;tags&quot;: [\n        &quot;React&quot;,\n        &quot;TypeScript&quot;,\n        &quot;Tailwind CSS&quot;,\n        &quot;Algorithms&quot;,\n        &quot;Interactive&quot;\n      ]\n    },\n    {\n      &quot;id&quot;: &quot;password-strength-analyser&quot;,\n      &quot;title&quot;: &quot;Password Strength Analyser&quot;,\n      &quot;date&quot;: &quot;2025-03-01&quot;,\n      &quot;description&quot;: &quot;A real-time password strength assessment tool with visual indicators, pattern detection, and custom recommendations.&quot;,\n      &quot;tags&quot;: [&quot;HTML&quot;, &quot;CSS&quot;, &quot;JavaScript&quot;, &quot;Security&quot;, &quot;Frontend&quot;]\n    },\n    {\n      &quot;id&quot;: &quot;steganography-dissertation&quot;,\n      &quot;title&quot;: &quot;Undergraduate Dissertation: Integrative Approaches to Digital Steganography&quot;,\n      &quot;date&quot;: &quot;2024-05-01&quot;,\n      &quot;description&quot;: &quot;A comprehensive educational platform exploring seven steganography techniques with LSB implementation, a recommendation system, and quality assessment tools.&quot;,\n      &quot;tags&quot;: [&quot;Python&quot;, &quot;React&quot;, &quot;Tailwind CSS&quot;, &quot;Steganography&quot;, &quot;Cybersecurity&quot;, &quot;Educational&quot;]\n    }\n  ]\n}\n"
  },
  "editor.html": "&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n  &lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot; /&gt;\n    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;\n    &lt;title&gt;Portfolio Content Editor&lt;/title&gt;\n    &lt;style&gt;\n      /* Minimal styling for maximum efficiency */\n      body {\n        font-family: system-ui, -apple-system, sans-serif;\n        margin: 0;\n        padding: 20px;\n        line-height: 1.5;\n        max-width: 1200px;\n        margin: 0 auto;\n        color: #333;\n      }\n\n      header {\n        margin-bottom: 20px;\n        border-bottom: 1px solid #ddd;\n        padding-bottom: 10px;\n      }\n\n      .tabs {\n        display: flex;\n        margin-bottom: 20px;\n      }\n\n      .tab {\n        padding: 8px 16px;\n        border: 1px solid #ccc;\n        background: #f5f5f5;\n        cursor: pointer;\n        margin-right: 5px;\n      }\n\n      .tab.active {\n        background: #1a73e8;\n        color: white;\n        border-color: #1a73e8;\n      }\n\n      .tab-content {\n        display: none;\n      }\n\n      .tab-content.active {\n        display: block;\n      }\n\n      h1,\n      h2,\n      h3 {\n        margin-top: 0;\n      }\n\n      input,\n      textarea,\n      select {\n        width: 100%;\n        padding: 8px;\n        margin-bottom: 10px;\n        border: 1px solid #ccc;\n        border-radius: 4px;\n        box-sizing: border-box;\n        font-family: inherit;\n      }\n\n      button {\n        padding: 8px 16px;\n        background: #1a73e8;\n        color: white;\n        border: none;\n        border-radius: 4px;\n        cursor: pointer;\n        margin-right: 10px;\n      }\n\n      button.secondary {\n        background: #f5f5f5;\n        color: #333;\n        border: 1px solid #ccc;\n      }\n\n      button.danger {\n        background: #d93025;\n      }\n\n      textarea {\n        min-height: 200px;\n      }\n\n      .form-section {\n        margin-bottom: 20px;\n      }\n\n      .tags-container {\n        display: flex;\n        flex-wrap: wrap;\n        gap: 5px;\n        margin-top: 5px;\n      }\n\n      .tag {\n        background: #e8f0fe;\n        border: 1px solid #aec9ff;\n        border-radius: 4px;\n        padding: 2px 8px;\n        display: flex;\n        align-items: center;\n      }\n\n      .tag-remove {\n        margin-left: 5px;\n        cursor: pointer;\n        color: #666;\n      }\n\n      .preview {\n        border: 1px solid #ddd;\n        padding: 15px;\n        margin-top: 20px;\n        border-radius: 4px;\n        background: #f9f9f9;\n        overflow-x: auto;\n      }\n\n      .toolbar {\n        background: #f5f5f5;\n        padding: 5px;\n        margin-bottom: 0;\n        border: 1px solid #ccc;\n        border-bottom: none;\n        border-radius: 4px 4px 0 0;\n        display: flex;\n        flex-wrap: wrap;\n        gap: 5px;\n      }\n\n      .toolbar button {\n        margin: 0;\n        padding: 4px 8px;\n        font-size: 12px;\n      }\n\n      .editor-container {\n        margin-bottom: 20px;\n      }\n\n      .notification {\n        position: fixed;\n        bottom: 20px;\n        right: 20px;\n        padding: 15px 20px;\n        background: #323232;\n        color: white;\n        border-radius: 4px;\n        opacity: 0;\n        transition: opacity 0.3s;\n        z-index: 1000;\n      }\n\n      .notification.show {\n        opacity: 1;\n      }\n\n      .notification.error {\n        background: #d93025;\n      }\n\n      .list-container {\n        margin-bottom: 20px;\n      }\n\n      .list-item {\n        padding: 10px;\n        border: 1px solid #ddd;\n        border-radius: 4px;\n        margin-bottom: 10px;\n      }\n\n      .tags {\n        display: flex;\n        flex-wrap: wrap;\n        gap: 5px;\n        margin-top: 5px;\n      }\n\n      .tag-pill {\n        background: #e8f0fe;\n        padding: 2px 8px;\n        border-radius: 12px;\n        font-size: 12px;\n      }\n\n      .form-group {\n        margin-bottom: 15px;\n      }\n\n      label {\n        display: block;\n        margin-bottom: 5px;\n        font-weight: 500;\n      }\n\n      small {\n        color: #666;\n        display: block;\n        margin-top: 2px;\n      }\n\n      .btn-group {\n        margin-top: 20px;\n        display: flex;\n        gap: 10px;\n      }\n\n      pre {\n        white-space: pre-wrap;\n      }\n    &lt;/style&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;header&gt;\n      &lt;h1&gt;Portfolio Content Editor&lt;/h1&gt;\n      &lt;p&gt;Create and edit content for your portfolio site&lt;/p&gt;\n    &lt;/header&gt;\n\n    &lt;div class=&quot;tabs&quot;&gt;\n      &lt;div class=&quot;tab active&quot; data-tab=&quot;projects&quot;&gt;Projects&lt;/div&gt;\n      &lt;div class=&quot;tab&quot; data-tab=&quot;blogs&quot;&gt;Blogs&lt;/div&gt;\n    &lt;/div&gt;\n\n    &lt;!-- Projects Tab --&gt;\n    &lt;div id=&quot;projects-tab&quot; class=&quot;tab-content active&quot;&gt;\n      &lt;div id=&quot;projects-list&quot; class=&quot;list-container&quot;&gt;\n        &lt;p id=&quot;projects-loading&quot;&gt;Loading projects...&lt;/p&gt;\n      &lt;/div&gt;\n\n      &lt;div class=&quot;btn-group&quot;&gt;\n        &lt;button id=&quot;new-project-btn&quot;&gt;New Project&lt;/button&gt;\n        &lt;button id=&quot;load-project-btn&quot; class=&quot;secondary&quot;&gt;\n          Load Selected Project\n        &lt;/button&gt;\n      &lt;/div&gt;\n\n      &lt;div id=&quot;project-form-container&quot; style=&quot;display: none&quot;&gt;\n        &lt;h2 id=&quot;project-form-title&quot;&gt;New Project&lt;/h2&gt;\n\n        &lt;form id=&quot;project-form&quot;&gt;\n          &lt;div class=&quot;form-section&quot;&gt;\n            &lt;h3&gt;Metadata (projects.json)&lt;/h3&gt;\n\n            &lt;div class=&quot;form-group&quot;&gt;\n              &lt;label for=&quot;project-id&quot;&gt;Project ID&lt;/label&gt;\n              &lt;input\n                type=&quot;text&quot;\n                id=&quot;project-id&quot;\n                required\n                placeholder=&quot;project-name-slug&quot;\n              /&gt;\n              &lt;small\n                &gt;Use lowercase letters, numbers and hyphens only. This will be\n                used in URLs.&lt;/small\n              &gt;\n            &lt;/div&gt;\n\n            &lt;div class=&quot;form-group&quot;&gt;\n              &lt;label for=&quot;project-title&quot;&gt;Title&lt;/label&gt;\n              &lt;input\n                type=&quot;text&quot;\n                id=&quot;project-title&quot;\n                required\n                placeholder=&quot;Project Title&quot;\n              /&gt;\n            &lt;/div&gt;\n\n            &lt;div class=&quot;form-group&quot;&gt;\n              &lt;label for=&quot;project-description&quot;&gt;Short Description&lt;/label&gt;\n              &lt;textarea\n                id=&quot;project-description&quot;\n                required\n                placeholder=&quot;A brief description for project listings&quot;\n                rows=&quot;3&quot;\n              &gt;&lt;/textarea&gt;\n            &lt;/div&gt;\n\n            &lt;div class=&quot;form-group&quot;&gt;\n              &lt;label&gt;\n                &lt;input type=&quot;checkbox&quot; id=&quot;project-featured&quot; /&gt;\n                Featured Project (shown on homepage)\n              &lt;/label&gt;\n            &lt;/div&gt;\n\n            &lt;div class=&quot;form-group&quot;&gt;\n              &lt;label for=&quot;project-tags-input&quot;&gt;Tags&lt;/label&gt;\n              &lt;div style=&quot;display: flex; gap: 10px&quot;&gt;\n                &lt;input\n                  type=&quot;text&quot;\n                  id=&quot;project-tags-input&quot;\n                  placeholder=&quot;Add tag and press Enter&quot;\n                /&gt;\n                &lt;button type=&quot;button&quot; id=&quot;add-project-tag&quot; class=&quot;secondary&quot;&gt;\n                  Add\n                &lt;/button&gt;\n              &lt;/div&gt;\n              &lt;div id=&quot;project-tags-container&quot; class=&quot;tags-container&quot;&gt;&lt;/div&gt;\n            &lt;/div&gt;\n          &lt;/div&gt;\n\n          &lt;div class=&quot;form-section&quot;&gt;\n            &lt;h3&gt;Content (projects/[id].json)&lt;/h3&gt;\n\n            &lt;div class=&quot;form-group&quot;&gt;\n              &lt;label for=&quot;project-date&quot;&gt;Date&lt;/label&gt;\n              &lt;input type=&quot;date&quot; id=&quot;project-date&quot; required /&gt;\n            &lt;/div&gt;\n\n            &lt;div class=&quot;form-group&quot;&gt;\n              &lt;label for=&quot;project-github&quot;&gt;GitHub URL (optional)&lt;/label&gt;\n              &lt;input\n                type=&quot;url&quot;\n                id=&quot;project-github&quot;\n                placeholder=&quot;https://github.com/username/repo&quot;\n              /&gt;\n            &lt;/div&gt;\n\n            &lt;div class=&quot;form-group&quot;&gt;\n              &lt;label for=&quot;project-live&quot;&gt;Live Demo URL (optional)&lt;/label&gt;\n              &lt;input\n                type=&quot;url&quot;\n                id=&quot;project-live&quot;\n                placeholder=&quot;https://example.com&quot;\n              /&gt;\n            &lt;/div&gt;\n\n            &lt;div class=&quot;form-group&quot;&gt;\n              &lt;label for=&quot;project-content&quot;&gt;Full HTML Content&lt;/label&gt;\n              &lt;div class=&quot;editor-container&quot;&gt;\n                &lt;div class=&quot;toolbar&quot;&gt;\n                  &lt;button type=&quot;button&quot; data-format=&quot;h2&quot;&gt;H2&lt;/button&gt;\n                  &lt;button type=&quot;button&quot; data-format=&quot;h3&quot;&gt;H3&lt;/button&gt;\n                  &lt;button type=&quot;button&quot; data-format=&quot;p&quot;&gt;P&lt;/button&gt;\n                  &lt;button type=&quot;button&quot; data-format=&quot;strong&quot;&gt;Bold&lt;/button&gt;\n                  &lt;button type=&quot;button&quot; data-format=&quot;em&quot;&gt;Italic&lt;/button&gt;\n                  &lt;button type=&quot;button&quot; data-format=&quot;ul&quot;&gt;List&lt;/button&gt;\n                  &lt;button type=&quot;button&quot; data-format=&quot;ol&quot;&gt;Numbered List&lt;/button&gt;\n                  &lt;button type=&quot;button&quot; data-format=&quot;li&quot;&gt;List Item&lt;/button&gt;\n                  &lt;button type=&quot;button&quot; data-format=&quot;a&quot;&gt;Link&lt;/button&gt;\n                  &lt;button type=&quot;button&quot; data-format=&quot;code&quot;&gt;Code&lt;/button&gt;\n                &lt;/div&gt;\n                &lt;textarea\n                  id=&quot;project-content&quot;\n                  required\n                  placeholder=&quot;&lt;p&gt;Project full description with HTML formatting&lt;/p&gt;&quot;\n                &gt;&lt;/textarea&gt;\n              &lt;/div&gt;\n            &lt;/div&gt;\n          &lt;/div&gt;\n\n          &lt;div class=&quot;btn-group&quot;&gt;\n            &lt;button type=&quot;button&quot; id=&quot;preview-project-btn&quot; class=&quot;secondary&quot;&gt;\n              Preview JSON\n            &lt;/button&gt;\n            &lt;button type=&quot;button&quot; id=&quot;save-project-btn&quot;&gt;\n              Generate &amp; Download JSON Files\n            &lt;/button&gt;\n            &lt;button type=&quot;button&quot; id=&quot;cancel-project-btn&quot; class=&quot;danger&quot;&gt;\n              Cancel\n            &lt;/button&gt;\n          &lt;/div&gt;\n        &lt;/form&gt;\n\n        &lt;div id=&quot;project-preview&quot; class=&quot;preview&quot; style=&quot;display: none&quot;&gt;\n          &lt;h3&gt;JSON Preview&lt;/h3&gt;\n          &lt;h4&gt;projects.json entry:&lt;/h4&gt;\n          &lt;pre id=&quot;project-meta-preview&quot;&gt;&lt;/pre&gt;\n\n          &lt;h4&gt;projects/[id].json file:&lt;/h4&gt;\n          &lt;pre id=&quot;project-content-preview&quot;&gt;&lt;/pre&gt;\n\n          &lt;div class=&quot;btn-group&quot;&gt;\n            &lt;button id=&quot;close-project-preview-btn&quot; class=&quot;secondary&quot;&gt;\n              Close Preview\n            &lt;/button&gt;\n          &lt;/div&gt;\n        &lt;/div&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n\n    &lt;!-- Blogs Tab --&gt;\n    &lt;div id=&quot;blogs-tab&quot; class=&quot;tab-content&quot;&gt;\n      &lt;div id=&quot;blogs-list&quot; class=&quot;list-container&quot;&gt;\n        &lt;p id=&quot;blogs-loading&quot;&gt;Loading blog posts...&lt;/p&gt;\n      &lt;/div&gt;\n\n      &lt;div class=&quot;btn-group&quot;&gt;\n        &lt;button id=&quot;new-blog-btn&quot;&gt;New Blog Post&lt;/button&gt;\n        &lt;button id=&quot;load-blog-btn&quot; class=&quot;secondary&quot;&gt;Load Selected Post&lt;/button&gt;\n      &lt;/div&gt;\n\n      &lt;div id=&quot;blog-form-container&quot; style=&quot;display: none&quot;&gt;\n        &lt;h2 id=&quot;blog-form-title&quot;&gt;New Blog Post&lt;/h2&gt;\n\n        &lt;form id=&quot;blog-form&quot;&gt;\n          &lt;div class=&quot;form-section&quot;&gt;\n            &lt;h3&gt;Metadata (blogs.json)&lt;/h3&gt;\n            &lt;div class=&quot;form-group&quot;&gt;\n              &lt;label for=&quot;blog-id&quot;&gt;Blog Post ID&lt;/label&gt;\n              &lt;input\n                type=&quot;text&quot;\n                id=&quot;blog-id&quot;\n                required\n                placeholder=&quot;blog-post-slug&quot;\n              /&gt;\n              &lt;small\n                &gt;Use lowercase letters, numbers and hyphens only. This will be\n                used in URLs.&lt;/small\n              &gt;\n            &lt;/div&gt;\n\n            &lt;div class=&quot;form-group&quot;&gt;\n              &lt;label for=&quot;blog-title&quot;&gt;Title&lt;/label&gt;\n              &lt;input\n                type=&quot;text&quot;\n                id=&quot;blog-title&quot;\n                required\n                placeholder=&quot;Blog Post Title&quot;\n              /&gt;\n            &lt;/div&gt;\n\n            &lt;div class=&quot;form-group&quot;&gt;\n              &lt;label for=&quot;blog-date&quot;&gt;Date&lt;/label&gt;\n              &lt;input\n                type=&quot;text&quot;\n                id=&quot;blog-date&quot;\n                required\n                placeholder=&quot;February 28, 2025&quot;\n              /&gt;\n            &lt;/div&gt;\n\n            &lt;div class=&quot;form-group&quot;&gt;\n              &lt;label for=&quot;blog-author&quot;&gt;Author&lt;/label&gt;\n              &lt;input\n                type=&quot;text&quot;\n                id=&quot;blog-author&quot;\n                required\n                placeholder=&quot;Your Name&quot;\n              /&gt;\n            &lt;/div&gt;\n\n            &lt;div class=&quot;form-group&quot;&gt;\n              &lt;label for=&quot;blog-excerpt&quot;&gt;Excerpt&lt;/label&gt;\n              &lt;textarea\n                id=&quot;blog-excerpt&quot;\n                required\n                placeholder=&quot;A brief excerpt for blog listings&quot;\n                rows=&quot;3&quot;\n              &gt;&lt;/textarea&gt;\n            &lt;/div&gt;\n\n            &lt;div class=&quot;form-group&quot;&gt;\n              &lt;label for=&quot;blog-tags-input&quot;&gt;Tags&lt;/label&gt;\n              &lt;div style=&quot;display: flex; gap: 10px&quot;&gt;\n                &lt;input\n                  type=&quot;text&quot;\n                  id=&quot;blog-tags-input&quot;\n                  placeholder=&quot;Add tag and press Enter&quot;\n                /&gt;\n                &lt;button type=&quot;button&quot; id=&quot;add-blog-tag&quot; class=&quot;secondary&quot;&gt;\n                  Add\n                &lt;/button&gt;\n              &lt;/div&gt;\n              &lt;div id=&quot;blog-tags-container&quot; class=&quot;tags-container&quot;&gt;&lt;/div&gt;\n            &lt;/div&gt;\n          &lt;/div&gt;\n\n          &lt;div class=&quot;form-section&quot;&gt;\n            &lt;h3&gt;Content (blogs/[id].json)&lt;/h3&gt;\n\n            &lt;div class=&quot;form-group&quot;&gt;\n              &lt;label for=&quot;blog-content&quot;&gt;Full HTML Content&lt;/label&gt;\n              &lt;div class=&quot;editor-container&quot;&gt;\n                &lt;div class=&quot;toolbar&quot;&gt;\n                  &lt;button type=&quot;button&quot; data-format=&quot;h2&quot;&gt;H2&lt;/button&gt;\n                  &lt;button type=&quot;button&quot; data-format=&quot;h3&quot;&gt;H3&lt;/button&gt;\n                  &lt;button type=&quot;button&quot; data-format=&quot;p&quot;&gt;P&lt;/button&gt;\n                  &lt;button type=&quot;button&quot; data-format=&quot;strong&quot;&gt;Bold&lt;/button&gt;\n                  &lt;button type=&quot;button&quot; data-format=&quot;em&quot;&gt;Italic&lt;/button&gt;\n                  &lt;button type=&quot;button&quot; data-format=&quot;ul&quot;&gt;List&lt;/button&gt;\n                  &lt;button type=&quot;button&quot; data-format=&quot;ol&quot;&gt;Numbered List&lt;/button&gt;\n                  &lt;button type=&quot;button&quot; data-format=&quot;li&quot;&gt;List Item&lt;/button&gt;\n                  &lt;button type=&quot;button&quot; data-format=&quot;a&quot;&gt;Link&lt;/button&gt;\n                  &lt;button type=&quot;button&quot; data-format=&quot;code&quot;&gt;Code&lt;/button&gt;\n                &lt;/div&gt;\n                &lt;textarea\n                  id=&quot;blog-content&quot;\n                  required\n                  placeholder=&quot;&lt;p&gt;Blog post full content with HTML formatting&lt;/p&gt;&quot;\n                &gt;&lt;/textarea&gt;\n              &lt;/div&gt;\n            &lt;/div&gt;\n          &lt;/div&gt;\n\n          &lt;div class=&quot;btn-group&quot;&gt;\n            &lt;button type=&quot;button&quot; id=&quot;preview-blog-btn&quot; class=&quot;secondary&quot;&gt;\n              Preview JSON\n            &lt;/button&gt;\n            &lt;button type=&quot;button&quot; id=&quot;save-blog-btn&quot;&gt;\n              Generate &amp; Download JSON Files\n            &lt;/button&gt;\n            &lt;button type=&quot;button&quot; id=&quot;cancel-blog-btn&quot; class=&quot;danger&quot;&gt;\n              Cancel\n            &lt;/button&gt;\n          &lt;/div&gt;\n        &lt;/form&gt;\n\n        &lt;div id=&quot;blog-preview&quot; class=&quot;preview&quot; style=&quot;display: none&quot;&gt;\n          &lt;h3&gt;JSON Preview&lt;/h3&gt;\n          &lt;h4&gt;blogs.json entry:&lt;/h4&gt;\n          &lt;pre id=&quot;blog-meta-preview&quot;&gt;&lt;/pre&gt;\n\n          &lt;h4&gt;blogs/[id].json file:&lt;/h4&gt;\n          &lt;pre id=&quot;blog-content-preview&quot;&gt;&lt;/pre&gt;\n\n          &lt;div class=&quot;btn-group&quot;&gt;\n            &lt;button id=&quot;close-blog-preview-btn&quot; class=&quot;secondary&quot;&gt;\n              Close Preview\n            &lt;/button&gt;\n          &lt;/div&gt;\n        &lt;/div&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n\n    &lt;div id=&quot;notification&quot; class=&quot;notification&quot;&gt;&lt;/div&gt;\n\n    &lt;script&gt;\n      // Cache for storing loaded data\n      const dataCache = {\n        projectsMetadata: null,\n        blogMetadata: null,\n        projects: {},\n        blogs: {},\n      };\n\n      // DOM Elements\n      const projectsList = document.getElementById(&quot;projects-list&quot;);\n      const blogsList = document.getElementById(&quot;blogs-list&quot;);\n      const projectForm = document.getElementById(&quot;project-form&quot;);\n      const blogForm = document.getElementById(&quot;blog-form&quot;);\n      const projectFormContainer = document.getElementById(\n        &quot;project-form-container&quot;\n      );\n      const blogFormContainer = document.getElementById(&quot;blog-form-container&quot;);\n      const notification = document.getElementById(&quot;notification&quot;);\n\n      // Tab Switching\n      document.querySelectorAll(&quot;.tab&quot;).forEach((tab) =&gt; {\n        tab.addEventListener(&quot;click&quot;, () =&gt; {\n          // Update tab buttons\n          document\n            .querySelectorAll(&quot;.tab&quot;)\n            .forEach((t) =&gt; t.classList.remove(&quot;active&quot;));\n          tab.classList.add(&quot;active&quot;);\n\n          // Show the corresponding tab content\n          document\n            .querySelectorAll(&quot;.tab-content&quot;)\n            .forEach((content) =&gt; content.classList.remove(&quot;active&quot;));\n          document\n            .getElementById(`${tab.dataset.tab}-tab`)\n            .classList.add(&quot;active&quot;);\n        });\n      });\n\n      // Show notification\n      function showNotification(message, isError = false) {\n        notification.textContent = message;\n        notification.className = &quot;notification&quot; + (isError ? &quot; error&quot; : &quot;&quot;);\n        notification.classList.add(&quot;show&quot;);\n\n        setTimeout(() =&gt; {\n          notification.classList.remove(&quot;show&quot;);\n        }, 3000);\n      }\n\n      // Load JSON data\n      async function loadData(filename) {\n        try {\n          const response = await fetch(`data/${filename}.json`);\n\n          if (!response.ok) {\n            throw new Error(\n              `Failed to load ${filename}.json: ${response.status}`\n            );\n          }\n\n          return await response.json();\n        } catch (error) {\n          console.error(`Error loading ${filename}.json:`, error);\n          showNotification(\n            `Error loading ${filename}.json: ${error.message}`,\n            true\n          );\n          return null;\n        }\n      }\n\n      // Load projects\n      async function loadProjects() {\n        if (dataCache.projectsMetadata) {\n          return dataCache.projectsMetadata;\n        }\n\n        const data = await loadData(&quot;projects&quot;);\n        if (data) {\n          dataCache.projectsMetadata = data;\n        }\n        return data;\n      }\n\n      // Load blogs\n      async function loadBlogs() {\n        if (dataCache.blogMetadata) {\n          return dataCache.blogMetadata;\n        }\n\n        const data = await loadData(&quot;blogs&quot;);\n        if (data) {\n          dataCache.blogMetadata = data;\n        }\n        return data;\n      }\n\n      // Load individual project\n      async function loadProject(id) {\n        if (dataCache.projects[id]) {\n          return dataCache.projects[id];\n        }\n\n        const data = await loadData(`projects/${id}`);\n        if (data) {\n          dataCache.projects[id] = data;\n        }\n        return data;\n      }\n\n      // Load individual blog\n      async function loadBlog(id) {\n        if (dataCache.blogs[id]) {\n          return dataCache.blogs[id];\n        }\n\n        const data = await loadData(`blogs/${id}`);\n        if (data) {\n          dataCache.blogs[id] = data;\n        }\n        return data;\n      }\n\n      // Display projects list\n      async function displayProjects() {\n        projectsList.innerHTML = &quot;&lt;p&gt;Loading projects...&lt;/p&gt;&quot;;\n\n        const projectsData = await loadProjects();\n\n        if (\n          !projectsData ||\n          !projectsData.projects ||\n          projectsData.projects.length === 0\n        ) {\n          projectsList.innerHTML = &quot;&lt;p&gt;No projects found.&lt;/p&gt;&quot;;\n          return;\n        }\n\n        let html = &#039;&lt;select id=&quot;project-select&quot; style=&quot;margin-bottom: 15px;&quot;&gt;&#039;;\n        projectsData.projects.forEach((project) =&gt; {\n          html += `&lt;option value=&quot;${project.id}&quot;&gt;${project.title}&lt;/option&gt;`;\n        });\n        html += &quot;&lt;/select&gt;&quot;;\n\n        html += &quot;&lt;div&gt;&quot;;\n        projectsData.projects.forEach((project) =&gt; {\n          html += `\n          &lt;div class=&quot;list-item&quot;&gt;\n            &lt;h3&gt;${project.title}&lt;/h3&gt;\n            &lt;p&gt;&lt;strong&gt;ID:&lt;/strong&gt; ${project.id}&lt;/p&gt;\n            &lt;p&gt;${project.description}&lt;/p&gt;\n            &lt;div class=&quot;tags&quot;&gt;\n              ${project.tags\n                .map((tag) =&gt; `&lt;span class=&quot;tag-pill&quot;&gt;${tag}&lt;/span&gt;`)\n                .join(&quot;&quot;)}\n            &lt;/div&gt;\n            ${project.featured ? &quot;&lt;p&gt;&lt;strong&gt;✓ Featured&lt;/strong&gt;&lt;/p&gt;&quot; : &quot;&quot;}\n          &lt;/div&gt;\n        `;\n        });\n        html += &quot;&lt;/div&gt;&quot;;\n\n        projectsList.innerHTML = html;\n      }\n\n      // Display blogs list\n      async function displayBlogs() {\n        blogsList.innerHTML = &quot;&lt;p&gt;Loading blog posts...&lt;/p&gt;&quot;;\n\n        const blogsData = await loadBlogs();\n\n        if (!blogsData || !blogsData.posts || blogsData.posts.length === 0) {\n          blogsList.innerHTML = &quot;&lt;p&gt;No blog posts found.&lt;/p&gt;&quot;;\n          return;\n        }\n\n        let html = &#039;&lt;select id=&quot;blog-select&quot; style=&quot;margin-bottom: 15px;&quot;&gt;&#039;;\n        blogsData.posts.forEach((post) =&gt; {\n          html += `&lt;option value=&quot;${post.id}&quot;&gt;${post.title}&lt;/option&gt;`;\n        });\n        html += &quot;&lt;/select&gt;&quot;;\n\n        html += &quot;&lt;div&gt;&quot;;\n        blogsData.posts.forEach((post) =&gt; {\n          html += `\n          &lt;div class=&quot;list-item&quot;&gt;\n            &lt;h3&gt;${post.title}&lt;/h3&gt;\n            &lt;p&gt;&lt;strong&gt;ID:&lt;/strong&gt; ${post.id}&lt;/p&gt;\n            &lt;p&gt;&lt;strong&gt;Date:&lt;/strong&gt; ${post.date}&lt;/p&gt;\n            &lt;p&gt;${post.excerpt || &quot;&quot;}&lt;/p&gt;\n            &lt;div class=&quot;tags&quot;&gt;\n              ${post.tags\n                .map((tag) =&gt; `&lt;span class=&quot;tag-pill&quot;&gt;${tag}&lt;/span&gt;`)\n                .join(&quot;&quot;)}\n            &lt;/div&gt;\n          &lt;/div&gt;\n        `;\n        });\n        html += &quot;&lt;/div&gt;&quot;;\n\n        blogsList.innerHTML = html;\n      }\n\n      // Initialize page\n      async function init() {\n        // Load projects and blogs lists\n        await displayProjects();\n        await displayBlogs();\n\n        // Setup event listeners\n        setupEventListeners();\n      }\n\n      // Setup event listeners\n      function setupEventListeners() {\n        // Projects\n        document\n          .getElementById(&quot;new-project-btn&quot;)\n          .addEventListener(&quot;click&quot;, createNewProject);\n        document\n          .getElementById(&quot;load-project-btn&quot;)\n          .addEventListener(&quot;click&quot;, loadSelectedProject);\n        document\n          .getElementById(&quot;preview-project-btn&quot;)\n          .addEventListener(&quot;click&quot;, previewProject);\n        document\n          .getElementById(&quot;save-project-btn&quot;)\n          .addEventListener(&quot;click&quot;, saveProject);\n        document\n          .getElementById(&quot;cancel-project-btn&quot;)\n          .addEventListener(&quot;click&quot;, cancelProject);\n        document\n          .getElementById(&quot;close-project-preview-btn&quot;)\n          .addEventListener(&quot;click&quot;, closeProjectPreview);\n        document\n          .getElementById(&quot;add-project-tag&quot;)\n          .addEventListener(&quot;click&quot;, addProjectTag);\n\n        // Add tag on Enter key\n        document\n          .getElementById(&quot;project-tags-input&quot;)\n          .addEventListener(&quot;keypress&quot;, (e) =&gt; {\n            if (e.key === &quot;Enter&quot;) {\n              e.preventDefault();\n              addProjectTag();\n            }\n          });\n\n        // Blogs\n        document\n          .getElementById(&quot;new-blog-btn&quot;)\n          .addEventListener(&quot;click&quot;, createNewBlog);\n        document\n          .getElementById(&quot;load-blog-btn&quot;)\n          .addEventListener(&quot;click&quot;, loadSelectedBlog);\n        document\n          .getElementById(&quot;preview-blog-btn&quot;)\n          .addEventListener(&quot;click&quot;, previewBlog);\n        document\n          .getElementById(&quot;save-blog-btn&quot;)\n          .addEventListener(&quot;click&quot;, saveBlog);\n        document\n          .getElementById(&quot;cancel-blog-btn&quot;)\n          .addEventListener(&quot;click&quot;, cancelBlog);\n        document\n          .getElementById(&quot;close-blog-preview-btn&quot;)\n          .addEventListener(&quot;click&quot;, closeBlogPreview);\n        document\n          .getElementById(&quot;add-blog-tag&quot;)\n          .addEventListener(&quot;click&quot;, addBlogTag);\n\n        // Add tag on Enter key\n        document\n          .getElementById(&quot;blog-tags-input&quot;)\n          .addEventListener(&quot;keypress&quot;, (e) =&gt; {\n            if (e.key === &quot;Enter&quot;) {\n              e.preventDefault();\n              addBlogTag();\n            }\n          });\n\n        // Editor toolbar buttons\n        document.querySelectorAll(&quot;.toolbar button&quot;).forEach((button) =&gt; {\n          button.addEventListener(&quot;click&quot;, () =&gt; {\n            const format = button.dataset.format;\n            const targetId =\n              button.closest(&quot;.tab-content&quot;).id === &quot;projects-tab&quot;\n                ? &quot;project-content&quot;\n                : &quot;blog-content&quot;;\n            const textarea = document.getElementById(targetId);\n\n            const start = textarea.selectionStart;\n            const end = textarea.selectionEnd;\n            const selectedText = textarea.value.substring(start, end);\n            let replacement = &quot;&quot;;\n\n            switch (format) {\n              case &quot;h2&quot;:\n                replacement = `&lt;h2&gt;${selectedText || &quot;Heading 2&quot;}&lt;/h2&gt;`;\n                break;\n              case &quot;h3&quot;:\n                replacement = `&lt;h3&gt;${selectedText || &quot;Heading 3&quot;}&lt;/h3&gt;`;\n                break;\n              case &quot;p&quot;:\n                replacement = `&lt;p&gt;${selectedText || &quot;Paragraph text&quot;}&lt;/p&gt;`;\n                break;\n              case &quot;strong&quot;:\n                replacement = `&lt;strong&gt;${selectedText || &quot;Bold text&quot;}&lt;/strong&gt;`;\n                break;\n              case &quot;em&quot;:\n                replacement = `&lt;em&gt;${selectedText || &quot;Italic text&quot;}&lt;/em&gt;`;\n                break;\n              case &quot;ul&quot;:\n                replacement = `&lt;ul&gt;\\n  &lt;li&gt;${\n                  selectedText || &quot;List item&quot;\n                }&lt;/li&gt;\\n&lt;/ul&gt;`;\n                break;\n              case &quot;ol&quot;:\n                replacement = `&lt;ol&gt;\\n  &lt;li&gt;${\n                  selectedText || &quot;List item&quot;\n                }&lt;/li&gt;\\n&lt;/ol&gt;`;\n                break;\n              case &quot;li&quot;:\n                replacement = `&lt;li&gt;${selectedText || &quot;List item&quot;}&lt;/li&gt;`;\n                break;\n              case &quot;a&quot;:\n                const url = prompt(&quot;Enter URL:&quot;, &quot;https://&quot;);\n                if (url) {\n                  replacement = `&lt;a href=&quot;${url}&quot;&gt;${selectedText || url}&lt;/a&gt;`;\n                } else {\n                  return;\n                }\n                break;\n              case &quot;code&quot;:\n                replacement = `&lt;code&gt;${selectedText || &quot;Code&quot;}&lt;/code&gt;`;\n                break;\n            }\n\n            textarea.focus();\n            document.execCommand(&quot;insertText&quot;, false, replacement);\n\n            // Fallback for browsers that don&#039;t support execCommand\n            if (\n              textarea.value.substring(start, start + replacement.length) !==\n              replacement\n            ) {\n              const value = textarea.value;\n              textarea.value =\n                value.substring(0, start) + replacement + value.substring(end);\n            }\n          });\n        });\n      }\n\n      // Project Functions\n      function createNewProject() {\n        // Reset form\n        projectForm.reset();\n        document.getElementById(&quot;project-tags-container&quot;).innerHTML = &quot;&quot;;\n        document.getElementById(&quot;project-form-title&quot;).textContent =\n          &quot;New Project&quot;;\n\n        // Set today&#039;s date\n        const today = new Date().toISOString().split(&quot;T&quot;)[0];\n        document.getElementById(&quot;project-date&quot;).value = today;\n\n        // Show form\n        projectFormContainer.style.display = &quot;block&quot;;\n        document.getElementById(&quot;project-preview&quot;).style.display = &quot;none&quot;;\n        projectsList.style.display = &quot;none&quot;;\n        document.querySelector(&quot;#projects-tab .btn-group&quot;).style.display =\n          &quot;none&quot;;\n      }\n\n      async function loadSelectedProject() {\n        const select = document.getElementById(&quot;project-select&quot;);\n        if (!select) {\n          showNotification(&quot;No projects available to load&quot;, true);\n          return;\n        }\n\n        const projectId = select.value;\n        if (!projectId) {\n          showNotification(&quot;Please select a project to load&quot;, true);\n          return;\n        }\n\n        // Get project metadata\n        const projectsData = await loadProjects();\n        const projectMeta = projectsData.projects.find(\n          (p) =&gt; p.id === projectId\n        );\n\n        if (!projectMeta) {\n          showNotification(\n            `Project with ID ${projectId} not found in projects.json`,\n            true\n          );\n          return;\n        }\n\n        // Get project content\n        const projectContent = await loadProject(projectId);\n\n        if (!projectContent) {\n          showNotification(\n            `Could not load content for project ${projectId}`,\n            true\n          );\n          return;\n        }\n\n        // Fill the form\n        document.getElementById(\n          &quot;project-form-title&quot;\n        ).textContent = `Edit Project: ${projectMeta.title}`;\n        document.getElementById(&quot;project-id&quot;).value = projectMeta.id;\n        document.getElementById(&quot;project-title&quot;).value = projectMeta.title;\n        document.getElementById(&quot;project-description&quot;).value =\n          projectMeta.description;\n        document.getElementById(&quot;project-featured&quot;).checked =\n          projectMeta.featured || false;\n\n        // Fill tags\n        const tagsContainer = document.getElementById(&quot;project-tags-container&quot;);\n        tagsContainer.innerHTML = &quot;&quot;;\n        projectMeta.tags.forEach((tag) =&gt; {\n          addTagElement(tag, &quot;project&quot;);\n        });\n\n        // Fill content fields\n        if (projectContent.date) {\n          document.getElementById(&quot;project-date&quot;).value = formatDateForInput(\n            projectContent.date\n          );\n        }\n\n        if (projectContent.github) {\n          document.getElementById(&quot;project-github&quot;).value =\n            projectContent.github;\n        }\n\n        if (projectContent.live) {\n          document.getElementById(&quot;project-live&quot;).value = projectContent.live;\n        }\n\n        document.getElementById(&quot;project-content&quot;).value =\n          projectContent.content || &quot;&quot;;\n\n        // Show form\n        projectFormContainer.style.display = &quot;block&quot;;\n        document.getElementById(&quot;project-preview&quot;).style.display = &quot;none&quot;;\n        projectsList.style.display = &quot;none&quot;;\n        document.querySelector(&quot;#projects-tab .btn-group&quot;).style.display =\n          &quot;none&quot;;\n\n        showNotification(`Loaded project: ${projectMeta.title}`);\n      }\n\n      function formatDateForInput(dateString) {\n        // Try to parse the date string\n        const date = new Date(dateString);\n        if (isNaN(date.getTime())) {\n          // If parsing fails, return the original string\n          return dateString;\n        }\n\n        // Format as YYYY-MM-DD for input[type=&quot;date&quot;]\n        return date.toISOString().split(&quot;T&quot;)[0];\n      }\n\n      function addProjectTag() {\n        const input = document.getElementById(&quot;project-tags-input&quot;);\n        const tag = input.value.trim();\n\n        if (tag) {\n          addTagElement(tag, &quot;project&quot;);\n          input.value = &quot;&quot;;\n        }\n      }\n\n      function addTagElement(tag, type) {\n        const container = document.getElementById(`${type}-tags-container`);\n\n        // Check if tag already exists\n        const existingTags = container.querySelectorAll(&quot;.tag-text&quot;);\n        for (const existingTag of existingTags) {\n          if (existingTag.textContent === tag) {\n            return; // Don&#039;t add duplicate tags\n          }\n        }\n\n        const tagElement = document.createElement(&quot;div&quot;);\n        tagElement.className = &quot;tag&quot;;\n\n        const tagText = document.createElement(&quot;span&quot;);\n        tagText.className = &quot;tag-text&quot;;\n        tagText.textContent = tag;\n\n        const removeButton = document.createElement(&quot;span&quot;);\n        removeButton.className = &quot;tag-remove&quot;;\n        removeButton.textContent = &quot;×&quot;;\n        removeButton.addEventListener(&quot;click&quot;, () =&gt; {\n          container.removeChild(tagElement);\n        });\n\n        tagElement.appendChild(tagText);\n        tagElement.appendChild(removeButton);\n        container.appendChild(tagElement);\n      }\n\n      function getProjectTags() {\n        const tags = [];\n        document\n          .querySelectorAll(&quot;#project-tags-container .tag-text&quot;)\n          .forEach((tag) =&gt; {\n            tags.push(tag.textContent);\n          });\n        return tags;\n      }\n\n      function previewProject() {\n        // Get form data\n        const id = document.getElementById(&quot;project -id&quot;).value.trim();\n        const title = document.getElementById(&quot;project-title&quot;).value.trim();\n        const description = document\n          .getElementById(&quot;project-description&quot;)\n          .value.trim();\n        const featured = document.getElementById(&quot;project-featured&quot;).checked;\n        const tags = getProjectTags();\n        const date = document.getElementById(&quot;project-date&quot;).value;\n        const github = document.getElementById(&quot;project-github&quot;).value.trim();\n        const live = document.getElementById(&quot;project-live&quot;).value.trim();\n        const content = document.getElementById(&quot;project-content&quot;).value.trim();\n\n        // Validate required fields\n        if (\n          !id ||\n          !title ||\n          !description ||\n          tags.length === 0 ||\n          !date ||\n          !content\n        ) {\n          showNotification(&quot;Please fill all required fields&quot;, true);\n          return;\n        }\n\n        // Create metadata object (for projects.json)\n        const metadata = {\n          id,\n          title,\n          description,\n          featured,\n          tags,\n        };\n\n        // Create full content object (for projects/[id].json)\n        const projectData = {\n          id,\n          title,\n          description,\n          date,\n          tags,\n        };\n\n        // Add optional fields\n        if (github) projectData.github = github;\n        if (live) projectData.live = live;\n\n        // Add content\n        projectData.content = content;\n\n        // Display preview\n        document.getElementById(&quot;project-meta-preview&quot;).textContent =\n          JSON.stringify(metadata, null, 2);\n        document.getElementById(&quot;project-content-preview&quot;).textContent =\n          JSON.stringify(projectData, null, 2);\n\n        // Show preview container\n        document.getElementById(&quot;project-preview&quot;).style.display = &quot;block&quot;;\n      }\n\n      function saveProject() {\n        // First preview to validate\n        previewProject();\n\n        // Check if preview is displayed (validation passed)\n        if (\n          document.getElementById(&quot;project-preview&quot;).style.display !== &quot;block&quot;\n        ) {\n          return;\n        }\n\n        // Get the JSON data\n        const metadataJson = document.getElementById(\n          &quot;project-meta-preview&quot;\n        ).textContent;\n        const contentJson = document.getElementById(\n          &quot;project-content-preview&quot;\n        ).textContent;\n\n        // Parse metadata to get ID\n        const metadata = JSON.parse(metadataJson);\n        const id = metadata.id;\n\n        // Download metadata updates for projects.json\n        downloadProjectsMetadata(metadata);\n\n        // Download individual project file\n        downloadFile(`${id}.json`, contentJson);\n\n        showNotification(`Generated JSON files for project: ${metadata.title}`);\n      }\n\n      async function downloadProjectsMetadata(newProject) {\n        try {\n          // Load current projects\n          const projectsData = await loadProjects();\n\n          if (!projectsData) {\n            // If we couldn&#039;t load existing data, create a new projects structure\n            const newData = {\n              projects: [newProject],\n            };\n            downloadFile(&quot;projects.json&quot;, JSON.stringify(newData, null, 2));\n            return;\n          }\n\n          // Check if this project already exists\n          const existingIndex = projectsData.projects.findIndex(\n            (p) =&gt; p.id === newProject.id\n          );\n\n          if (existingIndex !== -1) {\n            // Update existing project\n            projectsData.projects[existingIndex] = newProject;\n          } else {\n            // Add new project\n            projectsData.projects.push(newProject);\n          }\n\n          // Download updated projects.json\n          downloadFile(&quot;projects.json&quot;, JSON.stringify(projectsData, null, 2));\n        } catch (error) {\n          console.error(&quot;Error updating projects metadata:&quot;, error);\n          showNotification(&quot;Error updating projects metadata&quot;, true);\n        }\n      }\n\n      function cancelProject() {\n        projectFormContainer.style.display = &quot;none&quot;;\n        projectsList.style.display = &quot;block&quot;;\n        document.querySelector(&quot;#projects-tab .btn-group&quot;).style.display =\n          &quot;flex&quot;;\n      }\n\n      function closeProjectPreview() {\n        document.getElementById(&quot;project-preview&quot;).style.display = &quot;none&quot;;\n      }\n\n      // Blog Functions\n      function createNewBlog() {\n        // Reset form\n        blogForm.reset();\n        document.getElementById(&quot;blog-tags-container&quot;).innerHTML = &quot;&quot;;\n        document.getElementById(&quot;blog-form-title&quot;).textContent =\n          &quot;New Blog Post&quot;;\n\n        // Set today&#039;s date\n        const today = new Date();\n        const options = { year: &quot;numeric&quot;, month: &quot;long&quot;, day: &quot;numeric&quot; };\n        document.getElementById(&quot;blog-date&quot;).value = today.toLocaleDateString(\n          &quot;en-US&quot;,\n          options\n        );\n\n        // Show form\n        blogFormContainer.style.display = &quot;block&quot;;\n        document.getElementById(&quot;blog-preview&quot;).style.display = &quot;none&quot;;\n        blogsList.style.display = &quot;none&quot;;\n        document.querySelector(&quot;#blogs-tab .btn-group&quot;).style.display = &quot;none&quot;;\n      }\n\n      async function loadSelectedBlog() {\n        const select = document.getElementById(&quot;blog-select&quot;);\n        if (!select) {\n          showNotification(&quot;No blog posts available to load&quot;, true);\n          return;\n        }\n\n        const blogId = select.value;\n        if (!blogId) {\n          showNotification(&quot;Please select a blog post to load&quot;, true);\n          return;\n        }\n\n        // Get blog metadata\n        const blogsData = await loadBlogs();\n        const blogMeta = blogsData.posts.find((p) =&gt; p.id === blogId);\n\n        if (!blogMeta) {\n          showNotification(\n            `Blog with ID ${blogId} not found in blogs.json`,\n            true\n          );\n          return;\n        }\n\n        // Get blog content\n        const blogContent = await loadBlog(blogId);\n\n        if (!blogContent) {\n          showNotification(`Could not load content for blog ${blogId}`, true);\n          return;\n        }\n\n        // Fill the form\n        document.getElementById(\n          &quot;blog-form-title&quot;\n        ).textContent = `Edit Blog Post: ${blogMeta.title}`;\n        document.getElementById(&quot;blog-id&quot;).value = blogMeta.id;\n        document.getElementById(&quot;blog-title&quot;).value = blogMeta.title;\n        document.getElementById(&quot;blog-date&quot;).value = blogMeta.date;\n        document.getElementById(&quot;blog-author&quot;).value = blogMeta.author || &quot;&quot;;\n        document.getElementById(&quot;blog-excerpt&quot;).value = blogMeta.excerpt || &quot;&quot;;\n\n        // Fill tags\n        const tagsContainer = document.getElementById(&quot;blog-tags-container&quot;);\n        tagsContainer.innerHTML = &quot;&quot;;\n        blogMeta.tags.forEach((tag) =&gt; {\n          addTagElement(tag, &quot;blog&quot;);\n        });\n\n        // Fill content field\n        document.getElementById(&quot;blog-content&quot;).value =\n          blogContent.content || &quot;&quot;;\n\n        // Show form\n        blogFormContainer.style.display = &quot;block&quot;;\n        document.getElementById(&quot;blog-preview&quot;).style.display = &quot;none&quot;;\n        blogsList.style.display = &quot;none&quot;;\n        document.querySelector(&quot;#blogs-tab .btn-group&quot;).style.display = &quot;none&quot;;\n\n        showNotification(`Loaded blog post: ${blogMeta.title}`);\n      }\n\n      function addBlogTag() {\n        const input = document.getElementById(&quot;blog-tags-input&quot;);\n        const tag = input.value.trim();\n\n        if (tag) {\n          addTagElement(tag, &quot;blog&quot;);\n          input.value = &quot;&quot;;\n        }\n      }\n\n      function getBlogTags() {\n        const tags = [];\n        document\n          .querySelectorAll(&quot;#blog-tags-container .tag-text&quot;)\n          .forEach((tag) =&gt; {\n            tags.push(tag.textContent);\n          });\n        return tags;\n      }\n\n      function previewBlog() {\n        // Get form data\n        const id = document.getElementById(&quot;blog-id&quot;).value.trim();\n        const title = document.getElementById(&quot;blog-title&quot;).value.trim();\n        const date = document.getElementById(&quot;blog-date&quot;).value.trim();\n        const author = document.getElementById(&quot;blog-author&quot;).value.trim();\n        const excerpt = document.getElementById(&quot;blog-excerpt&quot;).value.trim();\n        const tags = getBlogTags();\n        const content = document.getElementById(&quot;blog-content&quot;).value.trim();\n\n        // Validate required fields\n        if (\n          !id ||\n          !title ||\n          !date ||\n          !author ||\n          !excerpt ||\n          tags.length === 0 ||\n          !content\n        ) {\n          showNotification(&quot;Please fill all required fields&quot;, true);\n          return;\n        }\n\n        // Create metadata object (for blogs.json)\n        const metadata = {\n          id,\n          title,\n          date,\n          author,\n          excerpt,\n          tags,\n        };\n\n        // Create full content object (for blogs/[id].json)\n        const blogData = {\n          id,\n          title,\n          date,\n          author,\n          tags,\n          content,\n        };\n\n        // Display preview\n        document.getElementById(&quot;blog-meta-preview&quot;).textContent =\n          JSON.stringify(metadata, null, 2);\n        document.getElementById(&quot;blog-content-preview&quot;).textContent =\n          JSON.stringify(blogData, null, 2);\n\n        // Show preview container\n        document.getElementById(&quot;blog-preview&quot;).style.display = &quot;block&quot;;\n      }\n\n      function saveBlog() {\n        // First preview to validate\n        previewBlog();\n\n        // Check if preview is displayed (validation passed)\n        if (document.getElementById(&quot;blog-preview&quot;).style.display !== &quot;block&quot;) {\n          return;\n        }\n\n        // Get the JSON data\n        const metadataJson =\n          document.getElementById(&quot;blog-meta-preview&quot;).textContent;\n        const contentJson = document.getElementById(\n          &quot;blog-content-preview&quot;\n        ).textContent;\n\n        // Parse metadata to get ID\n        const metadata = JSON.parse(metadataJson);\n        const id = metadata.id;\n\n        // Download metadata updates for blogs.json\n        downloadBlogsMetadata(metadata);\n\n        // Download individual blog file\n        downloadFile(`${id}.json`, contentJson);\n\n        showNotification(\n          `Generated JSON files for blog post: ${metadata.title}`\n        );\n      }\n\n      async function downloadBlogsMetadata(newBlog) {\n        try {\n          // Load current blogs\n          const blogsData = await loadBlogs();\n\n          if (!blogsData) {\n            // If we couldn&#039;t load existing data, create a new blogs structure\n            const newData = {\n              posts: [newBlog],\n            };\n            downloadFile(&quot;blogs.json&quot;, JSON.stringify(newData, null, 2));\n            return;\n          }\n\n          // Check if this blog already exists\n          const existingIndex = blogsData.posts.findIndex(\n            (p) =&gt; p.id === newBlog.id\n          );\n\n          if (existingIndex !== -1) {\n            // Update existing blog\n            blogsData.posts[existingIndex] = newBlog;\n          } else {\n            // Add new blog\n            blogsData.posts.push(newBlog);\n          }\n\n          // Download updated blogs.json\n          downloadFile(&quot;blogs.json&quot;, JSON.stringify(blogsData, null, 2));\n        } catch (error) {\n          console.error(&quot;Error updating blogs metadata:&quot;, error);\n          showNotification(&quot;Error updating blogs metadata&quot;, true);\n        }\n      }\n\n      function downloadFile(filename, content) {\n        const blob = new Blob([content], { type: &quot;application/json&quot; });\n        const url = URL.createObjectURL(blob);\n        const a = document.createElement(&quot;a&quot;);\n        a.href = url;\n        a.download = filename;\n        document.body.appendChild(a);\n        a.click();\n        document.body.removeChild(a);\n        URL.revokeObjectURL(url);\n      }\n\n      function cancelBlog() {\n        blogFormContainer.style.display = &quot;none&quot;;\n        blogsList.style.display = &quot;block&quot;;\n        document.querySelector(&quot;#blogs-tab .btn-group&quot;).style.display = &quot;flex&quot;;\n      }\n\n      function closeBlogPreview() {\n        document.getElementById(&quot;blog-preview&quot;).style.display = &quot;none&quot;;\n      }\n\n      // Initialize the page\n      document.addEventListener(&quot;DOMContentLoaded&quot;, init);\n    &lt;/script&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n",
  "images": {
    "logo.svg": "&lt;!DOCTYPE svg PUBLIC &quot;-//W3C//DTD SVG 1.1//EN&quot; &quot;http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd&quot;&gt;\n&lt;!-- Uploaded to: SVG Repo, www.svgrepo.com, Transformed by: SVG Repo Mixer Tools --&gt;\n&lt;svg width=&quot;64px&quot; height=&quot;64px&quot; viewBox=&quot;-1.6 -1.6 19.20 19.20&quot; fill=&quot;none&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; transform=&quot;rotate(0)matrix(1, 0, 0, 1, 0, 0)&quot;&gt;\n\r&lt;g id=&quot;SVGRepo_bgCarrier&quot; stroke-width=&quot;0&quot;/&gt;\n\r&lt;g id=&quot;SVGRepo_tracerCarrier&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;round&quot; stroke=&quot;#CCCCCC&quot; stroke-width=&quot;0.64&quot;/&gt;\n\r&lt;g id=&quot;SVGRepo_iconCarrier&quot;&gt; &lt;path d=&quot;M0.792725 12.2929L5.08562 8.00002L0.792725 3.70712L2.20694 2.29291L7.91405 8.00002L2.20694 13.7071L0.792725 12.2929Z&quot; fill=&quot;#ffffff&quot;/&gt; &lt;path d=&quot;M7.00006 15H15.0001V13H7.00006V15Z&quot; fill=&quot;#ffffff&quot;/&gt; &lt;/g&gt;\n\r&lt;/svg&gt;"
  },
  "index.html": "&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n  &lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot; /&gt;\n    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;\n    &lt;title&gt;PORTFOLIO_&lt;/title&gt;\n    &lt;link\n      rel=&quot;icon&quot;\n      href=&quot;./images/logo.svg&quot;\n      type=&quot;image/svg+xml&quot;\n    /&gt;\n    &lt;link rel=&quot;stylesheet&quot; href=&quot;./assets/styles.css&quot; /&gt;\n    &lt;link\n      href=&quot;https://fonts.googleapis.com/css2?family=JetBrains+Mono:wght@400;500;600;700&amp;display=swap&quot;\n      rel=&quot;stylesheet&quot;\n    /&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;div class=&quot;grid&quot;&gt;&lt;/div&gt;\n    &lt;header&gt;&lt;/header&gt;\n    &lt;main&gt;\n      &lt;div class=&quot;terminal-window&quot;&gt;\n        &lt;div class=&quot;terminal-header&quot;&gt;\n          &lt;div class=&quot;terminal-buttons&quot;&gt;\n            &lt;div class=&quot;terminal-button close&quot;&gt;&lt;/div&gt;\n            &lt;div class=&quot;terminal-button minimize&quot;&gt;&lt;/div&gt;\n            &lt;div class=&quot;terminal-button maximize&quot;&gt;&lt;/div&gt;\n          &lt;/div&gt;\n          &lt;div class=&quot;terminal-title&quot;&gt;profile@portfolio: ~&lt;/div&gt;\n        &lt;/div&gt;\n        &lt;div class=&quot;terminal-body&quot;&gt;\n          &lt;div class=&quot;terminal-line&quot;&gt;\n            &lt;div class=&quot;terminal-prompt&quot;&gt;\n              &lt;span class=&quot;terminal-user&quot;&gt;user&lt;/span&gt;\n              &lt;span&gt;@&lt;/span&gt;\n              &lt;span class=&quot;terminal-host&quot;&gt;portfolio&lt;/span&gt;\n              &lt;span&gt;:&lt;/span&gt;\n              &lt;span class=&quot;terminal-path&quot;&gt;~&lt;/span&gt;\n              &lt;span&gt;$&lt;/span&gt;\n            &lt;/div&gt;\n            &lt;div class=&quot;terminal-command&quot;&gt;whoami&lt;/div&gt;\n          &lt;/div&gt;\n          &lt;div class=&quot;terminal-output&quot;&gt;\n            &lt;h1 id=&quot;profile-name&quot;&gt;Iolo Evans Jones&lt;/h1&gt;\n            &lt;p id=&quot;profile-title&quot; class=&quot;subtitle&quot;&gt;TITLE_ / ROLE_&lt;/p&gt;\n          &lt;/div&gt;\n\n          &lt;div class=&quot;terminal-line&quot;&gt;\n            &lt;div class=&quot;terminal-prompt&quot;&gt;\n              &lt;span class=&quot;terminal-user&quot;&gt;user&lt;/span&gt;\n              &lt;span&gt;@&lt;/span&gt;\n              &lt;span class=&quot;terminal-host&quot;&gt;portfolio&lt;/span&gt;\n              &lt;span&gt;:&lt;/span&gt;\n              &lt;span class=&quot;terminal-path&quot;&gt;~&lt;/span&gt;\n              &lt;span&gt;$&lt;/span&gt;\n            &lt;/div&gt;\n            &lt;div class=&quot;terminal-command&quot;&gt;cat bio.txt&lt;/div&gt;\n          &lt;/div&gt;\n          &lt;div class=&quot;terminal-output&quot;&gt;\n            &lt;div id=&quot;profile-bio&quot; class=&quot;description&quot;&gt;&lt;/div&gt;\n          &lt;/div&gt;\n\n          &lt;div class=&quot;terminal-line&quot;&gt;\n            &lt;div class=&quot;terminal-prompt&quot;&gt;\n              &lt;span class=&quot;terminal-user&quot;&gt;user&lt;/span&gt;\n              &lt;span&gt;@&lt;/span&gt;\n              &lt;span class=&quot;terminal-host&quot;&gt;portfolio&lt;/span&gt;\n              &lt;span&gt;:&lt;/span&gt;\n              &lt;span class=&quot;terminal-path&quot;&gt;~&lt;/span&gt;\n              &lt;span&gt;$&lt;/span&gt;\n            &lt;/div&gt;\n            &lt;div class=&quot;terminal-command&quot;&gt;cat tryhackme.html&lt;/div&gt;\n          &lt;/div&gt;\n          &lt;div class=&quot;terminal-output&quot;&gt;\n            &lt;div class=&quot;tryhackme-badge&quot;&gt;\n              &lt;iframe\n                src=&quot;https://tryhackme.com/api/v2/badges/public-profile?userPublicId=3567066&quot;\n                style=&quot;border: none; width: 100%; height: 90px&quot;\n              &gt;&lt;/iframe&gt;\n            &lt;/div&gt;\n          &lt;/div&gt;\n          &lt;div class=&quot;terminal-line&quot;&gt;\n            &lt;div class=&quot;terminal-prompt&quot;&gt;\n              &lt;span class=&quot;terminal-user&quot;&gt;user&lt;/span&gt;\n              &lt;span&gt;@&lt;/span&gt;\n              &lt;span class=&quot;terminal-host&quot;&gt;portfolio&lt;/span&gt;\n              &lt;span&gt;:&lt;/span&gt;\n              &lt;span class=&quot;terminal-path&quot;&gt;~&lt;/span&gt;\n              &lt;span&gt;$&lt;/span&gt;\n            &lt;/div&gt;\n            &lt;div class=&quot;terminal-command&quot;&gt;cat github_stats.txt&lt;/div&gt;\n          &lt;/div&gt;\n          &lt;div class=&quot;terminal-output&quot;&gt;\n            &lt;h3&gt;GitHub Profile&lt;/h3&gt;\n            &lt;div id=&quot;github-profile&quot; class=&quot;loading&quot;&gt;\n              Fetching data from GitHub API...\n            &lt;/div&gt;\n          &lt;/div&gt;\n        &lt;/div&gt;\n      &lt;/div&gt;\n    &lt;/main&gt;\n    &lt;footer&gt;&lt;/footer&gt;\n    &lt;script src=&quot;./assets/script.js&quot;&gt;&lt;/script&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n",
  "interface.html": "&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n  &lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot; /&gt;\n    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;\n    &lt;title&gt;TERMINAL_ | PORTFOLIO_&lt;/title&gt;\n    &lt;link rel=&quot;icon&quot; href=&quot;./images/logo.svg&quot; type=&quot;image/svg+xml&quot; /&gt;\n    &lt;link rel=&quot;stylesheet&quot; href=&quot;./assets/styles.css&quot; /&gt;\n    &lt;link\n      href=&quot;https://fonts.googleapis.com/css2?family=JetBrains+Mono:wght@400;500;600;700&amp;display=swap&quot;\n      rel=&quot;stylesheet&quot;\n    /&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;div class=&quot;grid&quot;&gt;&lt;/div&gt;\n    &lt;header&gt;&lt;/header&gt;\n    &lt;main&gt;\n      &lt;div class=&quot;section-title&quot;&gt;\n        &lt;h2 style=&quot;margin-top: 0%;&quot;&gt;Interactive Terminal&lt;/h2&gt;\n        &lt;p&gt;Explore my portfolio through this simulated Linux terminal&lt;/p&gt;\n        &lt;p style=&quot;color: var(--color-yellow);&quot;&gt;&lt;i&gt;WIP: Just testing this ignore :)&lt;/i&gt;&lt;/p&gt;\n      &lt;/div&gt;\n\n      &lt;div class=&quot;terminal-window&quot;&gt;\n        &lt;div class=&quot;terminal-header&quot;&gt;\n          &lt;div class=&quot;terminal-title&quot;&gt;user@portfolio: ~/terminal&lt;/div&gt;\n        &lt;/div&gt;\n        &lt;div class=&quot;terminal-body interactive-terminal&quot; id=&quot;terminal&quot;&gt;\n          &lt;div class=&quot;term-output&quot;&gt;\n            &lt;p&gt;\n              &lt;span class=&quot;success-text&quot;\n                &gt;Welcome to the Portfolio Terminal Interface&lt;/span\n              &gt;\n            &lt;/p&gt;\n            &lt;p&gt;\n              Type &lt;span class=&quot;command-name&quot;&gt;help&lt;/span&gt; to see available\n              commands\n            &lt;/p&gt;\n            &lt;p&gt;\n              Type &lt;span class=&quot;command-name&quot;&gt;clear&lt;/span&gt; to clear the terminal\n            &lt;/p&gt;\n          &lt;/div&gt;\n          &lt;div class=&quot;term-input-line&quot;&gt;\n            &lt;div class=&quot;term-input-prompt&quot;&gt;\n              &lt;span class=&quot;terminal-user&quot;&gt;user&lt;/span&gt;\n              &lt;span&gt;@&lt;/span&gt;\n              &lt;span class=&quot;terminal-host&quot;&gt;portfolio&lt;/span&gt;\n              &lt;span&gt;:&lt;/span&gt;\n              &lt;span class=&quot;terminal-path&quot;&gt;~&lt;/span&gt;\n              &lt;span&gt;$&lt;/span&gt;\n            &lt;/div&gt;\n            &lt;input\n              type=&quot;text&quot;\n              class=&quot;term-input&quot;\n              id=&quot;term-input&quot;\n              autofocus\n              spellcheck=&quot;false&quot;\n              autocomplete=&quot;off&quot;\n            /&gt;\n          &lt;/div&gt;\n        &lt;/div&gt;\n      &lt;/div&gt;\n    &lt;/main&gt;\n    &lt;footer&gt;&lt;/footer&gt;\n    &lt;script src=&quot;./assets/script.js&quot;&gt;&lt;/script&gt;\n    &lt;script src=&quot;/portfolio/assets/terminal.js&quot;&gt;&lt;/script&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n",
  "path-checker.html": "&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n  &lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot; /&gt;\n    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;\n    &lt;title&gt;Portfolio Path Checker&lt;/title&gt;\n    &lt;style&gt;\n      body {\n        font-family: &quot;Inter&quot;, system-ui, sans-serif;\n        max-width: 900px;\n        margin: 0 auto;\n        padding: 20px;\n        background: #000;\n        color: #fff;\n      }\n      h1,\n      h2 {\n        border-bottom: 1px solid rgba(255, 255, 255, 0.2);\n        padding-bottom: 10px;\n      }\n      .file-test {\n        margin-bottom: 10px;\n        padding: 10px;\n        border-radius: 4px;\n      }\n      .success {\n        background-color: rgba(46, 204, 113, 0.2);\n        border: 1px solid #2ecc71;\n      }\n      .error {\n        background-color: rgba(231, 76, 60, 0.2);\n        border: 1px solid #e74c3c;\n      }\n      code {\n        font-family: monospace;\n        background: rgba(255, 255, 255, 0.1);\n        padding: 2px 4px;\n        border-radius: 3px;\n      }\n      button {\n        background: transparent;\n        border: 1px solid rgba(255, 255, 255, 0.2);\n        color: white;\n        padding: 8px 15px;\n        cursor: pointer;\n        margin: 10px 0;\n      }\n      button:hover {\n        background: rgba(255, 255, 255, 0.1);\n      }\n      .test-results {\n        margin-top: 20px;\n      }\n      .json-display {\n        background: rgba(255, 255, 255, 0.05);\n        padding: 10px;\n        border-radius: 4px;\n        max-height: 300px;\n        overflow: auto;\n        white-space: pre-wrap;\n        margin-top: 5px;\n      }\n    &lt;/style&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;h1&gt;Portfolio Path Checker&lt;/h1&gt;\n    &lt;p&gt;\n      This tool checks the paths to your project files to help debug loading\n      issues.\n    &lt;/p&gt;\n\n    &lt;button id=&quot;check-btn&quot;&gt;Run Path Checks&lt;/button&gt;\n    &lt;button id=&quot;check-json-btn&quot;&gt;Check JSON Files&lt;/button&gt;\n\n    &lt;div class=&quot;test-results&quot; id=&quot;results&quot;&gt;\n      &lt;p&gt;Click the button above to start testing.&lt;/p&gt;\n    &lt;/div&gt;\n\n    &lt;script&gt;\n      document\n        .getElementById(&quot;check-btn&quot;)\n        .addEventListener(&quot;click&quot;, runPathChecks);\n      document\n        .getElementById(&quot;check-json-btn&quot;)\n        .addEventListener(&quot;click&quot;, checkJsonFiles);\n\n      async function runPathChecks() {\n        const results = document.getElementById(&quot;results&quot;);\n        results.innerHTML = &quot;&lt;h2&gt;Running Path Checks...&lt;/h2&gt;&quot;;\n\n        // Define files to check\n        const filesToCheck = [\n          // CSS files\n          &quot;styles.css&quot;,\n          // JS files\n          &quot;components.js&quot;,\n          &quot;script.js&quot;,\n          // HTML files\n          &quot;index.html&quot;,\n          &quot;projects.html&quot;,\n          &quot;blogs.html&quot;,\n          &quot;blog.html&quot;,\n          &quot;project.html&quot;,\n          &quot;contact.html&quot;,\n          // Data directory\n          &quot;data/&quot;,\n          // JSON files\n          &quot;data/profile.json&quot;,\n          &quot;data/projects.json&quot;,\n          &quot;data/blogs.json&quot;,\n          // Project details\n          &quot;data/projects/minimal-dashboard.json&quot;,\n          // Blog posts\n          &quot;data/blogs/minimalism-in-web-design.json&quot;,\n          // External resources\n          &quot;./images/logo.svg&quot;,\n        ];\n\n        let resultsHTML = &quot;&lt;h2&gt;Path Check Results&lt;/h2&gt;&quot;;\n\n        // Check each file\n        for (const file of filesToCheck) {\n          try {\n            const response = await fetch(file);\n\n            if (response.ok) {\n              resultsHTML += `\n              &lt;div class=&quot;file-test success&quot;&gt;\n                ✅ &lt;code&gt;${file}&lt;/code&gt; - Found (${response.status})\n              &lt;/div&gt;\n            `;\n            } else {\n              resultsHTML += `\n              &lt;div class=&quot;file-test error&quot;&gt;\n                ❌ &lt;code&gt;${file}&lt;/code&gt; - Error: ${response.status} ${response.statusText}\n              &lt;/div&gt;\n            `;\n            }\n          } catch (error) {\n            resultsHTML += `\n            &lt;div class=&quot;file-test error&quot;&gt;\n              ❌ &lt;code&gt;${file}&lt;/code&gt; - Exception: ${error.message}\n            &lt;/div&gt;\n          `;\n          }\n        }\n\n        results.innerHTML = resultsHTML;\n      }\n\n      async function checkJsonFiles() {\n        const results = document.getElementById(&quot;results&quot;);\n        results.innerHTML = &quot;&lt;h2&gt;Checking JSON Files...&lt;/h2&gt;&quot;;\n\n        // JSON files to check\n        const jsonFiles = [\n          &quot;data/profile.json&quot;,\n          &quot;data/projects.json&quot;,\n          &quot;data/blogs.json&quot;,\n          &quot;data/projects/minimal-dashboard.json&quot;,\n          &quot;data/blogs/minimalism-in-web-design.json&quot;,\n        ];\n\n        let resultsHTML = &quot;&lt;h2&gt;JSON File Check Results&lt;/h2&gt;&quot;;\n\n        // Check each JSON file\n        for (const file of jsonFiles) {\n          try {\n            const response = await fetch(file);\n\n            if (response.ok) {\n              try {\n                const jsonData = await response.json();\n                resultsHTML += `\n                &lt;div class=&quot;file-test success&quot;&gt;\n                  ✅ &lt;code&gt;${file}&lt;/code&gt; - Valid JSON\n                  &lt;div class=&quot;json-display&quot;&gt;${JSON.stringify(\n                    jsonData,\n                    null,\n                    2\n                  )}&lt;/div&gt;\n                &lt;/div&gt;\n              `;\n              } catch (parseError) {\n                resultsHTML += `\n                &lt;div class=&quot;file-test error&quot;&gt;\n                  ❌ &lt;code&gt;${file}&lt;/code&gt; - Invalid JSON: ${parseError.message}\n                &lt;/div&gt;\n              `;\n              }\n            } else {\n              resultsHTML += `\n              &lt;div class=&quot;file-test error&quot;&gt;\n                ❌ &lt;code&gt;${file}&lt;/code&gt; - Error: ${response.status} ${response.statusText}\n              &lt;/div&gt;\n            `;\n            }\n          } catch (error) {\n            resultsHTML += `\n            &lt;div class=&quot;file-test error&quot;&gt;\n              ❌ &lt;code&gt;${file}&lt;/code&gt; - Exception: ${error.message}\n            &lt;/div&gt;\n          `;\n          }\n        }\n\n        // Check component script loading\n        resultsHTML += &quot;&lt;h2&gt;Component Script Check&lt;/h2&gt;&quot;;\n\n        try {\n          // Create a test div\n          const testDiv = document.createElement(&quot;div&quot;);\n          testDiv.id = &quot;component-test&quot;;\n          document.body.appendChild(testDiv);\n\n          // Load components script\n          const script = document.createElement(&quot;script&quot;);\n          script.src = &quot;components.js&quot;;\n\n          // Set up listeners\n          let scriptLoadedSuccessfully = false;\n\n          script.onload = () =&gt; {\n            scriptLoadedSuccessfully = true;\n\n            // Check if Components object exists\n            if (typeof window.Components !== &quot;undefined&quot;) {\n              // Try to render a component\n              try {\n                testDiv.innerHTML = window.Components.Loading();\n                resultsHTML += `\n                &lt;div class=&quot;file-test success&quot;&gt;\n                  ✅ Components object loaded and functional\n                &lt;/div&gt;\n              `;\n              } catch (componentError) {\n                resultsHTML += `\n                &lt;div class=&quot;file-test error&quot;&gt;\n                  ⚠️ Components object exists but throws error: ${componentError.message}\n                &lt;/div&gt;\n              `;\n              }\n            } else {\n              resultsHTML += `\n              &lt;div class=&quot;file-test error&quot;&gt;\n                ⚠️ components.js loaded but Components object not found\n              &lt;/div&gt;\n            `;\n            }\n\n            // Clean up\n            testDiv.remove();\n            results.innerHTML = resultsHTML;\n          };\n\n          script.onerror = () =&gt; {\n            resultsHTML += `\n            &lt;div class=&quot;file-test error&quot;&gt;\n              ❌ Failed to load components.js script\n            &lt;/div&gt;\n          `;\n            testDiv.remove();\n            results.innerHTML = resultsHTML;\n          };\n\n          // Add script to page\n          document.body.appendChild(script);\n\n          // Set a timeout to check if script loaded\n          setTimeout(() =&gt; {\n            if (!scriptLoadedSuccessfully) {\n              resultsHTML += `\n              &lt;div class=&quot;file-test error&quot;&gt;\n                ⚠️ Timeout waiting for components.js to load\n              &lt;/div&gt;\n            `;\n              results.innerHTML = resultsHTML;\n            }\n          }, 3000);\n        } catch (error) {\n          resultsHTML += `\n          &lt;div class=&quot;file-test error&quot;&gt;\n            ❌ Error testing component script: ${error.message}\n          &lt;/div&gt;\n        `;\n          results.innerHTML = resultsHTML;\n        }\n      }\n\n      // Check if we have CORS issues\n      async function checkCorsStatus() {\n        try {\n          // Make a simple request to check if we&#039;re running on a server\n          await fetch(&quot;data/&quot;);\n          return true;\n        } catch (error) {\n          if (error.message.includes(&quot;CORS&quot;)) {\n            document.getElementById(&quot;results&quot;).innerHTML = `\n            &lt;div class=&quot;file-test error&quot;&gt;\n              &lt;h2&gt;⚠️ CORS Error Detected&lt;/h2&gt;\n              &lt;p&gt;This page needs to be run from a web server to properly check file paths.&lt;/p&gt;\n              &lt;p&gt;Files with &lt;code&gt;file://&lt;/code&gt; URLs cannot be loaded via fetch due to browser security restrictions.&lt;/p&gt;\n              &lt;p&gt;Suggestions:&lt;/p&gt;\n              &lt;ul&gt;\n                &lt;li&gt;Use a local development server (like Live Server in VS Code)&lt;/li&gt;\n                &lt;li&gt;Use Python&#039;s simple HTTP server: &lt;code&gt;python -m http.server&lt;/code&gt;&lt;/li&gt;\n                &lt;li&gt;Use Node.js http-server: &lt;code&gt;npx http-server&lt;/code&gt;&lt;/li&gt;\n              &lt;/ul&gt;\n            &lt;/div&gt;\n          `;\n            return false;\n          }\n          return true;\n        }\n      }\n\n      // Check CORS on page load\n      checkCorsStatus();\n    &lt;/script&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n",
  "project.html": "&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n  &lt;meta charset=&quot;UTF-8&quot; /&gt;\n  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;\n  &lt;title&gt;PROJECT_ | PORTFOLIO_&lt;/title&gt;\n  &lt;link rel=&quot;icon&quot; href=&quot;./images/logo.svg&quot; type=&quot;image/svg+xml&quot; /&gt;\n  &lt;link rel=&quot;stylesheet&quot; href=&quot;./assets/styles.css&quot; /&gt;\n  &lt;link href=&quot;https://fonts.googleapis.com/css2?family=JetBrains+Mono:wght@400;500;600;700&amp;display=swap&quot; rel=&quot;stylesheet&quot; /&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;div class=&quot;grid&quot;&gt;&lt;/div&gt;\n  &lt;header&gt;&lt;/header&gt;\n  &lt;main&gt;\n    &lt;div class=&quot;terminal-window&quot;&gt;\n      &lt;div class=&quot;terminal-header&quot;&gt;\n        &lt;div class=&quot;terminal-buttons&quot;&gt;\n          &lt;div class=&quot;terminal-button close&quot;&gt;&lt;/div&gt;\n          &lt;div class=&quot;terminal-button minimize&quot;&gt;&lt;/div&gt;\n          &lt;div class=&quot;terminal-button maximize&quot;&gt;&lt;/div&gt;\n        &lt;/div&gt;\n        &lt;div class=&quot;terminal-title&quot;&gt;cat README.md&lt;/div&gt;\n      &lt;/div&gt;\n      &lt;div class=&quot;terminal-body&quot;&gt;\n        &lt;div class=&quot;terminal-line&quot;&gt;\n          &lt;div class=&quot;terminal-prompt&quot;&gt;\n            &lt;span class=&quot;terminal-user&quot;&gt;projects&lt;/span&gt;\n            &lt;span&gt;@&lt;/span&gt;\n            &lt;span class=&quot;terminal-host&quot;&gt;portfolio&lt;/span&gt;\n            &lt;span&gt;:&lt;/span&gt;\n            &lt;span class=&quot;terminal-path&quot;&gt;~/code/&lt;span id=&quot;project-path&quot;&gt;project-name&lt;/span&gt;&lt;/span&gt;\n            &lt;span&gt;$&lt;/span&gt;\n          &lt;/div&gt;\n          &lt;div class=&quot;terminal-command&quot;&gt;cat README.md&lt;/div&gt;\n        &lt;/div&gt;\n        &lt;div class=&quot;terminal-output&quot;&gt;\n          &lt;article class=&quot;project-detail&quot;&gt;\n            &lt;div class=&quot;project-header&quot;&gt;\n              &lt;h1 id=&quot;project-title&quot;&gt;PROJECT_TITLE_&lt;/h1&gt;\n              &lt;div id=&quot;project-tags&quot; class=&quot;project-tags&quot;&gt;&lt;/div&gt;\n              &lt;p id=&quot;project-description&quot; class=&quot;subtitle&quot;&gt;&lt;/p&gt;\n              &lt;div id=&quot;project-links&quot; class=&quot;project-links&quot;&gt;&lt;/div&gt;\n            &lt;/div&gt;\n            &lt;div id=&quot;project-content&quot; class=&quot;project-content&quot;&gt;\n              &lt;div class=&quot;loading&quot;&gt;\n                Loading project README.md...&lt;span class=&quot;blink-cursor&quot;&gt;&lt;/span&gt;\n              &lt;/div&gt;\n            &lt;/div&gt;\n          &lt;/article&gt;\n        &lt;/div&gt;\n        &lt;div class=&quot;terminal-line&quot;&gt;\n          &lt;div class=&quot;terminal-prompt&quot;&gt;\n            &lt;span class=&quot;terminal-user&quot;&gt;projects&lt;/span&gt;\n            &lt;span&gt;@&lt;/span&gt;\n            &lt;span class=&quot;terminal-host&quot;&gt;portfolio&lt;/span&gt;\n            &lt;span&gt;:&lt;/span&gt;\n            &lt;span class=&quot;terminal-path&quot;&gt;~/code/&lt;span class=&quot;project-path-cursor&quot;&gt;project-name&lt;/span&gt;&lt;/span&gt;\n            &lt;span&gt;$&lt;/span&gt;\n          &lt;/div&gt;\n          &lt;div class=&quot;terminal-command blink-cursor&quot;&gt;&lt;/div&gt;\n        &lt;/div&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/main&gt;\n  &lt;footer&gt;&lt;/footer&gt;\n  &lt;script src=&quot;./assets/script.js&quot;&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;",
  "projects.html": "&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n  &lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot; /&gt;\n    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;\n    &lt;title&gt;PROJECTS_ | PORTFOLIO_&lt;/title&gt;\n    &lt;link\n      rel=&quot;icon&quot;\n      href=&quot;./images/logo.svg&quot;\n      type=&quot;image/svg+xml&quot;\n    /&gt;\n    &lt;link rel=&quot;stylesheet&quot; href=&quot;./assets/styles.css&quot; /&gt;\n    &lt;link\n      href=&quot;https://fonts.googleapis.com/css2?family=JetBrains+Mono:wght@400;500;600;700&amp;display=swap&quot;\n      rel=&quot;stylesheet&quot;\n    /&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;div class=&quot;grid&quot;&gt;&lt;/div&gt;\n    &lt;header&gt;&lt;/header&gt;\n    &lt;main&gt;\n      &lt;section id=&quot;projects-list&quot;&gt;\n        &lt;div class=&quot;terminal-window&quot;&gt;\n          &lt;div class=&quot;terminal-header&quot;&gt;\n            &lt;div class=&quot;terminal-buttons&quot;&gt;\n              &lt;div class=&quot;terminal-button close&quot;&gt;&lt;/div&gt;\n              &lt;div class=&quot;terminal-button minimize&quot;&gt;&lt;/div&gt;\n              &lt;div class=&quot;terminal-button maximize&quot;&gt;&lt;/div&gt;\n            &lt;/div&gt;\n            &lt;div class=&quot;terminal-title&quot;&gt;ssh projects.portfolio.local&lt;/div&gt;\n          &lt;/div&gt;\n          &lt;div class=&quot;terminal-body&quot;&gt;\n            &lt;div class=&quot;ssh-loading&quot;&gt;\n              &lt;div class=&quot;terminal-line&quot;&gt;\n                &lt;div class=&quot;terminal-prompt&quot;&gt;\n                  &lt;span class=&quot;terminal-user&quot;&gt;user&lt;/span&gt;\n                  &lt;span&gt;@&lt;/span&gt;\n                  &lt;span class=&quot;terminal-host&quot;&gt;local&lt;/span&gt;\n                  &lt;span&gt;:&lt;/span&gt;\n                  &lt;span class=&quot;terminal-path&quot;&gt;~&lt;/span&gt;\n                  &lt;span&gt;$&lt;/span&gt;\n                &lt;/div&gt;\n                &lt;div class=&quot;terminal-command&quot;&gt;ssh projects@portfolio.local&lt;/div&gt;\n              &lt;/div&gt;\n              &lt;p&gt;Connecting to projects@portfolio.local...&lt;/p&gt;\n              &lt;p&gt;\n                The authenticity of host &#039;portfolio.local&#039; can&#039;t be established.\n              &lt;/p&gt;\n              &lt;p&gt;\n                ECDSA key fingerprint is\n                SHA256:dGhpciBpcyBhIGZha2Uga2V5IGZpbmdlcnByaW50\n              &lt;/p&gt;\n              &lt;p&gt;\n                Are you sure you want to continue connecting\n                (yes/no/[fingerprint])? yes\n              &lt;/p&gt;\n              &lt;p&gt;\n                Warning: Permanently added &#039;portfolio.local&#039; (ECDSA) to the list\n                of known hosts.\n              &lt;/p&gt;\n              &lt;p&gt;Password: ********&lt;/p&gt;\n              &lt;p&gt;Last login: Tue Feb 25 13:37:42 2025 from 192.168.1.42&lt;/p&gt;\n            &lt;/div&gt;\n            &lt;div class=&quot;terminal-line&quot;&gt;\n              &lt;div class=&quot;terminal-prompt&quot;&gt;\n                &lt;span class=&quot;terminal-user&quot;&gt;projects&lt;/span&gt;\n                &lt;span&gt;@&lt;/span&gt;\n                &lt;span class=&quot;terminal-host&quot;&gt;portfolio&lt;/span&gt;\n                &lt;span&gt;:&lt;/span&gt;\n                &lt;span class=&quot;terminal-path&quot;&gt;~&lt;/span&gt;\n                &lt;span&gt;$&lt;/span&gt;\n              &lt;/div&gt;\n              &lt;div class=&quot;terminal-command&quot;&gt;ls -la&lt;/div&gt;\n            &lt;/div&gt;\n            &lt;div class=&quot;terminal-output&quot;&gt;\n              &lt;div class=&quot;loading&quot;&gt;\n                Fetching project data...&lt;span class=&quot;blink-cursor&quot;&gt;&lt;/span&gt;\n              &lt;/div&gt;\n            &lt;/div&gt;\n          &lt;/div&gt;\n        &lt;/div&gt;\n      &lt;/section&gt;\n    &lt;/main&gt;\n    &lt;footer&gt;&lt;/footer&gt;\n    &lt;script src=&quot;./assets/script.js&quot;&gt;&lt;/script&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n",
  ".motd": "Welcome to the Portfolio Terminal Interface\n\nType 'help' to see available commands\n",
  ".issue": "Portfolio Terminal v1.0.0\n"
}