{
  "id": "ascii-art-generator",
  "title": "ASCII Art Generator",
  "description": "An interactive web application for creating, customizing, and exporting ASCII art with multiple shapes, patterns, and export options.",
  "date": "2024-09-20",
  "tags": ["React", "TypeScript", "Tailwind CSS", "Vite", "Interactive"],
  "github": "https://github.com/ioloEJ42/ASCII-GEN",
  "live": "https://ascii-gen.netlify.app/",
  "content": "<h2>Project Overview</h2><p>The ASCII Art Generator is a short little project compromising of a web application that allows users to create, customize, and export ASCII art. </p><h2>Key Features</h2><ul><li><strong>Dynamic Shape Generation:</strong> Choose from multiple shapes including circle, square, triangle, heart, octagon, star, and diamond</li><li><strong>Customizable Patterns:</strong> Apply various patterns to your shapes, including animated options like wave, spiral, and pulsate</li><li><strong>Real-time Color Management:</strong> Customize background, main, and accent colors with an intuitive color picker</li><li><strong>Interactive Resizing:</strong> Resize your ASCII art in real-time with a draggable interface</li><li><strong>Multiple Export Options:</strong> Save your creation as JPG, PNG, animated GIF, or even as a React component</li><li><strong>Responsive Design:</strong> Fully responsive layout that works on desktop and mobile devices</li><li><strong>Dark Mode:</strong> Toggle between light and dark themes for comfortable viewing</li><li><strong>Keyboard Shortcuts:</strong> Enhance productivity with easy-to-use keyboard shortcuts</li></ul><h2>Technical Implementation</h2><p>The project leverages several modern web technologies:</p><ul><li><strong>React.js with TypeScript:</strong> For a robust, type-safe component architecture</li><li><strong>Vite:</strong> Next-generation front-end tooling for faster development and optimized builds</li><li><strong>Tailwind CSS:</strong> Utility-first CSS framework for rapid UI development</li><li><strong>Shadcn UI:</strong> Re-usable components built with Radix UI and Tailwind CSS</li><li><strong>HTML2Canvas:</strong> For rendering and capturing the ASCII art as an image</li><li><strong>GIF.js:</strong> Enables the creation of animated GIFs from the ASCII art</li></ul><h2>Performance Considerations</h2><p>The application includes several performance optimizations:</p><ul><li>Efficient re-rendering using React's useCallback and useMemo hooks</li><li>Optimized art generation algorithm to handle large ASCII art sizes</li><li>Lazy loading of export functionalities to reduce initial load time</li></ul><h2>User Experience</h2><p>The application provides an intuitive interface with:</p><ul><li>Separate tabs for shape selection, pattern customization, and color management</li><li>Real-time preview of changes</li><li>Convenient keyboard shortcuts for common actions</li><li>Multiple export options to suit different needs</li><li>Responsive design that works across devices</li></ul><h2>Accessibility</h2><p>Accessibility was a key consideration, with features like:</p><ul><li>Proper ARIA labels on interactive elements</li><li>Keyboard navigation support</li><li>Color contrast considerations in the UI design</li><li>Screen reader-friendly content structure</li></ul><p>This project demonstrates my ability to create complex, interactive web applications with a focus on user experience, performance, and accessibility.</p>"
}
